<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GAS | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/gas/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2014-06-02T20:51:25+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptを速くするためのベストプラクティス]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script/"/>
    <updated>2014-05-30T18:23:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script</id>
    <content type="html"><![CDATA[<p>Google Developersサイトの<a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を要約してみた。</p>

<!--more-->


<h3>サービスのcallを最小限に</h3>

<p>javascript内で閉じた処理の方がサービスをcallするよりも早い。サービスのcallとはspreadsheetのデータを読み出したり書き出したり、Docsを参照したり、SiteやTranslateやUrlFetchとか使ったり。</p>

<h3>バッチオペレーション</h3>

<p>spreadsheetのreadとwriteの回数を最小化する。readとwriteは重い処理。1オペレーションでデータを配列にreadし、1オペレーションで配列にwriteすること。forreachの中で毎回callするのは遅いので、配列に溜めて最後に1回で書きだす。たとえば<code>setBackgroundColor(value)</code>をたくさん呼ぶのではなく<code>setBackgroundColors(values);</code>1回にする。</p>

<h3>Cache Class</h3>

<p><a href="https://developers.google.com/apps-script/reference/cache/cache?hl=ja">Cache</a>というキャッシュクラスがあるので、頻繁に使うけど遅いデータはキャッシュしとく。key valueでキャッシュできる。</p>

<p>例</p>

<p>```
function getRssFeed() {
   var cache = CacheService.getPublicCache();
   var cached = cache.get(&ldquo;rss-feed-contents&rdquo;);
   if (cached != null) {</p>

<pre><code> return cached;
</code></pre>

<p>   }
   var result = UrlFetchApp.fetch(&ldquo;<a href="http://example.com/my-slow-rss-feed.xml">http://example.com/my-slow-rss-feed.xml</a>&rdquo;); // takes 20 seconds
   var contents = result.getContentText();
   cache.put(&ldquo;rss-feed-contents&rdquo;, contents, 1500); // cache for 25 minutes
   return contents;
}
```</p>

<h3>Using Client Handlers for More Responsive UIs</h3>

<p>UI applicationを使う場合でイベントコールバック(たとえばボタンをクリックするとか)を使う場合、<a href="https://developers.google.com/apps-script/reference/ui/client-handler?hl=ja">ClientHandler</a>を使うと高速化できる。サーバサイドでイベントキャッチするのではなく、クライアントサイド(ブラウザ)でhandleすることができるので。使う機会がいまのところ無いので詳しくはない。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptの共通関数をライブラリでまとめる]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/google-apps-script-library/"/>
    <updated>2014-05-30T14:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/google-apps-script-library</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/05/30/tried-google-apps-script/">前回</a>に引き続きGoogle Apps Script。共通関数をライブラリにする方法。</p>

<!--more-->


<p>共通の処理をライブラリとして独立して管理できるのか調査した。Libraryの機能を使うとできることがわかったのでメモ。<a href="https://developers.google.com/apps-script/guide_libraries">公式のドキュメント</a>。</p>

<p>spreadsheet &ndash;> スクリプトエディタ &ndash;> スクリプト作成 の順番でたどるとspreadsheetのバインドされたscriptができあがるが、このスクリプトはライブラリにはできない。ライブラリとして作るにはGoogle Apps Home &ndash;> スクリプト作成する必要がある点が最初分かりにくかった。</p>

<p>ライブラリ作成後、spreadsheetのスクリプトエディタ側でライブラリを指定してあげればOK。実際はライブラリにユニークに割り当てられるproject keyを使う側で指定する。</p>

<h4>イメージ</h4>

<p><img src="/images/20140530-script-lib.png"></p>

<h4>最低限必要なこと</h4>

<ul>
<li>利用ユーザへライブラリへのアクセス権限が必要</li>
<li>project keyの伝達が必要</li>
<li>ライブラリスクリプトは1個以上のバージョニングをつけて保存すること(インクルード側でバージョン指定ができる)</li>
</ul>


<h4>その他</h4>

<ul>
<li>インクルードライブラリの識別子(クラス名みたいなもの)は任意の文字列を指定できる。たとえば<code>MyPicasaApi</code>とか。プロジェクト内では<code>MyPicasaApi.doSomething()</code>で呼べる。もし既存のクラス(たとえば<code>UiApp</code>)と被ると既存クラスがオーバライドされる。</li>
<li>privateなメソッドを作るには _ で終わる名前をつけるとautocompleteで出てこなくなる。 e.g. <code>myPrivateMethod_()</code></li>
<li>autocompleteで表示されるドキュメントを与えたいなら、関数の上に<a href="https://developers.google.com/closure/compiler/docs/js-for-compiler">JSDoc style documentation</a>でコメントを書く。</li>
</ul>


<p><code>
/**
* Raises a number to the given power, and returns the result.
*
* @param {number} base the number we're raising to a power
* @param {number} exp the exponent we're raising the base to
* @return {number} the result of the exponential calculation
*/
function power(base, exp) { ... }
</code></p>

<p>GAS力がさらに上がりました!以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptをつかってみた]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/tried-google-apps-script/"/>
    <updated>2014-05-30T00:39:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/tried-google-apps-script</id>
    <content type="html"><![CDATA[<p>某案件でGoogle Spreadsheetを使う機会があって少しかじってみた。浅くメモ。</p>

<!--more-->


<h3>About Google Apps Script</h3>

<p>Google Apps ScriptはGoogleプラットフォーム上で動くサーバサイドjavascript。spreadsheetに限らずGoogle Apps上のデータと連携してアイデア次第で何でもできる言語。例えばGmailでqueryをかけてbodyをパースしてspreadsheetにデータ貯めて、解析してPDF変換してGmailに送る、みたいなこともできる。</p>

<p>Google Apps内に限らず、外部のAPIサーバからデータを取ってきたり、逆に外のサーバにデータを送ることもできる。ただし、Google Platformで実行されるのでファイアウォールを超えてイントラネットに接続するという要件はセキュリティ的に難しい制約はある。</p>

<p>triggerを使うとイベント起因で関数を実行できる。ボタンクリックとかドキュメントを開いたときとか。</p>

<h4>triggerの例</h4>

<p>ドキュメントオープン時にメニューボタンを追加する例。</p>

<p>```
function onOpen() { // automatically run this on open a spreadsheet.
  var menuEntries = [ {name: &ldquo;say hello&rdquo;, functionName: &ldquo;sayHello&rdquo;} ];
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.addMenu(&ldquo;my menu&rdquo;, menuEntries);
}</p>

<p>function sayHello() {
  Logger.log(&lsquo;Hello World!&rsquo;);
}
```</p>

<p>時限式のtriggerでcron的なことも可能で、もちろんMac Bookを閉じた後もGoogleプラットフォーム上で実行される。triggerを使えば定期的にGmailをチェックして何かやるみたいなこともできる。</p>

<p>書いたスクリプトをWebアプリとして公開する設定をするとURLのエンドポイントがもらえる。triggerには<code>doGet()</code>というのもあってURLをGETしたトリガで何かできたりする。例えばGETトリガでスクリプトへcallbackされるのでURLのqueryのkey, valueをspreadsheetにためるといったこともできる(簡易WebAPI!)</p>

<h3>制約</h3>

<h4>実行遅い</h4>

<p>結構実行遅い。APIのcallを少なくを心がける。ノウハウは <a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を参照のこと。</p>

<p>```
var ss = SpreadsheetApp.getActiveSpreadsheet();
var sh = ss.getSheetByName(&lsquo;シート1&rsquo;);</p>

<p>//bad
for (n = 0; n &lt; 2; n++) {</p>

<pre><code>sh.getRange(n,1).setValue('Value');
sh.getRange(n,2).setValue('Value');
</code></pre>

<p>}</p>

<p>//good
sh.getRange(1,1,2,2).setValues([[&lsquo;Value&rsquo;, &lsquo;Value&rsquo;], [&lsquo;Value&rsquo;, &lsquo;Value&rsquo;]]);
```</p>

<h4>1回の実行 5分まで</h4>

<p>実行が5分過ぎるとスクリプトは終了する。</p>

<h3>リファレンス</h3>

<p>自分はこの辺みてます。</p>

<ul>
<li><a href="https://developers.google.com/apps-script/?hl=ja">何はともあれ公式サイト</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/google-apps-script">stackoverflowのtagged/google-apps-script</a> あまり見てないけど</li>
<li>本 僕はいま<a href="http://www.amazon.co.jp/gp/product/B00IM5UW1W/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">Google Apps Script for Biginner</a>を読んでる</li>
</ul>


<p>日本語でヒットするサイトはExcelっぽい雰囲気が漂っててあまり見ていない(笑) もちろん参考にさせていただいているけど。</p>

<h3>おもったところ</h3>

<p>開発環境はブラウザ上のスクリプトエディタを使わざるおえないので、脳がブラウジング脳になるのが難点。viモードほしい。</p>

<p>他のOSSと組み合わせるとアイデア次第で面白いことできそう。<a href="http://qiita.com/kazunori279/items/6329df57635799405547">Fluentd Dashboard</a> のデモはすごかった!</p>

<p>Viewを作らなくていいので楽!</p>

<p>カジュアルに初めてカジュアルに終えるのが良いかと。それなりの規模であればRailsとかで真面目に作ろう。</p>
]]></content>
  </entry>
  
</feed>
