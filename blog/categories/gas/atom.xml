<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GAS | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/gas/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2015-04-17T13:02:12+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Apps Script カスタムLoggerでログをspreadsheetに書き出す]]></title>
    <link href="http://orihubon.com/blog/2014/06/18/log-to-sheet-by-custom-logger-google-apps-script/"/>
    <updated>2014-06-18T20:05:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/06/18/log-to-sheet-by-custom-logger-google-apps-script</id>
    <content type="html"><![CDATA[<p>Google Apps Scriptの中でLoggerで吐くログをシートに書き出すカスタムLoggerを作ってみた。</p>

<!--more-->


<p>こういうシートができあがる。</p>

<p><img src="/images/20140618-mylogger.png"></p>

<p><code>Logger.log()</code>ではなくて恒久的に保存するためのロガーを作る。例えばTriggerで時限式実行するスクリプトのログを保存しておきたいとかの用途。</p>

<p>いつものとおりライブラリ化する。<code>MyLogger</code>という名前で。</p>

<p>```javascript
function log_sheet_() {
  var sheet_name = &lsquo;log&rsquo;;
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sh = ss.getSheetByName(sheet_name);
  if (sh == null) {</p>

<pre><code>var active_sh = ss.getActiveSheet(); // memorize current active sheet;
sheet_num = ss.getSheets().length;
sh = ss.insertSheet(sheet_name, sheet_num);
sh.getRange('A1:C1').setValues([['timestamp', 'level', 'message']]).setBackground('#cfe2f3').setFontWeight('bold');
sh.getRange('A2:C2').setValues([[new Date(), 'info', sheet_name + ' has been created.']]).clearFormat();

// .insertSheet()を呼ぶと"log"シートがアクティブになるので、元々アクティブだったシートにフォーカスを戻す
ss.setActiveSheet(active_sh);
</code></pre>

<p>  }
  return sh;
}</p>

<p>function log<em>(level, message) {
  var sh = log_sheet</em>();
  var now = new Date();
  var last_row = sh.getLastRow();
  sh.insertRowAfter(last_row).getRange(last_row+1, 1, 1, 3).setValues([[now, level, message]]);
  return sh;
}</p>

<p>function debug(message) {
  log_(&lsquo;debug&rsquo;, message);
}</p>

<p>function info(message) {
  log_(&lsquo;info&rsquo;, message);
}</p>

<p>function warn(message) {
  log_(&lsquo;warn&rsquo;, message);
}</p>

<p>function error(message) {
  log_(&lsquo;error&rsquo;, message);
}</p>

<p>function fatal(message) {
  log_(&lsquo;fatal&rsquo;, message);
}
```</p>

<p>呼び出す側のプロジェクトでは、先ほど作った<code>MyLogger</code>のプロジェクトキーを登録して、こうやって呼び出す。初回呼び出し時に"log"という名前でシートを作成し以降は末尾の行にログが追加される。</p>

<p><code>javascript
MyLogger.info('works!');
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptで行データを連想配列として扱う]]></title>
    <link href="http://orihubon.com/blog/2014/06/17/convert-row-array-to-hash-in-google-apps-script/"/>
    <updated>2014-06-17T18:12:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/06/17/convert-row-array-to-hash-in-google-apps-script</id>
    <content type="html"><![CDATA[<p>Goolge Apps Scriptでspreadsheetの各列にアクセスするときに、列番号を指定してアクセスするコードを書いてると列追加するとスクリプトが壊れる。そこで1行目(ヘッダ行)をキーにアクセスするコードをライブラリにまとめてみた。普通なんだけどぐぐっても出てこなかったので。</p>

<!-- more -->


<p>以下をUtilsというプロジェクト名で保存。</p>

<p>```javascript
/<em>*
* returns keys located at top of spreadsheet
*
* @param {sheet} sh Sheet class
* @return {array} array of keys
</em>/
function headerKeys(sh) {
  return sh.getRange(1,1,1, sh.getLastColumn()).getValues()[0];
}</p>

<p>/<em>*
* Convert a row to key-value hash according to keys input parameter
*
* @param {array} array
* @param {array} keys
* @return {array} key-value mapped
</em>/
function rowToHash(array, keys) {
  var hash = {};
  array.forEach(function(value, i) {</p>

<pre><code>hash[keys[i]] = value;
</code></pre>

<p>  })
  return hash;
}
```</p>

<p>参照側のプロジェクトにて、ライブラリ機能を使ってincludeすると以下のようにキーで行配列を扱える。</p>

<p>```javascript
// 住所録 名前から住所を取得
function getAddressByFullName(fullName) {
  var sh = SpreadsheetApp.getActive().getSheetByName(&lsquo;addresses&rsquo;);
  keys = Utils.headerKeys(sh);                                                       // ヘッダ行を取得
  var values = sh.getRange(2, 1, sh.getLastRow()-1, sh.getLastColumn()).getValues(); // データ部分(2行目以降)取得
  for (var i = 0; i &lt; values.length; i++) {</p>

<pre><code>var row = values[i];
row = Utils.rowToHash(row, keys); 
if (row['full_name'] == fullName) {
  return row['address'];
}
</code></pre>

<p>  }
}
```</p>

<p>さあこれで列が追加されても大丈夫。RDBMSだと普通なことGAS何でこんなに大変なの!とか考えたら負けです。</p>

<p>早く卒業したいGASおじさん。つっこみありましたらお手柔らかによろしくお願いします!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptを速くするためのベストプラクティス]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script/"/>
    <updated>2014-05-30T18:23:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script</id>
    <content type="html"><![CDATA[<p>Google Developersサイトの<a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を要約してみた。</p>

<!--more-->


<h3>サービスのcallを最小限に</h3>

<p>javascript内で閉じた処理の方がサービスをcallするよりも早い。サービスのcallとはspreadsheetのデータを読み出したり書き出したり、Docsを参照したり、SiteやTranslateやUrlFetchとか使ったり。</p>

<h3>バッチオペレーション</h3>

<p>spreadsheetのreadとwriteの回数を最小化する。readとwriteは重い処理。1オペレーションでデータを配列にreadし、1オペレーションで配列にwriteすること。forreachの中で毎回callするのは遅いので、配列に溜めて最後に1回で書きだす。たとえば<code>setBackgroundColor(value)</code>をたくさん呼ぶのではなく<code>setBackgroundColors(values);</code>1回にする。</p>

<h3>Cache Class</h3>

<p><a href="https://developers.google.com/apps-script/reference/cache/cache?hl=ja">Cache</a>というキャッシュクラスがあるので、頻繁に使うけど遅いデータはキャッシュしとく。key valueでキャッシュできる。</p>

<p>例</p>

<p>```
function getRssFeed() {
   var cache = CacheService.getPublicCache();
   var cached = cache.get(&ldquo;rss-feed-contents&rdquo;);
   if (cached != null) {</p>

<pre><code> return cached;
</code></pre>

<p>   }
   var result = UrlFetchApp.fetch(&ldquo;<a href="http://example.com/my-slow-rss-feed.xml">http://example.com/my-slow-rss-feed.xml</a>&rdquo;); // takes 20 seconds
   var contents = result.getContentText();
   cache.put(&ldquo;rss-feed-contents&rdquo;, contents, 1500); // cache for 25 minutes
   return contents;
}
```</p>

<h3>Using Client Handlers for More Responsive UIs</h3>

<p>UI applicationを使う場合でイベントコールバック(たとえばボタンをクリックするとか)を使う場合、<a href="https://developers.google.com/apps-script/reference/ui/client-handler?hl=ja">ClientHandler</a>を使うと高速化できる。サーバサイドでイベントキャッチするのではなく、クライアントサイド(ブラウザ)でhandleすることができるので。使う機会がいまのところ無いので詳しくはない。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptの共通関数をライブラリでまとめる]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/google-apps-script-library/"/>
    <updated>2014-05-30T14:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/google-apps-script-library</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/05/30/tried-google-apps-script/">前回</a>に引き続きGoogle Apps Script。共通関数をライブラリにする方法。</p>

<!--more-->


<p>共通の処理をライブラリとして独立して管理できるのか調査した。Libraryの機能を使うとできることがわかったのでメモ。<a href="https://developers.google.com/apps-script/guide_libraries">公式のドキュメント</a>。</p>

<p>spreadsheet &ndash;> スクリプトエディタ &ndash;> スクリプト作成 の順番でたどるとspreadsheetのバインドされたscriptができあがるが、このスクリプトはライブラリにはできない。ライブラリとして作るにはGoogle Apps Home &ndash;> スクリプト作成する必要がある点が最初分かりにくかった。</p>

<p>ライブラリ作成後、spreadsheetのスクリプトエディタ側でライブラリを指定してあげればOK。実際はライブラリにユニークに割り当てられるproject keyを使う側で指定する。</p>

<h4>イメージ</h4>

<p><img src="/images/20140530-script-lib.png"></p>

<h4>最低限必要なこと</h4>

<ul>
<li>利用ユーザへライブラリへのアクセス権限が必要</li>
<li>project keyの伝達が必要</li>
<li>ライブラリスクリプトは1個以上のバージョニングをつけて保存すること(インクルード側でバージョン指定ができる)</li>
</ul>


<h4>その他</h4>

<ul>
<li>インクルードライブラリの識別子(クラス名みたいなもの)は任意の文字列を指定できる。たとえば<code>MyPicasaApi</code>とか。プロジェクト内では<code>MyPicasaApi.doSomething()</code>で呼べる。もし既存のクラス(たとえば<code>UiApp</code>)と被ると既存クラスがオーバライドされる。</li>
<li>privateなメソッドを作るには _ で終わる名前をつけるとautocompleteで出てこなくなる。 e.g. <code>myPrivateMethod_()</code></li>
<li>autocompleteで表示されるドキュメントを与えたいなら、関数の上に<a href="https://developers.google.com/closure/compiler/docs/js-for-compiler">JSDoc style documentation</a>でコメントを書く。</li>
</ul>


<p><code>
/**
* Raises a number to the given power, and returns the result.
*
* @param {number} base the number we're raising to a power
* @param {number} exp the exponent we're raising the base to
* @return {number} the result of the exponential calculation
*/
function power(base, exp) { ... }
</code></p>

<p>GAS力がさらに上がりました!以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptをつかってみた]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/tried-google-apps-script/"/>
    <updated>2014-05-30T00:39:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/tried-google-apps-script</id>
    <content type="html"><![CDATA[<p>某案件でGoogle Spreadsheetを使う機会があって少しかじってみた。浅くメモ。</p>

<!--more-->


<h3>About Google Apps Script</h3>

<p>Google Apps ScriptはGoogleプラットフォーム上で動くサーバサイドjavascript。spreadsheetに限らずGoogle Apps上のデータと連携してアイデア次第で何でもできる言語。例えばGmailでqueryをかけてbodyをパースしてspreadsheetにデータ貯めて、解析してPDF変換してGmailに送る、みたいなこともできる。</p>

<p>Google Apps内に限らず、外部のAPIサーバからデータを取ってきたり、逆に外のサーバにデータを送ることもできる。ただし、Google Platformで実行されるのでファイアウォールを超えてイントラネットに接続するという要件はセキュリティ的に難しい制約はある。</p>

<p>triggerを使うとイベント起因で関数を実行できる。ボタンクリックとかドキュメントを開いたときとか。</p>

<h4>triggerの例</h4>

<p>ドキュメントオープン時にメニューボタンを追加する例。</p>

<p>```
function onOpen() { // automatically run this on open a spreadsheet.
  var menuEntries = [ {name: &ldquo;say hello&rdquo;, functionName: &ldquo;sayHello&rdquo;} ];
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.addMenu(&ldquo;my menu&rdquo;, menuEntries);
}</p>

<p>function sayHello() {
  Logger.log(&lsquo;Hello World!&rsquo;);
}
```</p>

<p>時限式のtriggerでcron的なことも可能で、もちろんMac Bookを閉じた後もGoogleプラットフォーム上で実行される。triggerを使えば定期的にGmailをチェックして何かやるみたいなこともできる。</p>

<p>書いたスクリプトをWebアプリとして公開する設定をするとURLのエンドポイントがもらえる。triggerには<code>doGet()</code>というのもあってURLをGETしたトリガで何かできたりする。例えばGETトリガでスクリプトへcallbackされるのでURLのqueryのkey, valueをspreadsheetにためるといったこともできる(簡易WebAPI!)</p>

<h3>制約</h3>

<h4>実行遅い</h4>

<p>結構実行遅い。APIのcallを少なくを心がける。ノウハウは <a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を参照のこと。</p>

<p>```
var ss = SpreadsheetApp.getActiveSpreadsheet();
var sh = ss.getSheetByName(&lsquo;シート1&rsquo;);</p>

<p>//bad
for (n = 0; n &lt; 2; n++) {</p>

<pre><code>sh.getRange(n,1).setValue('Value');
sh.getRange(n,2).setValue('Value');
</code></pre>

<p>}</p>

<p>//good
sh.getRange(1,1,2,2).setValues([[&lsquo;Value&rsquo;, &lsquo;Value&rsquo;], [&lsquo;Value&rsquo;, &lsquo;Value&rsquo;]]);
```</p>

<h4>1回の実行 5分まで</h4>

<p>実行が5分過ぎるとスクリプトは終了する。</p>

<h3>リファレンス</h3>

<p>自分はこの辺みてます。</p>

<ul>
<li><a href="https://developers.google.com/apps-script/?hl=ja">何はともあれ公式サイト</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/google-apps-script">stackoverflowのtagged/google-apps-script</a> あまり見てないけど</li>
<li>本 僕はいま<a href="http://www.amazon.co.jp/gp/product/B00IM5UW1W/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">Google Apps Script for Biginner</a>を読んでる</li>
</ul>


<p>日本語でヒットするサイトはExcelっぽい雰囲気が漂っててあまり見ていない(笑) もちろん参考にさせていただいているけど。</p>

<h3>おもったところ</h3>

<p>開発環境はブラウザ上のスクリプトエディタを使わざるおえないので、脳がブラウジング脳になるのが難点。viモードほしい。</p>

<p>他のOSSと組み合わせるとアイデア次第で面白いことできそう。<a href="http://qiita.com/kazunori279/items/6329df57635799405547">Fluentd Dashboard</a> のデモはすごかった!</p>

<p>Viewを作らなくていいので楽!</p>

<p>カジュアルに初めてカジュアルに終えるのが良いかと。それなりの規模であればRailsとかで真面目に作ろう。</p>
]]></content>
  </entry>
  
</feed>
