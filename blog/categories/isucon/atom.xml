<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ISUCON | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/isucon/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2015-08-19T15:18:03+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ISUCON4本戦に出場しました!! 悔しい!!]]></title>
    <link href="http://orihubon.com/blog/2014/11/09/isucon4-final/"/>
    <updated>2014-11-09T17:58:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/11/09/isucon4-final</id>
    <content type="html"><![CDATA[<p>週末、<a href="http://isucon.net/archives/cat_1024989.html">ISUCON4本戦</a>に参加しました。</p>

<!--more-->


<p>去年に引き続き2度目となる本戦出場です。メンバは前回同様@sonots, @Spring_MT, GoMiamiというチーム名で参加しました。予選はGoでしたが本戦は慣れてるRubyで戦いました。</p>

<p>お題は動画広告システムのパフォーマンス・チューニング。最初は動画広告とかやったことないしな..とおもいましたが、実質的には数MのファイルのPOST(入稿)とそのファイルのGET(impression, conversion)を中心としたサイト構成でした。</p>

<p>結果は30チーム中17位&hellip;..! 8017点でした。チームの目標が失格にならないことだった点はクリアしたものの、上位に食い込む&hellip;という目標は達成できませんでした。 <a href="http://isucon.net/archives/41187491.html">本戦結果</a>のとおりほとんどのチームが7千から8千点台の中で僅差で並んでて、抜きん出ることは出来きず悔しい感じでした。</p>

<p>今回の問題の本質はベンチが賢い点に気づけるかどうかで、<strong>レスポンスヘッダで適切にキャッシュコントロールさせればベンチサイドでキャッシュが効いて0バイトでレスポンス返すことが出来た</strong>、ということでした、、、、。本戦後の結果発表まで気づけてなくて本当に悔しかったです。ベンチ(!=ブラウザ)という先入観。</p>

<p>事前準備しことはChefレシピを仕込んでおいたくらいです。sshの鍵、/etc/hostsにエイリアス書く、vimrc、各種秘伝のたれ設定(nginx.conf, redis.conf, my.cnf)、nginxアクセスログ等の集計スクリプト等を開始直後にがっとまくやつ。一応各ホスト間もsshとおしたけどこれは大して意味なかった。あとはtd-agentでメトリクスシステム(事前に用意)に飛ばした。chefのお陰で開始20分くらいで環境整えれました。</p>

<p>@Spring_MTと@sonotsで方針ぎめやって、自分は設計に適宜つっこみ入れつつも基本的に2人にお任せしました。自分はnginxをメインに担当しつつ、その他もろもろ。</p>

<p>後半、local benchでは20000以上出る一方でremote benchだと8000程度でこれは何で&hellip;という状況になってその後も策出せず時間切れという感じでした。<strong>なんでremote bench遅いの〜〜</strong> と悩む、というかremote benchでスコア出ないの他チームもqueueして遅くなってるんじゃない!?くらいしか考えが及びませんでした。実は仕様(レギュレーションには無かったものの)というところに気づいてどう帯域を使わないでレスポンス返せるか、という点に考えが及ばなかった。remote bench実行時にネットワーク帯域が頭打ってることは早くから気づいてので悔しい限りです!!!</p>

<p><strong>次回に向けた反省。レギュレーションとコードを腰を据えてじっくり読む余裕。ベンチの挙動とアクセスログに向き合う余裕!!</strong></p>

<p>なお超便利だったのは@mikedaさんの<a href="http://tech.naviplus.co.jp/2014/01/09/tmux%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E5%90%8C%E6%99%82%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/">tmuxで複数サーバの同時オペレーション</a>でした。chefなくてもかなり捗ったかも。</p>

<p>悔しさ山盛りですが毎度楽しいイベントです。みんな同じコンテキストでお酒飲みながら盛り上がれる懇親会はいいものです!!</p>

<p>最後にこのような素晴らしいコンテストを開催していただきありがとうございます!! 出題者、関係者のみなさま本当にお疲れ様でした!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON 2014 予選の記録 GoMiami]]></title>
    <link href="http://orihubon.com/blog/2014/10/05/isucon-qualify/"/>
    <updated>2014-10-05T19:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/10/05/isucon-qualify</id>
    <content type="html"><![CDATA[<p><a href="http://isucon.net/archives/39780986.html">ISUCON4 予選</a>に参加しました。</p>

<!--more-->


<p>去年に引き続き2年目、<a href="http://orihubon.com/blog/2013/10/07/isucon3-yosen/">前年</a>同様 @sonots, @Spring_MT と。チーム名はGoMiamiで。今回もマイアミがすこし関係します!!</p>

<p>Go言語を選択すれば成長しないわけがない!!という意気込みのもとGoでいくことが決定。僕は少し前に<a href="http://go-tour-jp.appspot.com/">A Tour of Go</a> をひと通りやった程度。今回はインフラメインで2人はアプリコードメインに戦略立てるって感じで。</p>

<h3>予選</h3>

<h4>事前準備</h4>

<p>社内で1回前回大会の復習会をやったのと、チームで休日にあつまって前回予選課題を使って予行練習。当日どういう役割でどう動くかみたいなことを練習しました。この予行練習のお陰て今回予選はかなり余裕でました!! @sonots is our brain!</p>

<h4>AM</h4>

<p>午前中はボトルネック探しと、ベンチ特性、方針決めを中心にやった。ので午前中はチューニング作業は無し。</p>

<ul>
<li>開始と同時にメンバ分のインスタンス立ち上げ、本番用インスタンス立ち上げ</li>
<li>本番環境整備(github pull&amp;push環境)</li>
<li>ベンチ1回走らせて、プロファイリング。具体的にはnginxのアクセスログ、slowqueryログ、からベンチの特性分析</li>
<li>コード読んだり、画面見たり、ざっと。</li>
<li>my.cnf, nginx.confを予め用意しておいた内容で置き換え</li>
</ul>


<p>MySQLのCPUが高いのはindexいれるとして、それ以外データベースであまりやることないことが分かって、事前に決めてた通りアプリにオンメモリで乗せる戦略にした。</p>

<p>MySQLは5.5が動いてて、一応5.6に上げる方針にした(けどこれは最終的にはオンメモリ戦略とるのでこの時点で上げる必要性はなかったかなと)</p>

<h4>PM</h4>

<p>飯食べながらさくっとMySQL5.6に上げたところで、じつはアプリのオンメモリ戦略の実装待ちで実はやることが無かった(笑)</p>

<p>アプリがfixしないうちに外を闇雲にチューンしてもはまるだけなので、焦っても仕方ないからこの時間帯はコード眺めたりしつつお茶を濁しておりました。やることないと色々手を動かしたくなるのですが、ここはぐっと押さえて。</p>

<p>アプリの改修が無事に終わって、MySQLのindexチューニングもいれて ここでスコアががくっと上がった。 詳細は<a href="http://blog.livedoor.jp/sonots/archives/40449500.html">sonotsブログ</a>が充実している。</p>

<p>アプリのオンメモリ戦略にてスコア上がった。さらにベンチ負荷上げて試したけどスコア頭打ち。CPU大して使ってないのにスコア上がらなくて。ネットワーク周りかなということで<code>netstat -an | grep TIME_WAIT | wc -l</code> ってやると50kくらいポート使ってたので、以下のチューニングしたらport足りなくなる問題は改善しました。</p>

<p><code>
net.ipv4.ip_local_port_range = 10000 64000
net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_fin_timeout = 5
net.ipv4.tcp_max_syn_backlog = 1024
net.core.somaxconn = 65535
</code></p>

<p>nginx-アプリ間はtcpで通信させててunix socketに変えれば良かったのだけど、martiniでunix socketに変えるやり方が分からなくて、上のチューニングでtcpで回ったのでよしとした。</p>

<p>結果としては最終的に40kあたりのレンジで他チームと横並びで、本戦出場は厳しそう&hellip;な感じですが、結果発表が楽しみです。</p>

<h3>反省</h3>

<p><strong>Chef</strong></p>

<p>予選はミドルウェアとか毎回同じなのでChefレシピ用意しといてインフラ担当が3人分開発環境まで揃えてあげればよかった。今回開発環境は各自お任せだったのでコード読み書きに専念させてあげればよかったなと。</p>

<p><strong>Go</strong></p>

<p>Go力足りてなくて速読できなかった(笑) Spring_MT氏はrubyでコードを把握した後Goをfixしたよと言っていた。なるほど。</p>

<h3>所感</h3>

<ul>
<li>前回大会に比べ今回は余裕をもって想定した力は発揮できたことは進歩</li>
<li>個人的に次週に海外出張控えてて準備等々でISUCON準備できてなかったんですが2人が引っ張ってくれて助かったという感じです。</li>
</ul>


<h4>10/5 UPDATE</h4>

<p><strong>本戦出場決まりました!!!</strong>. 出張終えたら復習&amp;&amp;素振りやります。</p>

<p>というわけでリアルにマイアミ出張いってきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3予選の記録]]></title>
    <link href="http://orihubon.com/blog/2013/10/07/isucon3-yosen/"/>
    <updated>2013-10-07T10:38:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/07/isucon3-yosen</id>
    <content type="html"><![CDATA[<p><a href="http://isucon.net/archives/29328289.html">ISUCON3</a>予選に参加しました。</p>

<!--more-->


<p>チームは会社の同僚の<a href="https://twitter.com/sonots">@sonots</a>さん、<a href="https://twitter.com/Spring_MT">@Spring_MT</a>さん3名(チーム Miami)、予選は10/5(土), 10/6(日)に分かれていて僕たちは2日目に参加しました。</p>

<p>長時間の作業になるので会社で作業しました。僕は朝から興奮してしまって1時間前に会場入りして素振りしてましたが。</p>

<h4>お題アプリ</h4>

<p>githubのgistの機能ライクなメモアプリでした。</p>

<h4>最終的な構成</h4>

<p>nginx + unicorn + MySQL + InnoDB memcached plugin</p>

<h4>午前 &ndash; スタート</h4>

<h5>10:00</h5>

<p>まず、インスタンスによってCPUのモデルに差異があるかもしれないのでメンバ3人それぞれインスタンスを作成しCPUのモデルを確認しましたが結局偏りはありませんでした。</p>

<h5>10:30</h5>

<p>僕はwebappをgithub.comにgit pushしたり、予め用意しておいたカーネルチューニング(とってもネットワーク周りを少しだけ)をしてました。</p>

<h5>11:00</h5>

<p>my.cnf書き換えてslow query logを出すように修正。最初にベンチ走らせてスコアが800ほど。あまり大きなslow queryはありませんでした。</p>

<h5>10:20</h5>

<p>他の2名がリードしてくれてる状況なので、僕何からやろうかなという状態。とりあえずもう一度ドキュメント読んで注意点を確認しました。<code>--workload</code>これは重要なのでチームに周知しときました:) 他のチームでこれ忘れてる人結構ありましたね。</p>

<p>また、<a href="http://miniprofiler.com/">rack-mini-profiler</a>を導入して遅いページを探しました。これ便利ですね。</p>

<p>変更点</p>

<ul>
<li>nginx導入。public_htmlをnginxで返すよう変更</li>
<li>memo POST時にgem_markdown呼び出してmarkdownからHTMLに変換。表示時に都度HTMLコンバートするのをやめた</li>
<li>N+1問題。<code>memos</code>テーブルだけで完結するようにするため、<code>memos</code>テーブルに<code>username</code>フィールドを追加することにした。</li>
<li>複合インデックスを入れてパフォーマンス改善</li>
</ul>


<p><code>
create index user_create_at_index on memos (user, created_at);
create index user_is_private_created_at_index on memos (user, is_private, created_at);
</code></p>

<p>クエリの改善系は僕も対応しました。1つ、2つ改善できてホッとしました。</p>

<h5>13:30</h5>

<p>コンビニ飯</p>

<h4>午後 &ndash; 伸び悩み</h4>

<p>クエリを改善し、nginx + unicornの構成にしスコアは上がりましたが、午後はこの後どうしようか悩む時間でした。</p>

<p>前回isucon2ではVarnishを入れることで劇的にスコアアップできた事例がありましたので、Varnish対応を始めましたがVarnish作戦は結局失敗でした。recentページがキャッシュしにくい(olderとnewerのリンク)構成であったという点&hellip;と認識しています。あとセッションのバリデーションでベンチがコケたみたい。(このへんは僕やってないからもやっとしてる)</p>

<p>より詳細なプロファイリングのためNewRelicも入れてプロファイリング(by Spring_MTさん)。トップページとrecentが70ms程度かかっている状況で以下のクエリがある以上この程度かかるのかな&hellip;.</p>

<p><code>
SELECT id, first_sentence, username, created_at FROM memos WHERE is_private=0 ORDER BY id DESC LIMIT 100 OFFSET #{page * 100}
</code></p>

<p>indexは効かせていたのでこのSELECTやめて別のアプローチをとればスコアアップ狙える、逆にいうとこれ改善しないと上位には入れないよね、というのがチームの午後の課題でしたが最後まで答えを出せずじまいで終わってしまいました。</p>

<p>その他改善したところは以下です。</p>

<ul>
<li>markdown生成のためフォークやめて<a href="https://github.com/vmg/redcarpet">redcarpet</a>使った。でも+500くらい</li>
<li>毎回memoのcontentを<code>.split(/\r?\n/)</code>せず、<code>memos.first_sentence</code>フィールドを作ってmemo POST時に入れるようにした</li>
<li>メモ数をカウントする<code>SELECT count(*) FROM memos</code>をmemdにキャッシュした</li>
<li>sonotsスペシャル => 詳細はsonots blogで</li>
</ul>


<p>最後はログ吐くのをやめてプロファイリングも切って<code>--workload=4</code>くらいにして測定して終了。</p>

<h3>反省点とか所感</h3>

<ul>
<li>memcachedみたいなものには気づかなかった&hellip;</li>
<li>8時間かっとなってコード釘付けになりがちですが、30分くらいはコーヒー飲みながらメンバでディスカッションしてもよかったかも</li>
<li>githubにwebappを上げてpull req方式でコード改修しようとして、実機でコード変えて即ベンチ走らせたい場合もあってmasterがconflictしてしまった。どっちもどっちで難しい。他のチームどうやってるか気になる。</li>
</ul>


<p>ちなみに、自分は普段高負荷環境のWebサービスを運用,開発してる訳ではなくて、Railsで管理系アプリ書いたり監視系ツール作ったりしてる系。始まる前は自分どれだけ対応できるか不安でした。周りのエンジニアや参加者も凄い人たちばかりですし。でも終わってみると参加してよかったです。しんどかったけど。反省会のビールがうまかったです。</p>
]]></content>
  </entry>
  
</feed>
