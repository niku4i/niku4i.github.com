<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2013-12-11T20:35:47+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra::Reloader]]></title>
    <link href="http://orihubon.com/blog/2013/08/06/sinatra-reloader/"/>
    <updated>2013-08-06T19:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/08/06/sinatra-reloader</id>
    <content type="html"><![CDATA[<p>Sinatraを久々に使っている。はて、development環境での自動リロードどうやるのだったか。</p>

<!--more-->


<p><a href="http://www.sinatrarb.com/contrib/reloader.html">Sinatra::Reloader</a> を使うと。</p>

<p>実際には<a href="https://github.com/sinatra/sinatra-contrib">sinatra-contrib</a>というgemをinstallするわけだけど、このgemには他にも機能があるので困ったときはこのgemを眺めるとよさそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでIPアドレスの正規表現を超簡単に書く]]></title>
    <link href="http://orihubon.com/blog/2013/08/06/regex-for-ipv-address/"/>
    <updated>2013-08-06T09:14:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/08/06/regex-for-ipv-address</id>
    <content type="html"><![CDATA[<p>正規表現自前で書かずとも、<code>Resolv::IPv4::Regex</code>を使う。</p>

<!--more-->


<p><code>
require 'resolv'
Resolv::IPv4::Regex.class     
=&gt; Regexp
</code></p>

<p>IPv6の場合は、<code>Resolv::IPv6::Regex</code>を使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordのtypeフィールドについて]]></title>
    <link href="http://orihubon.com/blog/2013/07/29/type-column-of-activerecord/"/>
    <updated>2013-07-29T16:26:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/29/type-column-of-activerecord</id>
    <content type="html"><![CDATA[<p>ActiveRecordのtypeフィールドについて。</p>

<!--more-->


<p>ActiveRecord::Baseを継承したモデルクラスで"type"という名前のフィールドを使おうとすると、</p>

<p><code>
ActiveRecord::SubclassNotFound: The single-table inheritance mechanism failed to locate the subclass: 'abc123'. This error is raised because the column 'type' is reserved for storing the class in case of inheritance. Please rename this column if you didn't intend it to be used for storing the inheritance class or overwrite Graph.inheritance_column to use another column for that information.
</code></p>

<p>という例外に遭遇します。ActiveRecordでは"type"フィールドはSTIという機能により予約されています。 <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecordのSTIの説明</a>にtypeフィールドは継承関係にあるクラス名を保存するフィールドであることが書かれています。</p>

<blockquote><p>Active Record allows inheritance by storing the name of the class in a column
that by default is named “type” (can be changed by overwriting
Base.inheritance_column).</p></blockquote>

<p>このエラーを回避するには以下どちらかで対応します。</p>

<ol>
<li>typeというフィールド名を使うのをやめて別の名前を使う。</li>
<li>もしくは、STIで使うフィールド名を変えてしまう。</li>
</ol>


<p>2のケースでは以下のようにします。</p>

<p><code>ruby app/models/campany.rb
class Company &lt; ActiveRecord::Base; end
  self.inheritance_column = 'sti_type'
end
</code></p>

<p>ケースバイケースですが、ある案件ではtypeフィールドをどうしても使いたかったので2の方法を取りました。type名以外の選択が可能であれば1のケースが良いとおもいます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundle_frozenとかbundle_without]]></title>
    <link href="http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without/"/>
    <updated>2013-07-26T16:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without</id>
    <content type="html"><![CDATA[<p>bundlerの<code>--deployment</code>や<code>--without</code>に関してはまったことのメモ。</p>

<!--more-->


<h3>bundle install &mdash;deployment</h3>

<p><code>--deployment</code>をつけ実行すると<code>vendor/bundle</code>以下にgemがインストールされます。deploymentの名の通り本番環境でインストールする場合を想定したコマンドです。</p>

<p>```</p>

<pre><code>$ bundle install --deployment
</code></pre>

<p>```</p>

<h3>BUNDLE_FROZEN</h3>

<p><code>--deployment</code>の名のとおり本番環境でインストールする場合を想定したコマンドですが、うっかり開発環境で実行してしまって少々はまってしまいました。</p>

<p>開発環境でGemfileに新しくgemを追加したので、<code>bundle install</code>しようとします。すると</p>

<p><code>``
$ bundle install
You are trying to install in deployment mode after changing
your Gemfile. Run</code>bundle install` elsewhere and add the
updated Gemfile.lock to version control.</p>

<p>If this is a development machine, remove the Gemfile freeze
by running <code>bundle install --no-deployment</code>.</p>

<p>You have added to the Gemfile:
* colorize
```</p>

<p>とエラーがでます。<code>bundle install --deployment</code>を1度でも実行すると<code>.bundle/config</code>が更新され<code>BUNDLE_FROZEN: 1</code>が付加されるようです。</p>

<p>これを解除するには、<code>bundle install --no-deployment</code>を1度実行するか、<code>.bundle/config</code>を直接編集して<code>BUNDLE_FROZEN: 1</code>の行を削除してしまうかする必要があります。</p>

<h3>BUNDLE_WITHOUT</h3>

<p><code>--without</code>というオプションがあります。以下のように使います。本番環境ではdevelopmentやtestグループのgemは不要なのでwithoutでinstall対象から除外することができます。</p>

<p><code>
  $ bundle install --deployment --without development test
</code></p>

<p>ただ、これも<code>--without</code>つきで実行すると<code>.bundle/config</code>に保存されてしまいます。</p>

<h2>```</h2>

<p>BUNDLE_WITHOUT: development test
```</p>

<p>うっかり開発環境で実行してしまうと、その後、<code>bundle exec rspec</code>などやろうとすると以下のエラーが発生します。rspec-coreはGemに含まれませんと。</p>

<p><code>
$ bundle exec rpsec
/Users/name/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/rubygems_integration.rb:214:in `block in replace_gem': rspec-core is not part of the bundle. Add it to Gemfile. (Gem::LoadError)
</code></p>

<p>この場合も、<code>.bundle/config</code>を編集してBUNDLE_WITHOUTの行を削除すれば良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSONオブジェクトのデータサイズを確認する方法(Ruby)]]></title>
    <link href="http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size/"/>
    <updated>2013-02-13T15:06:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size</id>
    <content type="html"><![CDATA[<p>BSON Objectのサイズを求める方法。</p>

<!--more-->


<p>``` ruby
class Person
  include Mongoid::Document
  field :name, type: String
end</p>

<p>Person.create name: &lsquo;a&rsquo;</p>

<p>person = Person.first
puts Moped::BSON::Document.serialize(parson.as_document).size
```</p>

<p>MongoDBにおける1BSONオブジェクトの最大サイズは16MB。ある件でembedしてデータをたくさん持たせた場合、サイズが制限内で妥当かどうか検証したときのメモ。</p>

<p>蛇足ならが、ちなみ結論的にはデータ構造がネストされて大きくなる場合はembededではなくreferencedを使うべきであった。</p>

<p>``` ruby
class Person
  include Mongoid::Document
  field :name, type: String
  embeds_many :children
end</p>

<p>class Child
  include Mongoid::Document
  embeded_in :person
  field :age
end</p>

<p>Person.create name: &lsquo;a&rsquo;
person = Person.first
person.children &lt;&lt; たくさんデータ入れる</p>

<p>Person.first   # loadに時間がかかる!
```</p>

<p>relationにした場合、子供はloadされないので時間がかかりません。</p>
]]></content>
  </entry>
  
</feed>
