<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2013-07-26T17:57:44+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BUNDLE_FROZENとかBUNDLE_WITHOUT]]></title>
    <link href="http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without/"/>
    <updated>2013-07-26T16:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without</id>
    <content type="html"><![CDATA[<p>bundlerの<code>--deployment</code>や<code>--without</code>に関してはまったことのメモ。</p>

<!--more-->


<h3>bundle install &mdash;deployment</h3>

<p><code>--deployment</code>をつけ実行すると<code>vendor/bundle</code>以下にgemがインストールされます。deploymentの名の通り本番環境でインストールする場合を想定したコマンドです。</p>

<p>```</p>

<pre><code>$ bundle install --deployment
</code></pre>

<p>```</p>

<h3>BUNDLE_FROZEN</h3>

<p><code>--deployment</code>の名のとおり本番環境でインストールする場合を想定したコマンドですが、うっかり開発環境で実行してしまって少々はまってしまいました。</p>

<p>開発環境でGemfileに新しくgemを追加したので、<code>bundle install</code>しようとします。すると</p>

<p><code>``
$ bundle install
You are trying to install in deployment mode after changing
your Gemfile. Run</code>bundle install` elsewhere and add the
updated Gemfile.lock to version control.</p>

<p>If this is a development machine, remove the Gemfile freeze
by running <code>bundle install --no-deployment</code>.</p>

<p>You have added to the Gemfile:
* colorize
```</p>

<p>とエラーがでます。<code>bundle install --deployment</code>を1度でも実行すると<code>.bundle/config</code>が更新され<code>BUNDLE_FROZEN: 1</code>が付加されるようです。</p>

<p>これを解除するには、<code>bundle install --no-deployment</code>を1度実行するか、<code>.bundle/config</code>を直接編集して<code>BUNDLE_FROZEN: 1</code>の行を削除してしまうかする必要があります。</p>

<h3>BUNDLE_WITHOUT</h3>

<p><code>--without</code>というオプションがあります。以下のように使います。本番環境ではdevelopmentやtestグループのgemは不要なのでwithoutでinstall対象から除外することができます。</p>

<p><code>
  $ bundle install --deployment --without development test
</code></p>

<p>ただ、これも<code>--without</code>つきで実行すると<code>.bundle/config</code>に保存されてしまいます。</p>

<h2>```</h2>

<p>BUNDLE_WITHOUT: development test
```</p>

<p>うっかり開発環境で実行してしまうと、その後、<code>bundle exec rspec</code>などやろうとすると以下のエラーが発生します。rspec-coreはGemに含まれませんと。</p>

<p><code>
$ bundle exec rpsec
/Users/name/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/rubygems_integration.rb:214:in `block in replace_gem': rspec-core is not part of the bundle. Add it to Gemfile. (Gem::LoadError)
</code></p>

<p>この場合も、<code>.bundle/config</code>を編集してBUNDLE_WITHOUTの行を削除すれば良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSONオブジェクトのデータサイズを確認する方法(Ruby)]]></title>
    <link href="http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size/"/>
    <updated>2013-02-13T15:06:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size</id>
    <content type="html"><![CDATA[<p>BSON Objectのサイズを求める方法。</p>

<pre><code>class Person
  include Mongoid::Document
  field :name, type: String
end

Person.create name: 'a'

person = Person.first
puts Moped::BSON::Document.serialize(parson.as_document).size
</code></pre>

<p>MongoDBにおける1BSONオブジェクトの最大サイズは16MB。ある件でembedしてデータをたくさん持たせた場合、サイズが制限内で妥当かどうか検証したときのメモ。</p>

<p>蛇足ならが、ちなみ結論的にはデータ構造がネストされて大きくなる場合はembededではなくreferencedを使うべきであった。</p>

<pre><code>class Person
  include Mongoid::Document
  field :name, type: String
  embeds_many :children
end

class Child
  include Mongoid::Document
  embeded_in :person
  field :age
end

Person.create name: 'a'
person = Person.first
person.children &lt;&lt; たくさんデータ入れる

Person.first   # loadに時間がかかる!
</code></pre>

<p>relationにした場合、子供はloadされないので時間がかかりません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterにリプライしたらgemが出来たお話]]></title>
    <link href="http://orihubon.com/blog/2013/01/12/capistrano-colorized-stream-gem-makes-log-monitoring-rainbow/"/>
    <updated>2013-01-12T01:03:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/01/12/capistrano-colorized-stream-gem-makes-log-monitoring-rainbow</id>
    <content type="html"><![CDATA[<p>1年前に書いた<a href="http://orihubon.com/blog/2012/02/09/streaming-log-with-capistrano/">Streaming Log With Capistrano</a>というポストが巡り巡って<a href="https://github.com/sonots/capistrano-colorized-stream">gem</a>で利用できるようになりました、というお話。</p>

<blockquote class="twitter-tweet" data-in-reply-to="288609436531052544" lang="ja"><p>@<a href="https://twitter.com/sonots">sonots</a> だいぶ昔書いたのでいけてなコードですが、こんな感じでしょうか。<a href="http://t.co/nifOD1YA" title="http://orihubon.com/blog/2012/02/09/streaming-log-with-capistrano/">orihubon.com/blog/2012/02/0…</a></p>&mdash; Nobuhiro Nikushiさん (@niku4i) <a href="https://twitter.com/niku4i/status/288612474276691968" data-datetime="2013-01-08T11:45:50+00:00">1月 8, 2013</a></blockquote>


<script async src="http://orihubon.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://twitter.com/sonots/">@sonots</a>さんがCapistranoの話題のツイートしてて、昔似たことをやったので過去のポストを教えてあげたところgemになった!</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/niku4i">niku4i</a> gemにしてみましたよ！ <a href="https://t.co/Q2tjd0kj" title="https://github.com/sonots/capistrano-colorized-stream">github.com/sonots/capistr…</a></p>&mdash; そのっつ (SEO Naotoshi)さん (@sonots) <a href="https://twitter.com/sonots/status/289690981152989184" data-datetime="2013-01-11T11:11:26+00:00">1月 11, 2013</a></blockquote>


<script async src="http://orihubon.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://github.com/sonots/capistrano-colorized-stream">capistrano-colorized-stream</a></p>

<p><a href="https://twitter.com/sonots/">@sonots</a>さん仕事早い。</p>

<p>gemにしていただいたので僕はこれをネタにブログを書くことにしました。</p>

<!-- more -->


<h3>コードを読んでみた</h3>

<h4>alias_method</h4>

<p><code>ruby lib/capistrano/colorized_stream.rb
alias_method :stream_without_color, :stream
alias_method :stream, :stream_with_color
</code>
  * alias_methodを使うと既存メソッドは残しつつ、alias_methodで上書くことができるんですね
  * 実は<code>alias</code>との違いがピンときていないのでまた別途</p>

<p>試してみた。
``` ruby
class A
  def hello</p>

<pre><code>'Hello!'
</code></pre>

<p>  end
end</p>

<p>class A
  def aisatsu</p>

<pre><code>'Konichiwa!'
</code></pre>

<p>  end
  alias_method :greet, :hello
  alias_method :hello, :aisatsu
end</p>

<p>A.new.hello # => &ldquo;Konichiwa!&rdquo;
A.new.greet # => &ldquo;Hello!&rdquo;
<code>``
</code>A#hello<code>が日本語に変更しつつ、</code>A#greet`にてオリジナルの英語で挨拶することができました。</p>

<h4>String#split</h4>

<p><code>ruby lib/capistrano/colorized_stream.rb
lines = out.split(/\r?\n/m, -1)
</code>
  * <code>/\n/</code>ではなく<code>/\r?\n/</code>と各とCRLFとLFをサポートする
  * splitの第2引数に負の値を与え、改行のみの行を空要素として配列を返す。すると改行がどの位置にあるか気にしなくてもよくなる(!)。</p>

<p>この<code>split</code>の第2引数のようにRubyのコアクラスのAPIの知識に深ければ小さくコードが書ける実例だなとおもいました。
このあたりは<a href="http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E-Ruby-%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8-%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D/dp/4873113946">プログラミング言語 Ruby</a>の9章Rubyプラットフォームが充実してますね。難しいコードを書いたな&hellip;.というときは標準のAPIで対応できないか、考え直してみるとよさそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TEDの英文を取得する]]></title>
    <link href="http://orihubon.com/blog/2012/04/09/fetch-subtitle-for-talks-in-ted/"/>
    <updated>2012-04-09T01:49:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/04/09/fetch-subtitle-for-talks-in-ted</id>
    <content type="html"><![CDATA[<p>TEDのトークショーの内容をテキストデータで取得できるという話を聞きましたのでRubyで英文をprintするコードを書いてみました。</p>

<!-- more -->


<p>URLを叩くとJSONで返してくれるのでparseしてputsするだけでした。</p>

<p><div><script src='https://gist.github.com/2338391.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><a href="http://www.ted.com/talks/matt_cutts_try_something_new_for_30_days.html">Matt Cutts: Try something new for 30 days</a> という有名なTEDのトークをひとまずdumpしてみました。</p>

<pre><code>$ ./teddump.rb
A few years ago,

I felt like I was stuck in a rut,

so I decided to follow in the footsteps

of the great American philosopher, Morgan Spurlock,

and try something new for 30 days.

The idea is actually pretty simple.

Think about something you've always wanted to add to your life

and try it for the next 30 days.

It turns out, 

30 days is just about the right amount of time
</code></pre>

<p>できました。</p>

<p>ちなみに、idはページ中のHTMLのdata-idというパラメタから取得しないと分かりません。nokogiriとかでスクレイピングする方法があるようです。</p>

<p>以下を参考にしました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/1955618/parsing-and-converting-ted-talks-json-subtitles">Parsing and Converting TED Talks JSON Subtitles</a></li>
<li><a href="http://d.hatena.ne.jp/meganii/20120320/1332214416">TEDの英語原稿を取得する &ndash; ギークを夢見るじょーぶん男子 </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing rvm and Ruby1.9.3/1.9.2 on LLVM gcc and XCode4.3.1]]></title>
    <link href="http://orihubon.com/blog/2012/03/15/install-rvm-and-ruby193-and-192-on-llvm-gcc-and-xcode431/"/>
    <updated>2012-03-15T00:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/15/install-rvm-and-ruby193-and-192-on-llvm-gcc-and-xcode431</id>
    <content type="html"><![CDATA[<p>XCode 4.3.1 + rvm + Ruby1.9.3-p125の組み合わせでRubyをbuildする。</p>

<p>Mac Book Air(2011 mid)購入直後はrbenvを使っていたが結局rvmに戻すことにしたのが始まり。rvmでRubyが動くようになるまでとても苦労したので記しておく。</p>

<p>普通に考えて進めると、</p>

<ol>
<li>XCodeインストール</li>
<li>rvm install</li>
</ol>


<p>するのだけど、</p>

<p><code>
The provided compiler '/usr/bin/gcc' is LLVM based, it is not yet fully supported by ruby and gems, please read `rvm requirements`.
</code>
という出力で終了する。ネット上の情報を見ると<a href="https://github.com/kennethreitz/osx-gcc-installer/downloads">osx-gcc-installer</a>をインストールする例と、LLVMではないgccが入ってるXCode 4.1にダウングレードする方法と、4.2以降を使って&mdash;with-gcc=clangをつけてインストールする方法があった。今回は&mdash;with-gcc=clangをつけてRubyをbuildした。詳細は後述。</p>

<p>以下、詳細。</p>

<!-- more -->


<h3>環境</h3>

<ul>
<li>Mac OS X Version 10.7.3 Lion</li>
<li>XCode 4.3.1</li>
<li>gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)</li>
<li>rvm 1.10.3</li>
<li>rvm installするRuby

<ul>
<li>ruby-1.9.2-p318</li>
<li>ruby-1.9.3-p125</li>
</ul>
</li>
</ul>


<p>このブログ=octopressが現時点で1.9.3に対応していないため、1.9.2-p318もインストールした。</p>

<h3>rbenvをアンインストール</h3>

<p><code>
$ rm -rf ~/.rbenv
</code></p>

<h3>rvmをインストール</h3>

<p>公式ページの手順どおりやればよし。あえてコマンドは書かない。</p>

<h3>XCode</h3>

<p>XCode4.3からXCode本体とは別パッケージでgccやmake等のCLIツールだけのCommand Line Tools for XcodeというパッケージがApp Storeから入手できるようになった。</p>

<p>Mac Book Airの容量を節約できるしXCodeのCLIツールしか使わないのでこれは嬉しいので、喜んでXCodeはインストールせずCommand Line Tools for Xcodeだけインストールして、rvm install &hellip; と進めていたのだけど、最終的にやはり必要ということが分かった。</p>

<p>XCodeが結局必要な理由は話が先に飛ぶが、<code>rvm install ruby-1.9.2</code>の後octopress(このブログのシステム)用のgemをインストールする目的で<code>bundle install</code>する必要があったが、以下のとおりXCodeが見つからないというエラーが出てしまう。
<code>``
$ rake new_post['rbenvからrvmに変更した']
Could not find RedCloth-4.2.8 in any of the sources
Run</code>bundle install<code>to install missing gems.
mba208:octopress nikushi$ bundle install
Fetching gem metadata from http://rubygems.org/.......
Using rake (0.9.2)
Installing RedCloth (4.2.8) with native extensions
Installing posix-spawn (0.3.6) with native extensions
Installing albino (1.3.3)
Installing blankslate (2.1.2.4)
Installing chunky_png (1.2.1)
Installing fast-stemmer (1.0.0) with native extensions
Installing classifier (1.3.3)
Installing fssm (0.2.7)
Installing sass (3.1.5)
Installing compass (0.11.5)
Installing directory_watcher (1.4.0)
Installing ffi (1.0.9) with native extensions
Installing haml (3.1.2)
Installing kramdown (0.13.3)
Installing liquid (2.2.2)
Installing syntax (1.0.0)
Installing maruku (0.6.0)
Installing jekyll (0.11.0)
Installing rubypython (0.5.1)
Installing pygments.rb (0.1.3)
Installing rack (1.3.2)
Installing rb-fsevent (0.4.3.1) with native extensions Unfortunately, a fatal error has occurred. Please report this error to the Bundler issue tracker at https://github.com/carlhuda/bundler/issues so that we can fix it. Thanks!
/Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/lib/ruby/site_ruby/1.9.1/rubygems/installer.rb:552:in</code>rescue in block in build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)</p>

<pre><code>    /Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/bin/ruby extconf.rb
    creating Makefile
    xcode-select: Error: No Xcode folder is set. Run xcode-select -switch &lt;xcode_folder_path&gt; to set the path to the Xcode folder.
    extconf.rb:15:in `&lt;main&gt;': Could not find a suitable Xcode installation (RuntimeError)
</code></pre>

<p>```</p>

<p>そういうわけでXCode4.3.1をインストール。App Storeからダウンロードする。Command Line ToolはApp Storeからインストールしてもいいし、XCode起動後にPreferenceの中からでもinstall可能。どちらでもよいみたい。</p>

<p>xcode-selectコマンドでpathを確認して、セットされていないようなら-switchでセットする。XCode4.2系は/Developerだったのが4.3系からは/Application/Xcode.app/以下に変更になったらしい。
<code>
$ xcode-select  -print-path
xcode-select: Error: No Xcode folder is set. Run xcode-select -switch &lt;xcode_folder_path&gt; to set the path to the Xcode folder.
</code></p>

<p>手動でセットする
<code>
$ sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
$ xcode-select  -print-path
/Applications/Xcode.app/Contents/Developer
</code></p>

<h4>Command Line Toolsの確認</h4>

<p><code>
$ ls /Applications/Xcode.app/Contents/Developer/usr/bin/
BuildStrings*                     gcc@                              mksdk*
CpMac*                            gcov@                             momc*
DeRez*                            gcov-4.2@                         nasm*
GetFileInfo*                      gdb*                              ndisasm*
ImageUnitAnalyzer*                git*                              nm*
MergePef*                         git-cvsserver*                    nmedit*
MvMac*                            git-receive-pack@                 opendiff*
PPCExplain*                       git-shell*                        otool*
ResMerger*                        git-upload-archive@               pagestuff*
Rez*                              git-upload-pack*                  projectInfo*
RezDet*                           gitk*                             ranlib@
RezWack*                          gnumake*                          rcs*
SetFile*                          gprof*                            rcs2log@
SplitForks*                       hdxml2manxml*                     rcsclean*
UnRezWack*                        headerdoc2html*                   rcsdiff*
agvtool*                          i686-apple-darwin11-llvm-g++-4.2@ rcsmerge*
amlint*                           i686-apple-darwin11-llvm-gcc-4.2@ rebase*
ar*                               ibtool*                           redo_prebinding*
as*                               ibtool3*                          resolveLinks*
c89*                              ibtoold*                          rlog*
c99*                              ident*                            sdef*
ci*                               install_name_tool*                sdp*
cmpdylib*                         instruments*                      segedit*
co*                               iprofiler*                        size*
codesign_allocate*                javaconfig*                       strip*
codesign_wrapper*                 javatool*                         svn*
cpp*                              ld*                               svnadmin*
ctf_insert*                       ld_classic*                       svndumpfilter*
cvs*                              libtool*                          svnlook*
cvsbug*                           lldb*                             svnserve*
desdp*                            llvm-cpp-4.2@                     svnsync*
docsetutil*                       llvm-g++@                         svnversion*
dsymutil*                         llvm-g++-4.2@                     unwinddump*
dvtexec*                          llvm-gcc@                         xcodebuild*
dwarfdump*                        llvm-gcc-4.2@                     xcrun*
dyldinfo*                         make*                             xed*
g++@                              mapc*                             xml2man*
gatherheaderdoc*                  merge*
</code>
いろいろ入った。
ちなみに、 /usr/bin/以下にもgcc入ったけど競合しないのか?ネット上の情報をみると/Applicaitons/Xcode.app/Contents/Developer/usr/bin/は$PATHに通す必要はないらしい。まったく自信はない。</p>

<p>/usr/bin/gcc -v
<code>
$ /usr/bin/gcc -v
Using built-in specs.
Target: i686-apple-darwin11
Configured with: /private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/src/configure --disable-checking --enable-werror --prefix=/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2 --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-prefix=llvm- --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin11 --enable-llvm=/private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/dst-llvmCore/Developer/usr/local --program-prefix=i686-apple-darwin11- --host=x86_64-apple-darwin11 --target=i686-apple-darwin11 --with-gxx-include-dir=/usr/include/c++/4.2.1
Thread model: posix
gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)
</code>
/Applications/Xcode.app/Contents/Developer/usr/bin/gcc -v
<code>
$ /Applications/Xcode.app/Contents/Developer/usr/bin/gcc -v
Using built-in specs.
Target: i686-apple-darwin11
Configured with: /private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/src/configure --disable-checking --enable-werror --prefix=/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2 --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-prefix=llvm- --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin11 --enable-llvm=/private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/dst-llvmCore/Developer/usr/local --program-prefix=i686-apple-darwin11- --host=x86_64-apple-darwin11 --target=i686-apple-darwin11 --with-gxx-include-dir=/usr/include/c++/4.2.1
Thread model: posix
gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)
</code>
同じgccなので気にしないで進む。</p>

<h3>Compiling Ruby</h3>

<p>依存性のあるzlib、openssl、ncurses等を$HOME/.rvm/usr/以下にインストールしとく。zlibが入ってないとインストール後のgemの実行で失敗したので。
<code>
rvm pkg install ree_dependencies
</code></p>

<p>Rubyをインストール
<code>
$ rvm install 1.9.2 --with-gcc=clang
$ rvm install 1.9.3 --with-gcc=clang
</code>
&mdash;with-gcc=clangはLLVM gcc対応のため。毎回つけるの面倒くさいな。rvm側の今後のバージョンアップで改善されないかなと期待。</p>

<p><code>
Install of ruby-1.9.2-p318 - #complete
clang: error: unsupported option '--with-libyaml'
Ruby 'ruby-1.9.2-p318' was build using clang - but it's not (fully) supported, expect errors.
</code>
成功するけど&mdash;with-libyamlはサポートしてないという警告がでた。とっても気になるのだけどとりあえず気にせず先に進めることにする。問題でないという自信はまったくない。</p>

<p>デフォルトは1.9.3に。
<code>
$ rvm use 1.9.3-p125 --default
$ ruby -v
ruby 1.9.3p125 (2012-02-16 revision 34643) [x86_64-darwin11.3.0]
</code></p>

<p><code>
$ irb
1.9.3p125 :001 &gt; "Enjoy Ruby with rvm"
 =&gt; "Enjoy Ruby with rvm"
</code></p>
]]></content>
  </entry>
  
</feed>
