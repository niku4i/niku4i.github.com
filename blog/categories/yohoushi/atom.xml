<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Yohoushi | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/yohoushi/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2014-02-21T09:45:35+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yohoushi v0.72.2 リリースしました]]></title>
    <link href="http://orihubon.com/blog/2014/02/20/yohoushi-v0-72-2-released/"/>
    <updated>2014-02-20T22:36:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/02/20/yohoushi-v0-72-2-released</id>
    <content type="html"><![CDATA[<p>Yohoushi <a href="https://github.com/yohoushi/yohoushi/releases/tag/v0.72.2">v0.72.2</a> をリリースしました。以前のバージョンでは特定条件でグラフ画像が正しく表示されないバグがあり、この修正が含まれます。古いバージョンを使われてる場合はアップデートをお勧めします!</p>

<!--more-->


<p>新しめのGrowthForecastとv0.72.1以下のYohoushi、およびHTTP/1.1に対応してないクライアントの組み合わせで再現します。例えばリバースプロキシ(例えばnginx1.0.x系など)を使った場合です。</p>

<p>最近のGrowthForecastはHTTP/1.1の<code>Transfer-Encoding: chunked</code>を返すため、一方のYohoushiの画像をプロキシする際のchunkの処理がよろしくなくて、 HTTP/1.0なクライアントに対してもchunkedデータをレスポンスしてしていました。</p>

<p><a href="https://www.ietf.org/rfc/rfc2145.txt">RFC2145</a>によるとHTTP/1.1を解釈しないクライアント(ここではリバプロ)に大してchunkedなデータを送り返すのはNGです。 そこで、クライアントがHTTP/1.0なら<code>Transfer-Encoding</code>をdropし、またchunkedではないデータの形でクライアントへ戻すようにしました。</p>

<p>文字で説明するとシンプルな話なんですが。修正はYohoushiの中で使ってる<a href="https://github.com/yohoushi/rack-streaming-proxy">rack-streaming-proxy</a>というrack middlewareへの<a href="https://github.com/yohoushi/rack-streaming-proxy/pull/2">pull request</a>で反映されてます。</p>

<p><a href="https://twitter.com/m_doi">@m_doi</a> バグレポートありがとうございました!
<a href="https://twitter.com/sonots">@sonots</a> 毎度コードレビューありがとうございます!</p>

<p>最後に<a href="https://github.com/yohoushi/rack-streaming-proxy">rack-streaming-proxy</a>の紹介しとこ。YohoushiはRailsアプリですがグラフ画像の部分だけGrowthForecastへ振り分ける処理をrack-streaming-proxyにやらせてます。<code>config/application.rb</code>にこんな感じのコードを書いて使います。</p>

<p>```ruby
module Yohoushi
  class Application &lt; Rails::Application</p>

<pre><code>config.middleware.use Rack::StreamingProxy::Proxy do |request|
  next unless Settings.proxy
  if request.path.start_with?('/graph/')
    path = URI::unescape(request.path) # request.path are passed after uri escaped by rack
    $mfclient.get_graph_uri(path[7..-1], request.params)
  elsif request.path.start_with?('/complex/')
    path = URI::unescape(request.path)
    $mfclient.get_complex_uri(path[9..-1], request.params)
  end
end
</code></pre>

<p>  end
end
```</p>

<p><code>Rack::StreamingProxy::Proxy</code>のコードブロック内で返ったURLへプロキシすることができて、上のコードでは<code>/graph/</code>か<code>/complex/</code>のパスリクエストのときはRailsではなくGrowthForecastへプロキシしてREST APIを参照させてます。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yohoushi Chef Cookbook作った]]></title>
    <link href="http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook/"/>
    <updated>2014-01-15T20:35:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yohoushi/chef-yohoushi">chef-yohoushi</a> を作った。YohoushiをChefでインストールするクックブック。</p>

<!--more-->


<p>ユーザ作成、データベースマイグレーション、Yohoushiリポジトリをgit cloneしてというところまでやってくれます。RubyのbuildとかMySQLサーバのインストールとかはクックブックの範囲外にしてて別クックブックと組み合わせて使ってください。</p>

<p>またサービスの再起動とかchkconfig的なところはレシピに書いてない。その辺やろうとすると諸々yack shavingになるので今時点ではインストールだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yohoushi screencasts!]]></title>
    <link href="http://orihubon.com/blog/2013/10/01/yohoushi-screencasts/"/>
    <updated>2013-10-01T11:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/01/yohoushi-screencasts</id>
    <content type="html"><![CDATA[<p>グラフツール <a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>を紹介するスクリーンキャストを作ってみた。</p>

<!--more-->


<p><a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>というグラフツールを<a href="https://twitter.com/sonots">@sonots</a>さんと作っています。Yohoushiを使うと<a href="http://kazeburo.github.io/GrowthForecast/">GrowthForecast</a>に登録したグラフと連携し検索やタギング、グラフ画像の拡大縮小、期間カスタム指定などができます。</p>

<p>会社の同僚の方々からYohoushiがどんなツールかもっと分かりやすく解説してよというコメントをいただきまして、Yohoushiの概要〜インストール、簡単な使い方までをscreencastにしてみました。"GrowthForecast使ってるからそろそろYohoushiも&hellip;でもYohoushiむずいんでしょ?&ldquo; とおもわれている方にYohoushiの導入の簡単さを分かってもらえる内容になってるとおもいます。</p>

<p>各話3分程度です。エピソード1は概要なのでわかってる方は飛ばしてください。Yohoushiの雰囲気を知るだけならエピソード3、4だけでもおすすめです!</p>

<h4>1 Yohoushiとはなにか?</h4>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZjZjtzyx6Jc "></iframe></div></p>

<h4>2 Yohoushiをインストールしてみよう</h4>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mqIR0RClP3o "></iframe></div></p>

<h4>3 Yohoushiを使ってみよう</h4>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/q_vMqjpFRUc "></iframe></div></p>

<h4>4 Yohoushiを使ってグラフにタグをつけよう</h4>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/EV51EmjC74o "></iframe></div></p>

<h4>補足</h4>

<ul>
<li><p>インストールする際のrakeやbundleは<code>bin/</code>に同封のbinstubの<code>bin/bundle</code>, <code>bin/rake</code>を使ってください。<code>bin/</code>配下のコマンドで実行すると<code>RAILS_ENV=production</code>が自動的にセットされます。パスの通ったコマンドを使ってしまうと<code>RAILS_ENV=development</code>が自動的にセットされるので意図しない動作になるので注意してください。</p></li>
<li><p>GrowthForecastのグラフはscreencast用のダミーで@sonotsさん作の<a href="https://github.com/sonots/growthforecast-client">growthforecast-client</a>を使ってランダム値を定期POSTしてます。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
