<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SNMP | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/snmp/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2014-01-15T20:07:08+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SNMPのindexキャッシュによる取得時間短縮の検証]]></title>
    <link href="http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast/"/>
    <updated>2013-12-06T14:47:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast</id>
    <content type="html"><![CDATA[<p>ルータやサーバのインタフェースのbpsを測定する場合、SNMPのifDescr, ifHCInOctets, ifHCOutOctetsこの3つのMIBを取得すれば良いわけですが、ifDescrを毎回取得するの無駄だなとおもったので測定してみました。</p>

<!--more-->


<p>ifDescr, ifHCInOctets, ifHCOutOctetsをsnmpwalkする場合と、ifDescr(ifIndex)をキャッシュしifHCInOctets, ifHCOutOctetsをsnmpgetする場合で比較します。</p>

<h3>ベンチスクリプト</h3>

<p>``` ruby
require &lsquo;snmp&rsquo;
require &lsquo;benchmark&rsquo;</p>

<p>puts &ldquo;creating cache&rdquo;
indexes = []
SNMP::Manager.open(host: &lsquo;localhost&rsquo;, community: &lsquo;public&rsquo;) do |manager|
  manager.walk(%w(ifIndex)) { |row| indexes &lt;&lt; row[0].value.to_i }
end</p>

<p>Benchmark.bm do |x|
  puts &ldquo;walk&rdquo;
  x.report {</p>

<pre><code>SNMP::Manager.open(host: 'localhost', community: 'public') do |manager|
  manager.walk(%w(ifDescr ifHCInOctets ifHCOutOctets)) { |row| nil }
end
</code></pre>

<p>  }</p>

<p>  sleep 3
  puts &ldquo;cache with get&rdquo;
  x.report {</p>

<pre><code>SNMP::Manager.open(host: 'localhost', community: 'public') do |manager|
  indexes.each do |i|
    manager.get_value(["ifHCInOctets.#{i}", "ifHCOutOctets.#{i}"])
  end
end
</code></pre>

<p>  }
end
```</p>

<p>実際はlocalhostではなくNICをたくさん持った機器を指定。またベンチスクリプトでは簡略してifIndexだけキャッシュしてます。</p>

<h3>結果</h3>

<p>当然といえば当然ですがbind variablesの数がwalk=3個、get=2個なのでgetが早い。26%早くなりました。
```</p>

<pre><code>   user     system      total        real
</code></pre>

<p>walk
   0.850000   0.210000   1.060000 ( 11.343248)
index cached get
   0.710000   0.210000   0.920000 (  8.387955)
```</p>

<h3>デメリット</h3>

<p>キャッシュのデメリットもあります。インデックス番号は主キーになりますが、主キーに対する実態が変わってしまう場合がありえます。Linuxでインタフェースを増やしたり減らしたり、リブートしたりしてみたところ、主キーに対する実態が変わることが分かりました。</p>

<p>```
こういう状態で
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.4 = STRING: veth0
IF-MIB::ifDescr.5 = STRING: veth1
IF-MIB::ifDescr.6 = STRING: eth1.100</p>

<p>veth0,veth0を消した
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.6 = STRING: eth1.100</p>

<p>eth1.200を追加した(4ではなく7が選ばれた)
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.6 = STRING: eth1.100
IF-MIB::ifDescr.7 = STRING: eth1.200</p>

<p>リブートした後
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.4 = STRING: eth1.100   # 以前は 4 は veth0 だった!!!!!
IF-MIB::ifDescr.5 = STRING: eth1.200   # 以前は 5 は veth1 だった!!!!!
```</p>

<p>Ciscoなどではindex値を固定化するオプションが有効という情報もありますので、ベンダによるみたい。</p>

<p>ちなみに、Cactiではindexキャッシュを動的にリフレッシュする仕組みがあって<a href="http://www.cacti.net/downloads/docs/html/cli_poller_reindex_hosts.html">こちら</a>のドキュメントによると、</p>

<ul>
<li>アップタイム(sysUptime)が小さくなった(再起動)ら強制的にindexキャッシュを更新</li>
<li>indexの総数が変わった場合(たとえばifIndexの中の個数が変わった場合)。インタフェースなどのケース。</li>
<li>全フィールドを検証する(?) Macアドレスなどがこのケース。エントリに変化があればキャッシュ削除ってことですかね。</li>
</ul>


<p>インタフェースにに限ればCactiをまねてアップタイムとインデックスの個数を見て判定すれば上手くいきますね。</p>

<p>しかしSNMP、何十年前の技術をいつまで使うんだ!!と毎度おもってしまいます。snmpwalk時間かかるし&hellip;.。</p>

<p>以上です!!</p>
]]></content>
  </entry>
  
</feed>
