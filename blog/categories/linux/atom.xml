<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ni-blog]]></title>
  <link href="http://orihubon.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2015-08-19T15:18:03+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pushd and popd]]></title>
    <link href="http://orihubon.com/blog/2014/11/10/pushd-and-popd/"/>
    <updated>2014-11-10T22:42:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/11/10/pushd-and-popd</id>
    <content type="html"><![CDATA[<p>pushd と popd を使い始めた。</p>

<!--more-->


<p>ほんとうに今更感があるが。学生の時に知っていつの間にか使わなくなり、社会人数年目で再度使うようにして使わなくなってしまった歴史が個人的にある。</p>

<p>使わなくなってしまった理由はタイプ数だと考えているので、タイプ数を少なくすべく以下のようにした。Dan Kogai氏の<a href="http://blog.livedoor.jp/dankogai/archives/51527066.html">tips &ndash; 君はpushd|popdを知っているか?</a>を参考にさせていただいた。</p>

<p>```bash ~/.bashrc
function mycd {
  if [ -n &ldquo;$1&rdquo; ]; then</p>

<pre><code>pushd $1
</code></pre>

<p>  else</p>

<pre><code>pushd ~/
</code></pre>

<p>  fi
}
alias cd=mycd
alias po=&lsquo;popd&rsquo;
alias  p=&lsquo;popd&rsquo;
```</p>

<p><code>cd</code> で別ディレクトリに移動すると同時にカレントディレクトリが保存され <code>p</code> で元のディレクトリに戻る。<code>mycd</code> 経由なのは <code>pushd</code> 引数無しでも <code>~/</code> に帰れるようにするため。</p>

<p>今のところいい感じ。しかしこういう小さい改善系はすぐ忘れてしまって残念な感じになるので、小さなネタでもブログに書いておこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[親プロセスと子プロセスでTCPソケットを共有したらどうなるか]]></title>
    <link href="http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal/"/>
    <updated>2013-12-11T19:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal</id>
    <content type="html"><![CDATA[<p>前回の<a href="http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/">Redisクライアントでforkするときは子プロセスでrecoonectする</a>の続き。では<a href="https://github.com/fluent/fluent-logger-ruby">fluent-logger-ruby</a>だとどうなるの? ってことで社内の同僚に質問してみました。色々なところでも書かれてますし混ざるんですよね。以下のコードは書かない方が良いってこと。</p>

<!-- more -->


<h3>サンプルコード</h3>

<p><code>ruby このコードは一見動くけどよくない
require 'fluent-logger'
log = Fluent::Logger::FluentLogger.new(nil, :host=&gt;'localhost', :port=&gt;24224)
log.post("myapp.access", {"agent"=&gt;"foo"})     # socket(A) が確立される
fork do                                        # socket(A)は子プロセスにもコピーされる
  log.post("myapp.access", {"agent"=&gt;"foo"})   # socket(A)に書き込む
end
</code></p>

<h3>質問してみた</h3>

<p>社内のIRCでちらっと聞いてみたところ同僚から助言いただきました。</p>

<pre><code>18:36 nikushi: forkしてTCPソケットを親、子で使いまわすの
18:38 sonots: 同じソケットを、並列で利用したら、混ざってることになるけど
18:39 nikushi: ふむふむ
..snip..
18:41 nikushi: ぼくがおもったのは、TCPのデータペイロードの中(つまりmsgpackのところ)
18:41 nikushi: が壊れるのかなーとおもったけど。
..snip..
18:47 sonots: RST 受け取ったとき、どのプロセスが close するの？
18:48 sonots: ruby 的には Errno::ECONNRESET
18:49 sonots: proc1 が close しようとする前に、proc2 がデータ送っちゃったりするでしょ？
18:49 sonots: ということを言いたい
18:50 hirose31: 親子で共用するの辞めたほうがいいんじゃないのかなｗ
18:57 hirose31: 一般的にやるべきじゃないと思いますよ
19:06 hirose31: APUEに書いてないかな。。
19:11 hirose31: If both parent and child write to the same descriptor, 
      without any form of synchronization, such as having the parent 
      wait for the child, their output will be intermixed 
      (assuming it’s a descriptor that was open before the fork). 
      Although this is possible—we saw it in Figure 8.2—it’s 
      not the normal mode of operation.
19:11 hirose31: だそうな
19:11 hirose31: p232
</code></pre>

<p>APUEによると、可能ではあるが出力が混ざる、通常のオペレーションではない。という記述がありました。@hirose31++</p>

<p>またクライアントの実装によっては再接続処理で変になったり、意図しない挙動になりそうですね。</p>

<p>APUEことAdvanced Programming in the UNIX Environment 3rd Editionについては、(ひ)メモの<a href="http://d.hatena.ne.jp/hirose31/20130731/1375248744">『詳細UNIXプログラミング』の原書『Advanced Programming in the UNIX Environment</a>に紹介がありますので興味がある人か買うといいですね。私もこの機会に買いました。</p>

<h3>まとめ</h3>

<pre><code>19:08 sonots: TCPコネクション１本で並列処理する方法があれば、知りたい感はあります。
19:08 nikushi: SPDY w
19:13 sonots: まさにSPDY
19:12 hirose31: まさにSPDY
19:13 sonots: ふむふむ、それを想定したプロトコル設計にしないといけないわけか
19:13 nikushi: きょうの結論!
</code></pre>

<p>@hirose31先生, @sonots ありがとうございました。以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVMのrawフォーマットのイメージファイルをマウントする]]></title>
    <link href="http://orihubon.com/blog/2013/07/31/mount-kvm-os-image/"/>
    <updated>2013-07-31T15:49:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/31/mount-kvm-os-image</id>
    <content type="html"><![CDATA[<p>rawフォーマット限定。</p>

<!--more-->


<p>マウント
```</p>

<h1>losetup /dev/loop0 /data/vm/myserver.img</h1>

<h1>kpartx -av /dev/loop0</h1>

<h1>ls -alF /dev/mapper</h1>

<h1>mount /dev/mapper/loop0p1 /mnt</h1>

<p>```</p>

<p>アンマウント
```</p>

<h1>umount /mnt</h1>

<h1>kpartx -dv /dev/loop0</h1>

<h1>losetup -d /dev/loop0</h1>

<p>```</p>

<p>参考: <a href="http://d.hatena.ne.jp/okinaka/20091210/1260445130">KVMのイメージをマウントする その2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virt-installでvncサーバを立ち上げてCentOSをグラフィカルインストール]]></title>
    <link href="http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install/"/>
    <updated>2013-07-29T22:58:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install</id>
    <content type="html"><![CDATA[<p>やっつけ感ある手順であるが。</p>

<!--more-->


<p><code>
cd /data/vm
qemu-img create -f qcow2 server01.img 10G
virt-install -n server01 \
-r 1024 \
--disk path=/data/vm/server01.img,size=10,format=qcow2 \
--virt-type=kvm \
--vcpus=2 \
--os-type linux \
--os-variant=rhel6 \
--network bridge=br0 \
--graphics vnc,password=abc123,port=5910,keymap=us \
--cdrom=/var/tmp/CentOS-6.4-x86_64-minimal.iso
</code></p>

<p>さらに、virsh consoleでコンソールを取れるようにする。</p>

<p>```</p>

<h1>vi /et/grub.conf</h1>

<h1>splashimage=(hd0,0)/boot/grub/splash.xpm.gz  # この行は不要</h1>

<p>serial &mdash;unit=0 &mdash;speed=115200 # 追加
terminal &mdash;timeout=5 serial console # 追加
```</p>

<p>```</p>

<h1>echo ttyS0 >> /etc/securetty</h1>

<p>```</p>

<p>CentOS6の場合upstart経由で起動時にttyS0を自動起動してあげる必要がある。CentOS6.4最小インストール直後であればttyS0は自動起動してくれていた。以下のとおり確認しただけ。</p>

<p>起動しているか確認</p>

<p>```</p>

<h1>initctl list |grep serial</h1>

<p>serial (ttyS0) start/running, process 5091
```</p>

<p>設定ファイル
```</p>

<h1>vi /etc/init/serial.conf</h1>

<p>```</p>

<p>参考: <a href="http://lab.unicast.ne.jp/2013/02/15/%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88/">仮想マシンにシリアルコンソールで接続できるよ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前日日付のファイル名でローテートし圧縮するlogrotateの設定例]]></title>
    <link href="http://orihubon.com/blog/2013/03/07/logrotate-as-compressed-and-previous-date-formatted-file-name/"/>
    <updated>2013-03-07T15:57:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/03/07/logrotate-as-compressed-and-previous-date-formatted-file-name</id>
    <content type="html"><![CDATA[<p>ファイル名を前日の日付でローテートする方法をメモします。</p>

<!--more-->


<p>logrotateでdateextを設定するとローテートしたファイルに日付を含めることができます。しかし、00:00-早朝のあたりでlogrotateを実行するとローテートされた内容は前日分のログなのに日付は実行時(今日)になりログの内容とファイル名の日付が乖離してしまいます。ファイル名を前日の日付でローテートする方法をメモします。</p>

<p><div><script src='https://gist.github.com/5105939.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>一部説明</p>

<pre><code>ifempty        # 空ファイルでもローテートする。
               # 過去ログを`ls | wc -l`などするときに
               # 日数と数を合わせたいので。
dateext        # ローテートしたファイルに実行時の日付を
               # 付ける。ただし、00:00以降にlogrotateを実行する
               # 場合は、ログ内容と日付が乖離するので別途
               # lastactionで日付を前日分に変えている。
extension .log # ローテート後のファイル名の場所の末尾に.log 
               # を持ってくる。 圧縮する場合は.log.gzになる。
               # 本オプション指定ない場合はapp.log-yyyymmdd となり
               # 微妙なので調整のため。
lastaction     # 最後に実行するコマンド
               # postrotateを使わないのはpostrotateはcompressする前
               # に実行されるため。compressしてlastactionが実行される。
</code></pre>
]]></content>
  </entry>
  
</feed>
