<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | ni-blog]]></title>
  <link href="http://niku4i.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://niku4i.github.com/"/>
  <updated>2012-03-11T23:34:43+09:00</updated>
  <id>http://niku4i.github.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpressからoctopressに移行した(画像移行編)]]></title>
    <link href="http://niku4i.github.com/blog/2012/03/11/migrate-from-wordpress-to-octopress-part2-image-files/"/>
    <updated>2012-03-11T22:36:00+09:00</updated>
    <id>http://niku4i.github.com/blog/2012/03/11/migrate-from-wordpress-to-octopress-part2-image-files</id>
    <content type="html"><![CDATA[<p>このブログはテキストメインであるが過去の記事にはいくつか画像も添付してて、移行後にリンク切れ状態になっていたので修正した。</p>

<ul>
<li>移行前(Wordpress)の画像ファイル置き場は/wp-content/uploads/</li>
<li>移行後(octopress)の画像ファイル置き場は/images/</li>
</ul>


<p>Wordpressはxreaのサーバで運用していたので、sshでログインしてローカルのMacまでscpしてきた。 ~/tmp/uploads/ あたりに保存しとく。</p>

<p>つづいてローカルのoctopressディレクトリにコピーする。
<code>
cd ~/Documents/Blog/octopress
cp ~/tmp/uploads/* source/images/
</code>
source/images以下にコピーすると、<code>rake deploy</code>すると<code>http://username.github.com/images/</code>以下にマップされるみたい。</p>

<p>続いて過去記事のaタグとimgタグの修正。過去記事を確認したら、 <code>&lt;a href="http://orihubon.com/wp-contents/uploads/hogehoge.jpg"&gt;</code>みたいにhttp://で始まっていたので、方針としてはhttp://orihubon.com/uploads/をざっくり消して/imagesに置き換えることにする。
<code>sh
cd source/_posts
for f in $( ls ); do  ruby -ne '$_.gsub!(%r!http://orihubon.com/wp-content/uploads/!, "/images/"); puts $_;' &lt; $f &gt; tmp; mv tmp $f; done
</code>
上のコードは単純に置換してるだけ。過去記事のaタグやimgタグ意外のテキストも置き換えるのですが、私の記事をgrepして確認したらなかったので、parseしなくていいやということでシンプルに置き換えた。</p>

<p>生成して確認する。
<code>
rake generate
rake preview
</code>
http://localhost:4000/にアクセスして確認する。</p>

<p>deployし公開。
<code>
rake deploy
</code></p>

<p>commitもしとく。
<code>
git add -A
git commit -m "Imported image files from old wordpress blog"
git push
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpressからoctopressに移行した]]></title>
    <link href="http://niku4i.github.com/blog/2012/02/14/migration-from-wordpress-to-octopress/"/>
    <updated>2012-02-14T15:53:00+09:00</updated>
    <id>http://niku4i.github.com/blog/2012/02/14/migration-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>Wordpressからoctopressに移行した。</p>

<p>移行作業でいくつかつまづいて時間がかかったので、どなたかの役に立てばとメモを残す。</p>

<p>Wordpressは数年使っていて機能豊富でテーマも充実してるし管理画面も使いやすく、正直あまり不満はない。
でもWordpress = PHPなんだよね。PHP... 別にPHP嫌いなわけではない。今年はRubyを勉強すると決めているので、
ならば周りのツールもみんなRubyにしよー! という流れ。</p>

<p>さらにoctopressはgithubやherokuと連携してサーバいらずでgit pushすればブログ公開があっというまにできる仕組み。
gitやPasSに触れれてこれは一石二鳥。</p>

<h2>方針</h2>

<ul>
<li>Wordpressのデータベースから直接データはひっこぬかない</li>
<li>Wordpressの投稿データはxmlでexport</li>
<li>xmlのデータをyekyllに変換</li>
<li>写真などのデータは移行対象外。必要に応じて手動で移行</li>
</ul>


<h2>手順</h2>

<h3>Wordpressの管理画面から投稿データをxml形式でエクスポート</h3>

<p>ツール -> エクスポート というのが標準で備わっている。Wordpressを去るのにWordpressは便利だというのは皮肉か。
タグやカテゴリ、タグのページは不要なのでエクスポート対象は"投稿"だけにする。
適当な作業ディレクトリにwordpress.xmlという名前で保存する。以下の例であればwordpress.xmlを~/tmp/migration/に保存</p>

<p><code>
$ mkdir ~/tmp/migration
$ cd ~/tmp/migration
</code></p>

<h3>yekyllスタイルに変換</h3>

<p>githubのjekyllのリポジトリには<a href="https://github.com/mojombo/jekyll/blob/master/lib/jekyll/migrators/wordpressdotcom.rb">migrationツール</a>が備わっている。
wordpressdotcom.rbを利用してそれなりにデータ変換ができたが以下の問題がみつかった。</p>

<ul>
<li>日本語タイトルのエントリをconvertするとファイル名にURLエンコードされた文字が含まれ、octopressのpermalinkがうまく解釈されなかった</li>
<li>各記事の本文の文字コードがCR+LF。</li>
</ul>


<p>そこでオリジナルのwordpressdoccom.rbを拝借しつつ、コードを少し修正。以下のコードを用いる。</p>

<p><div><script src='https://gist.github.com/1824307.js?file='></script>
<noscript><pre><code># coding: utf-8

require 'rubygems'
require 'hpricot'
require 'fileutils'
require 'yaml'
require 'time'
# for multi byte string
require 'stringed'
require 'nkf'

module Jekyll
  # This importer takes a wordpress.xml file, which can be exported from your
  # wordpress.com blog (/wp-admin/export.php).
  module WordpressDotCom
    def self.process(filename = &quot;wordpress.xml&quot;)
      import_count = Hash.new(0)
      doc = Hpricot::XML(File.read(filename))

      (doc/:channel/:item).each do |item|
        title = item.at(:title).inner_text.strip
        ## convert url encoded multibyte string to original by --url-input
        ## and to_url method converts multibyte string to a-z
        permalink_title = NKF.nkf(&quot;-w --url-input&quot;, item.at('wp:post_name').inner_text).to_url
        # Fallback to &quot;prettified&quot; title if post_name is empty (can happen)
        if permalink_title == &quot;&quot;
          permalink_title = title.downcase.split.join('-')
        end

        date = Time.parse(item.at('wp:post_date').inner_text)
        status = item.at('wp:status').inner_text

        if status == &quot;publish&quot; 
          published = true
        else
          published = false
        end

        type = item.at('wp:post_type').inner_text
        tags = (item/:category).map{|c| c.inner_text}.reject{|c| c == 'Uncategorized'}.uniq

        metas = Hash.new
        item.search(&quot;wp:postmeta&quot;).each do |meta|
          key = meta.at('wp:meta_key').inner_text
          value = meta.at('wp:meta_value').inner_text
          metas[key] = value;
        end

        name = &quot;#{date.strftime('%Y-%m-%d')}-#{permalink_title}.html&quot;
        header = {
          'layout' =&gt; type,
          'title'  =&gt; title,
          'tags'   =&gt; tags,
          'status'   =&gt; status,
          'type'   =&gt; type,
          'published' =&gt; published,
          'meta'   =&gt; metas
        }

        FileUtils.mkdir_p &quot;_#{type}s&quot;
        File.open(&quot;_#{type}s/#{name}&quot;, &quot;w&quot;) do |f|
          f.puts header.to_yaml
          f.puts '---'
          # convert CL+LF to LF
          f.puts NKF.nkf(&quot;-Lu -w&quot;, item.at('content:encoded').inner_text)
        end

        import_count[type] += 1
      end

      import_count.each do |key, value|
        puts &quot;Imported #{value} #{key}s&quot;
      end
    end
  end
end</code></pre></noscript></div>
</p>

<h3>修正ポイント</h3>

<ul>
<li>permalinkを生成する箇所で一度 nkf --url-input -w して文字コードをプレーンにし、さらにto_urlメソッドで日本語をローマ字に変換する。</li>
<li>記事のデータをputsする際にもnkf -Lu -wするようにした。</li>
</ul>


<p>to_urlメソッドはrequre 'stringex'することでStringクラスのメソッドとしてto_urlが追加される。to_urlメソッドを使うと漢字でも強制的に
ローマ字に変換する模様。octopressでrake new_postする際のコードを参考に。</p>

<p>では改めて変換作業を行う
<code>
$ ls
wordpress.xml wordpressdotcom.rb
$ ruby -rubygems -e 'require "./wordpressdotcom"; Jekyll::WordpressDotCom.process("wordpress.xml")'
Imported 65 posts
$ ls
_post wordpress.xml wordpressdotcom.rb
</code>
_post以下にエントリが出来上がるのでエディタで開いてざっくり問題なさそうか確認する。生成されたファイルの拡張子は.htmlになる。.markdownではない
ファイルの中身をみるとわかるが、ブログポストの本文はmarkdownではなくhtmlのまま。なので.htmlのままにする。</p>

<h3>ローカルテスト</h3>

<p>変換したデータをローカルのoctopressディレクトリにコピし、記事を生成する。
<code>
$ cp _post/* /path/to/octopress/source/_post/
$ cd /path/to/octopress/source/_post/
$ rake generate
$ rake preview
</code>
rake previewするとlocalhost:4000でwebサーバが立ち上がる。内容をチェック。
ちなみにrake watchするとローカルファイルの更新を監視して逐次プレビューに反映してくれるので便利。</p>

<h3>deploy</h3>

<p><code>
$ rake deploy
</code>
rake deployを実行するとrake pushが内部で呼び出される。rake pushは内部で
- git add .
- git commit
- git push origin master
を実行するので、rake deployを実行するとコミットと公開まで自動的に実行してくれる。</p>

<p>git push origin masterは、origin = githubのusername/username.github.comレポジトリ に master = localの_public/ディレクトリ以下をpushする。</p>

<p>``` ruby push task in Rakefile
desc "deploy public directory to github pages"
multitask :push do
  puts "## Deploying branch to Github Pages "
  (Dir["#{deploy_dir}/*"]).each { |f| rm_rf(f) }
  Rake::Task[:copydot].invoke(public_dir, deploy_dir)
  puts "\n## copying #{public_dir} to #{deploy_dir}"
  cp_r "#{public_dir}/.", deploy_dir
  cd "#{deploy_dir}" do</p>

<pre><code>system "git add ."
system "git add -u"
puts "\n## Commiting: Site updated at #{Time.now.utc}"
message = "Site updated at #{Time.now.utc}"
system "git commit -m \"#{message}\""
puts "\n## Pushing generated #{deploy_dir} website"
system "git push origin #{deploy_branch} --force"
puts "\n## Github Pages deploy complete"
</code></pre>

<p>  end
end
```</p>

<p>本番のブログにアップされたか確認して問題なければ完了。</p>
]]></content>
  </entry>
  
</feed>
