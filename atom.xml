<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ni-blog]]></title>
  <link href="http://orihubon.com/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2013-12-23T15:43:22+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-deriveで単位時間あたりの増分値を計算する]]></title>
    <link href="http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released/"/>
    <updated>2013-12-23T14:57:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/niku4i/fluent-plugin-derive">fluent-plugin-derive</a> というFluentd outputプラグインをリリースしました。初gem &amp; 初Fluentd plugin作成。</p>

<!--more-->


<p>gemコマンドからインストールできます。</p>

<pre><code>$ gem install fluent-plugin-derive
</code></pre>

<p>何をするplug-inかというと、端的にいうと受け取ったrecordの前回分の値(timestamp, key, value)をキャッシュし2回目受信したrecordとの差(per second rate)をre-emitします。</p>

<p>例えばSNMPで取得するInterfaceのカウンタ値(バイトカウンタ)をFluentd内でbpsに変換するといったことで使えます。計算値を任意の値で掛け算したり割り算したりできるので、毎秒以外にも毎時や毎分にすることもできます。</p>

<h3>設定</h3>

<pre><code>&lt;match foo.bar.**&gt;
  type derive
  add_tag_prefix derive
  key1 foo_count *1000
  key2 bar_count *1000
&lt;/match&gt;
</code></pre>

<h3>例</h3>

<p>こういう入力があったとして&hellip;</p>

<pre><code>2013-12-19 20:01:00 +0900 foo.bar: {"foo_count":  100, "bar_count":  200}
2013-12-19 20:02:00 +0900 foo.bar: {"foo_count":  700, "bar_count": 1400}
2013-12-19 20:03:10 +0900 foo.bar: {"foo_count":  700, "bar_count": 1470}
2013-12-19 20:04:10 +0900 foo.bar: {"foo_count": 1300, "bar_count":  870}
</code></pre>

<p>こう出力されます。</p>

<pre><code>2013-12-19 20:01:00 +0900 derive.foo.bar: {"foo_count":   nil, "bar_count":    nil}
2013-12-19 20:02:00 +0900 derive.foo.bar: {"foo_count": 10000, "bar_count":  20000}
2013-12-19 20:03:10 +0900 derive.foo.bar: {"foo_count":     0, "bar_count":   1000}
2013-12-19 20:04:10 +0900 derive.foo.bar: {"foo_count": 10000, "bar_count": -10000}
</code></pre>

<p><code>*1000</code>の部分はオプションで指定しないこともできます。上の例では差分値を1000倍しました。例えば<code>*8</code>にするとバイトバイトカウンタをbpsに変換できます。演算子は<code>*</code>と<code>/</code>をサポートしています。また、他にも<code>min</code>,<code>max</code>オプションで最小値、最大値を指定できます。カウンタ値がリセットされると値がマイナスになるので<code>min 0</code>にして使っています。</p>

<h3>作った理由</h3>

<p>ちなみにRRDToolやGrowthForecastを使っている場合はプラグインでやらずともRRDTool側でderiveをサポートしているのでカウンタ値をそのままつっこめばよいです。わざわざ途中で計算する必要はありません。GrowthForecastの場合はsubtractモードだけでもよいかもしれません。</p>

<p>ではなぜFluentd側で計算しているのかというと、1つはカウンタ値よりもbpsの方が扱いやすかったかで、Fluentdで閾値設定したり解析したりと二次用途に使いやすくなります。</p>

<p>もう1つはFluentdで生のカウンタ値を流してRRDへ格納する場合、取得して格納するまでに若干時差が発生するので、カウンタ値のようなderiveな値だとRRDへの値格納が少し遅れたり早かったりすると差分値が実際より大きくなったり小さくなったり揺れてしまいました。そのためderiveプラグインを作ってカウンタ値を取得した瞬間に計算するようにしました。</p>

<p>作る前に既存プラグインを探してみましたが、前回値との差分を計算してくれるプラグインがなかったので自作に至りました。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[親プロセスと子プロセスでTCPソケットを共有したらどうなるか]]></title>
    <link href="http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal/"/>
    <updated>2013-12-11T19:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal</id>
    <content type="html"><![CDATA[<p>前回の<a href="http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/">Redisクライアントでforkするときは子プロセスでrecoonectする</a>の続き。では<a href="https://github.com/fluent/fluent-logger-ruby">fluent-logger-ruby</a>だとどうなるの? ってことで社内の同僚に質問してみました。色々なところでも書かれてますし混ざるんですよね。以下のコードは書かない方が良いってこと。</p>

<!-- more -->


<h3>サンプルコード</h3>

<figure class='code'><figcaption><span>このコードは一見動くけどよくない</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fluent-logger&#39;</span>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="ss">Fluent</span><span class="p">:</span><span class="ss">:Logger</span><span class="o">::</span><span class="no">FluentLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="ss">:host</span><span class="o">=&gt;</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">:port</span><span class="o">=&gt;</span><span class="mi">24224</span><span class="p">)</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;myapp.access&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;agent&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo&quot;</span><span class="p">})</span>     <span class="c1"># socket(A) が確立される</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>                                        <span class="c1"># socket(A)は子プロセスにもコピーされる</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;myapp.access&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;agent&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo&quot;</span><span class="p">})</span>   <span class="c1"># socket(A)に書き込む</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>質問してみた</h3>

<p>社内のIRCでちらっと聞いてみたところ同僚から助言いただきました。</p>

<pre><code>18:36 nikushi: forkしてTCPソケットを親、子で使いまわすの
18:38 sonots: 同じソケットを、並列で利用したら、混ざってることになるけど
18:39 nikushi: ふむふむ
..snip..
18:41 nikushi: ぼくがおもったのは、TCPのデータペイロードの中(つまりmsgpackのところ)
18:41 nikushi: が壊れるのかなーとおもったけど。
..snip..
18:47 sonots: RST 受け取ったとき、どのプロセスが close するの？
18:48 sonots: ruby 的には Errno::ECONNRESET
18:49 sonots: proc1 が close しようとする前に、proc2 がデータ送っちゃったりするでしょ？
18:49 sonots: ということを言いたい
18:50 hirose31: 親子で共用するの辞めたほうがいいんじゃないのかなｗ
18:57 hirose31: 一般的にやるべきじゃないと思いますよ
19:06 hirose31: APUEに書いてないかな。。
19:11 hirose31: If both parent and child write to the same descriptor, 
      without any form of synchronization, such as having the parent 
      wait for the child, their output will be intermixed 
      (assuming it’s a descriptor that was open before the fork). 
      Although this is possible—we saw it in Figure 8.2—it’s 
      not the normal mode of operation.
19:11 hirose31: だそうな
19:11 hirose31: p232
</code></pre>

<p>APUEによると、可能ではあるが出力が混ざる、通常のオペレーションではない。という記述がありました。@hirose31++</p>

<p>またクライアントの実装によっては再接続処理で変になったり、意図しない挙動になりそうですね。</p>

<p>APUEことAdvanced Programming in the UNIX Environment 3rd Editionについては、(ひ)メモの<a href="http://d.hatena.ne.jp/hirose31/20130731/1375248744">『詳細UNIXプログラミング』の原書『Advanced Programming in the UNIX Environment</a>に紹介がありますので興味がある人か買うといいですね。私もこの機会に買いました。</p>

<h3>まとめ</h3>

<pre><code>19:08 sonots: TCPコネクション１本で並列処理する方法があれば、知りたい感はあります。
19:08 nikushi: SPDY w
19:13 sonots: まさにSPDY
19:12 hirose31: まさにSPDY
19:13 sonots: ふむふむ、それを想定したプロトコル設計にしないといけないわけか
19:13 nikushi: きょうの結論!
</code></pre>

<p>@hirose31先生, @sonots ありがとうございました。以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisクライアントでforkするときは子プロセスでrecoonectする]]></title>
    <link href="http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/"/>
    <updated>2013-12-11T16:24:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby</id>
    <content type="html"><![CDATA[<p>Redisクライアントインスタンスを親プロセスで作った後、forkし子プロセス側でGETとSETしても大丈夫だっけ? とおもったのでRubyの<a href="https://github.com/redis/redis-rb">redis-rb</a>で実験しました。結論としてはfork後に子プロセス側でクローズして再確立すれば良いです。</p>

<!-- more -->


<p>以下のケースは動かない。</p>

<figure class='code'><figcaption><span>bad case</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>       <span class="c1"># 親プロセスがRedisサーバとコネクション確立</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>     <span class="c1"># 子プロセスがgetしようとすると...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>例外が発生。子プロセスからコネクションを利用しようとしたので怒られる。</p>

<pre><code>=&gt; ..snip.. redis/client.rb:285:in `ensure_connected': Tried to use a connection from a child process without reconnecting. You need to reconnect to Redis after forking. (Redis::InheritedError)
</code></pre>

<p>fork後にreconnectするように言われるのでそのとおりします。以下はOKです。</p>

<figure class='code'><figcaption><span>works!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">reconnect</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のコードではTCPを使うのでtcpdumpでパケットを確認してみたところ、子は自分用のTCPコネクションを確立することを確認しました。</p>

<p>昔々Cでforkしてsocket read/writeするプログラムを書いたのを思い出しました。forkした後に複数プロセスで同じソケットを使ってはいけないので片方はクローズする、であってますかね。以上です!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SNMPのindexキャッシュによる取得時間短縮の検証]]></title>
    <link href="http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast/"/>
    <updated>2013-12-06T14:47:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast</id>
    <content type="html"><![CDATA[<p>ルータやサーバのインタフェースのbpsを測定する場合、SNMPのifDescr, ifHCInOctets, ifHCOutOctetsこの3つのMIBを取得すれば良いわけですが、ifDescrを毎回取得するの無駄だなとおもったので測定してみました。</p>

<!--more-->


<p>ifDescr, ifHCInOctets, ifHCOutOctetsをsnmpwalkする場合と、ifDescr(ifIndex)をキャッシュしifHCInOctets, ifHCOutOctetsをsnmpgetする場合で比較します。</p>

<h3>ベンチスクリプト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;snmp&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;creating cache&quot;</span>
</span><span class='line'><span class="n">indexes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>  <span class="n">manager</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="sx">%w(ifIndex)</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="n">indexes</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;walk&quot;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>      <span class="n">manager</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="sx">%w(ifDescr ifHCInOctets ifHCOutOctets)</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;cache with get&quot;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>      <span class="n">indexes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="n">manager</span><span class="o">.</span><span class="n">get_value</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;ifHCInOctets.</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;ifHCOutOctets.</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際はlocalhostではなくNICをたくさん持った機器を指定。またベンチスクリプトでは簡略してifIndexだけキャッシュしてます。</p>

<h3>結果</h3>

<p>当然といえば当然ですがbind variablesの数がwalk=3個、get=2個なのでgetが早い。26%早くなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">walk</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">.</span><span class="mi">850000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">210000</span>   <span class="mi">1</span><span class="o">.</span><span class="mo">060000</span> <span class="p">(</span> <span class="mi">11</span><span class="o">.</span><span class="mi">343248</span><span class="p">)</span>
</span><span class='line'><span class="n">index</span> <span class="n">cached</span> <span class="n">get</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">.</span><span class="mi">710000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">210000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">920000</span> <span class="p">(</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">387955</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>デメリット</h3>

<p>キャッシュのデメリットもあります。インデックス番号は主キーになりますが、主キーに対する実態が変わってしまう場合がありえます。Linuxでインタフェースを増やしたり減らしたり、リブートしたりしてみたところ、主キーに対する実態が変わることが分かりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">こういう状態で</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">4</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">veth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">5</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">veth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="n">veth0</span><span class="p">,</span><span class="n">veth0</span><span class="err">を消した</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="n">eth1</span><span class="o">.</span><span class="mi">200</span><span class="err">を追加した</span><span class="p">(</span><span class="mi">4</span><span class="err">ではなく</span><span class="mi">7</span><span class="err">が選ばれた</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">7</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="err">リブートした後</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">4</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>   <span class="c1"># 以前は 4 は veth0 だった!!!!!</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">5</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">200</span>   <span class="c1"># 以前は 5 は veth1 だった!!!!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ciscoなどではindex値を固定化するオプションが有効という情報もありますので、ベンダによるみたい。</p>

<p>ちなみに、Cactiではindexキャッシュを動的にリフレッシュする仕組みがあって<a href="http://www.cacti.net/downloads/docs/html/cli_poller_reindex_hosts.html">こちら</a>のドキュメントによると、</p>

<ul>
<li>アップタイム(sysUptime)が小さくなった(再起動)ら強制的にindexキャッシュを更新</li>
<li>indexの総数が変わった場合(たとえばifIndexの中の個数が変わった場合)。インタフェースなどのケース。</li>
<li>全フィールドを検証する(?) Macアドレスなどがこのケース。エントリに変化があればキャッシュ削除ってことですかね。</li>
</ul>


<p>インタフェースにに限ればCactiをまねてアップタイムとインデックスの個数を見て判定すれば上手くいきますね。</p>

<p>しかしSNMP、何十年前の技術をいつまで使うんだ!!と毎度おもってしまいます。snmpwalk時間かかるし&hellip;.。</p>

<p>以上です!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdのマルチプロセス化が簡単になったので試してみた!]]></title>
    <link href="http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/"/>
    <updated>2013-12-06T08:35:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin</id>
    <content type="html"><![CDATA[<p>ワイワイ! <a href="http://qiita.com/advent-calendar/2013/fluentd">Fluentd Advent Calendar 2013</a> 6日目担当の <a href="http://twitter.com/niku4i">@niku4i</a> です。</p>

<!--more-->


<p>今日はFluentdのマルチプロセス化について。最近公式ページに <a href="http://docs.fluentd.org/articles/in_multiprocess">Multiprocess Input Plugin</a> がドキュメント化されました。</p>

<p>Fluentdはシングルプロセスで動作するため、マルチコアなサーバ環境下では全コアのCPUを消費できません。Fluentd1プロセスでも小〜中規模の環境であれば十分さばけますが、大規模環境ではCPUが足りなくなります。そこでCPUを効率的に使うため、一昔前までは起動スクリプトをコア数に応じて用意しマルチプロセス化するといった手法を用いていましたが手軽にはできませんでした。</p>

<p>そこで最近登場したのが <a href="https://twitter.com/frsyuki">@frsyuki</a> さん作の <a href="http://docs.fluentd.org/articles/in_multiprocess">Multiprocess Input Plugin</a> です。ネット上に試した記事がなかったので試してみました。</p>

<p>Fluentdは0.10.41を使っています。gemコマンドでインストールしました。</p>

<h3>インストール</h3>

<p>Fluentdのコアプラグインではないので、fluent-gemコマンドを使ってインストールします。</p>

<figure class='code'><figcaption><span>install plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fluent-gem install fluent-plugin-multiprocess
</span></code></pre></td></tr></table></div></figure>


<p>なお、td-agent版の場合はコマンドのパスが通っていないので以下のとおりインストールしてください。</p>

<figure class='code'><figcaption><span>install plugin (td-agent user)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-multiprocess
</span></code></pre></td></tr></table></div></figure>


<h3>コンフィグレーション</h3>

<p>今回は4プロセスでそれぞれ24221〜24224/TCPでListenし受信したメッセージを標準出力に書き出す設定を作りました。書き出し部分は全プロセス共通なので <code>include</code> で1つにまとめました。非常に簡単な設定例なので面白みがないですが実際はinclude先にout系の設定を入れていくことになります。</p>

<figure class='code'><figcaption><span>/etc/fluent/fluentd.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> multiprocess
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child1.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child2.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child3.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child4.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cmdline</code>にマルチプロセス化した時の子プロセスに読み込ませるコンフィグファイルを指定します。このコンフィグは以下のように記述します。</p>

<figure class='code'><figcaption><span>/etc/fluent/fluentd_child1.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Receive events from TCP port</span>
</span><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> <span class="m">24221</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Include common configurations</span>
</span><span class='line'><span class="nb">include</span> conf.d/*.conf
</span></code></pre></td></tr></table></div></figure>


<p>fluentd_child[2-4].confのコンフィグ掲載は省略しますが <code>port</code> の番号のみ変更します。</p>

<p>includeしたコンフィグで出力を定義しました。</p>

<figure class='code'><figcaption><span>/etc/fluent/conf.d/match_all.conf </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Output messages to STDOUT</span>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">**</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> stdout
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>起動</h3>

<p>今回はコマンドラインから起動します。</p>

<p><code>$ fluentd -c fluent/fluentd.conf</code></p>

<p><a href="https://gist.github.com/niku4i/7802190">起動ログ</a>を見ると親fluentdプロセスが子fluentdを立ち上げていることが分かります。</p>

<figure class='code'><figcaption><span>起動ログ抜粋</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2013-12-05 08:45:30 +0000 <span class="o">[</span>info<span class="o">]</span>: launching child fluentd -c /etc/fluent/fluentd_child4.conf
</span></code></pre></td></tr></table></div></figure>


<p>netstatコマンドを使って確認しました。確かに4ポートでListenしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo netstat -anpt | grep -e ruby -e Proto
</span><span class='line'>Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name
</span><span class='line'>tcp        0      0 0.0.0.0:24221               0.0.0.0:*                   LISTEN      25160/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24222               0.0.0.0:*                   LISTEN      25143/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24223               0.0.0.0:*                   LISTEN      25126/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24224               0.0.0.0:*                   LISTEN      25108/ruby
</span></code></pre></td></tr></table></div></figure>


<h3>追記: -i オプションによる動的リッスンポート切替</h3>

<p><em>2013/12/19 追記</em></p>

<p>あまり知られていないですがFluentdには<code>-i</code>という起動オプションがあり<code>-i</code>に続いてコンフィグを記述することができます。以下のようにすればinput forwardでリッスンするポートをプロセス毎に変えることができます。ポート番号などプロセス固有の設定は<code>-i</code>で渡すことで同じ設定ファイルで異なる挙動ということも実現できますね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;<span class="nb">source</span>&gt;
</span><span class='line'>  <span class="nb">type </span>multiprocess
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20000\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20001\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20002\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>&lt;<span class="nb">source</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>Multiprocess Input Pluginにより簡単にマルチプロセス化することができました。</p>

<p>気になる安定性などに関して、<a href="https://groups.google.com/forum/#!topic/fluentd/syXPqRAE-4w">Fluentdのメーリングリスト上の議論</a> によると 10+ billion records / day 環境下に投入しているユーザ事例もあるようです!</p>

<p>話はそれますが、Fluentdを使っている人やこれから使ってみようという人は <a href="http://docs.fluentd.org/ja/articles/mailing-list">Fluentdのメーリングリスト</a> にjoinすることをオススメします!(自分はもっぱら読むだけ専門ですが) メールは基本英語ですが流し読みするだけでも有益な情報を拾えたり、リリース状況をタイムリーに知ることができます。また、最近では海外のエンジニアの間でも知られるようになってきており、海外でのユースケースなど知れるかもしれません。個人的には英語の勉強にもなるので両得だとおもっています。コミュニティについては@tagomorisさんの<a href="http://tagomoris.hatenablog.com/entry/2013/12/03/150656">Fluentdとはどのようなソフトウェアなのか</a>の中で詳しく書かれていますね。</p>

<p>またFluentdの<code>-i</code>オプションを紹介しました。</p>

<p>簡単ではありましたが以上です。</p>

<p>すごい知った風でしたがgemの使い方を紹介しただけでした。最近Fluentdにふれる機会がなかったので、ユースケースを開拓してFluentdを積極的に使ってアウトプットしていきたいですね。</p>

<p>次は、<a href="https://twitter.com/yteraoka">@yteraoka</a> さんです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubの組織が成長する過程で変えたことと変えなかったこと、のメモ]]></title>
    <link href="http://orihubon.com/blog/2013/11/20/github-memo/"/>
    <updated>2013-11-20T12:04:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/11/20/github-memo</id>
    <content type="html"><![CDATA[<p><a href="http://wazanova.jp/items/675">GitHubの組織が成長する過程で変えたことと変えなかったこと</a>を読んで、良いこと書いててたのでブログに引用する。</p>

<!--more-->


<blockquote><p>情報は抱えないで、wiki / chat などを使ってとにかく共有する。社内の特定の人だけに情報が留まるとセクショナリズムにつながる。（追記: 短く意訳してますが、ビデオでは「このことは専門であるあの人に聞かなくてはいけないという意味のない権威主義がはびこるので組織が硬直する。」的な説明がされてます。）</p></blockquote>

<p>特定の人に聞かないと分からない、権威的になっている状態はあるあるですね。そこで属人的になってるから脱却しようと上司が声高々に&#8221;明文化しよう!!!&ldquo;というだけじゃダメなんだろうな&hellip;とおもうわけです。この記事のこのポイントだけ切り出すと単純な話なのですが、Githubの透明性といった文化がある前提なので、他社で単純に明文化だけ取り入れてもうまく行かないかもしれませんね。</p>

<blockquote><p>新入社員はGithubイシュー、チャットログ、pull requestとか読んで、自然と学ぶから邪魔しない。情報はアクセスできるようにするが、時間かけて教え込んだりしない。しかし、この放置する方式だけでは、Githubという組織に早く慣れ親しむのは無理があるので、最近は、最初の１週間はサンフランシスコのオフィスに呼んで、バディ（メンター）をアサインしている。バディの期間をもう少し長くすることも検討中。</p></blockquote>

<p>最初の1週間、集中的にコミュニケーションとるのは良さげ。でも新卒だったらどうするかな。</p>

<blockquote><p>153のチャットルームがある。実際のオフィスと違ってつくるのは安いし、全てのチャットルームに参加するわけでなく、個人単位で選択して参加することで適宜最適化できるので、一時的なものも含めて積極的にルームをつくるようにしている。チャットルームで名前が@でメンションされるとモバイル/デスクトップにpush notificationが飛んでくる。必要なときに連絡がくるが、答えられるときに反応すればよいという非同期スタイル。</p></blockquote>

<p>チャットツール何使ってるんだろう。IRCではないことは確かだ&hellip;!</p>

<blockquote><p>テクノロジーでなくてプロダクトが最先端のいいものであるべき。Ruby, C, git, MySQL, Memcachedというシンプルな構成に絞っている。最新のテクノロジーが会社を成功させるわけではない、どうワークフローをどのように信頼できるテクノロジーとツールでつくりあげていくかがもっと大事。システムを安定して運営できるということは素敵なこと。</p>

<p>役割を増やしたチームを新設して組織を無駄に肥大化させるのでなく、ツールを活用して解決できることも多い。組織を無駄に肥大化させるような昔からの固定観念は疑ってかかるべき。会社は成長する過程では変わらなければいけない。しかし、バリューは変えてはいけない。</p></blockquote>

<p>そうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スロークエリをMySQL再起動せずオンラインで調査する]]></title>
    <link href="http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql/"/>
    <updated>2013-11-05T10:11:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql</id>
    <content type="html"><![CDATA[<p>スロークエリをログに吐く方法。設定ファイル修正する必要はなかった。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; set global slow_query_log = 1;
</span><span class='line'>mysql&gt; set global slow_query_log_file = '/tmp/slowquery.log';
</span><span class='line'>mysql&gt; set global long_query_time = 0; # 0秒にセットすると全queryをロギング</span></code></pre></td></tr></table></div></figure>


<p>調査が終わったら<code>slow_query_log = 0</code>にするのを忘れないように。本番環境とかでやるとログがぶくぶく太るのでやらないほうが良いでしょう。</p>

<p>ログの解析はmysqldumpslowコマンドで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqldumpslow /tmp/slowquery.log</span></code></pre></td></tr></table></div></figure>


<p>なお、コネクションプーリングしている場合は新規コネクションから有効になるようです。アプリを再起動しないと反映されないです。mysqlコマンドから設定した場合も<code>show variables like 'long_query_time';</code>やっても値が反映されていないように見えますが、再接続すると確認できました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3予選の記録]]></title>
    <link href="http://orihubon.com/blog/2013/10/07/isucon3-yosen/"/>
    <updated>2013-10-07T10:38:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/07/isucon3-yosen</id>
    <content type="html"><![CDATA[<p><a href="http://isucon.net/archives/29328289.html">ISUCON3</a>予選に参加しました。</p>

<!--more-->


<p>チームは会社の同僚の<a href="https://twitter.com/sonots">@sonots</a>さん、<a href="https://twitter.com/Spring_MT">@Spring_MT</a>さん3名(チーム Miami)、予選は10/5(土), 10/6(日)に分かれていて僕たちは2日目に参加しました。</p>

<p>長時間の作業になるので会社で作業しました。僕は朝から興奮してしまって1時間前に会場入りして素振りしてましたが。</p>

<h4>お題アプリ</h4>

<p>githubのgistの機能ライクなメモアプリでした。</p>

<h4>最終的な構成</h4>

<p>nginx + unicorn + MySQL + InnoDB memcached plugin</p>

<h4>午前 &ndash; スタート</h4>

<h5>10:00</h5>

<p>まず、インスタンスによってCPUのモデルに差異があるかもしれないのでメンバ3人それぞれインスタンスを作成しCPUのモデルを確認しましたが結局偏りはありませんでした。</p>

<h5>10:30</h5>

<p>僕はwebappをgithub.comにgit pushしたり、予め用意しておいたカーネルチューニング(とってもネットワーク周りを少しだけ)をしてました。</p>

<h5>11:00</h5>

<p>my.cnf書き換えてslow query logを出すように修正。最初にベンチ走らせてスコアが800ほど。あまり大きなslow queryはありませんでした。</p>

<h5>10:20</h5>

<p>他の2名がリードしてくれてる状況なので、僕何からやろうかなという状態。とりあえずもう一度ドキュメント読んで注意点を確認しました。<code>--workload</code>これは重要なのでチームに周知しときました:) 他のチームでこれ忘れてる人結構ありましたね。</p>

<p>また、<a href="http://miniprofiler.com/">rack-mini-profiler</a>を導入して遅いページを探しました。これ便利ですね。</p>

<p>変更点</p>

<ul>
<li>nginx導入。public_htmlをnginxで返すよう変更</li>
<li>memo POST時にgem_markdown呼び出してmarkdownからHTMLに変換。表示時に都度HTMLコンバートするのをやめた</li>
<li>N+1問題。<code>memos</code>テーブルだけで完結するようにするため、<code>memos</code>テーブルに<code>username</code>フィールドを追加することにした。</li>
<li>複合インデックスを入れてパフォーマンス改善</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create index user_create_at_index on memos (user, created_at);
</span><span class='line'>create index user_is_private_created_at_index on memos (user, is_private, created_at);</span></code></pre></td></tr></table></div></figure>


<p>クエリの改善系は僕も対応しました。1つ、2つ改善できてホッとしました。</p>

<h5>13:30</h5>

<p>コンビニ飯</p>

<h4>午後 &ndash; 伸び悩み</h4>

<p>クエリを改善し、nginx + unicornの構成にしスコアは上がりましたが、午後はこの後どうしようか悩む時間でした。</p>

<p>前回isucon2ではVarnishを入れることで劇的にスコアアップできた事例がありましたので、Varnish対応を始めましたがVarnish作戦は結局失敗でした。recentページがキャッシュしにくい(olderとnewerのリンク)構成であったという点&hellip;と認識しています。あとセッションのバリデーションでベンチがコケたみたい。(このへんは僕やってないからもやっとしてる)</p>

<p>より詳細なプロファイリングのためNewRelicも入れてプロファイリング(by Spring_MTさん)。トップページとrecentが70ms程度かかっている状況で以下のクエリがある以上この程度かかるのかな&hellip;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT id, first_sentence, username, created_at FROM memos WHERE is_private=0 ORDER BY id DESC LIMIT 100 OFFSET #{page * 100}</span></code></pre></td></tr></table></div></figure>


<p>indexは効かせていたのでこのSELECTやめて別のアプローチをとればスコアアップ狙える、逆にいうとこれ改善しないと上位には入れないよね、というのがチームの午後の課題でしたが最後まで答えを出せずじまいで終わってしまいました。</p>

<p>その他改善したところは以下です。</p>

<ul>
<li>markdown生成のためフォークやめて<a href="https://github.com/vmg/redcarpet">redcarpet</a>使った。でも+500くらい</li>
<li>毎回memoのcontentを<code>.split(/\r?\n/)</code>せず、<code>memos.first_sentence</code>フィールドを作ってmemo POST時に入れるようにした</li>
<li>メモ数をカウントする<code>SELECT count(*) FROM memos</code>をmemdにキャッシュした</li>
<li>sonotsスペシャル => 詳細はsonots blogで</li>
</ul>


<p>最後はログ吐くのをやめてプロファイリングも切って<code>--workload=4</code>くらいにして測定して終了。</p>

<h3>反省点とか所感</h3>

<ul>
<li>memcachedみたいなものには気づかなかった&hellip;</li>
<li>8時間かっとなってコード釘付けになりがちですが、30分くらいはコーヒー飲みながらメンバでディスカッションしてもよかったかも</li>
<li>githubにwebappを上げてpull req方式でコード改修しようとして、実機でコード変えて即ベンチ走らせたい場合もあってmasterがconflictしてしまった。どっちもどっちで難しい。他のチームどうやってるか気になる。</li>
</ul>


<p>ちなみに、自分は普段高負荷環境のWebサービスを運用,開発してる訳ではなくて、Railsで管理系アプリ書いたり監視系ツール作ったりしてる系。始まる前は自分どれだけ対応できるか不安でした。周りのエンジニアや参加者も凄い人たちばかりですし。でも終わってみると参加してよかったです。しんどかったけど。反省会のビールがうまかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yohoushi screencasts!]]></title>
    <link href="http://orihubon.com/blog/2013/10/01/yohoushi-screencasts/"/>
    <updated>2013-10-01T11:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/01/yohoushi-screencasts</id>
    <content type="html"><![CDATA[<p>グラフツール <a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>を紹介するスクリーンキャストを作ってみた。</p>

<!--more-->


<p><a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>というグラフツールを<a href="https://twitter.com/sonots">@sonots</a>さんと作っています。Yohoushiを使うと<a href="http://kazeburo.github.io/GrowthForecast/">GrowthForecast</a>に登録したグラフと連携し検索やタギング、グラフ画像の拡大縮小、期間カスタム指定などができます。</p>

<p>会社の同僚の方々からYohoushiがどんなツールかもっと分かりやすく解説してよというコメントをいただきまして、Yohoushiの概要〜インストール、簡単な使い方までをscreencastにしてみました。&#8221;GrowthForecast使ってるからそろそろYohoushiも&hellip;でもYohoushiむずいんでしょ?&ldquo; とおもわれている方にYohoushiの導入の簡単さを分かってもらえる内容になってるとおもいます。</p>

<p>各話3分程度です。エピソード1は概要なのでわかってる方は飛ばしてください。Yohoushiの雰囲気を知るだけならエピソード3、4だけでもおすすめです!</p>

<h4>1 Yohoushiとはなにか?</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZjZjtzyx6Jc "></iframe></div>


<h4>2 Yohoushiをインストールしてみよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mqIR0RClP3o "></iframe></div>


<h4>3 Yohoushiを使ってみよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/q_vMqjpFRUc "></iframe></div>


<h4>4 Yohoushiを使ってグラフにタグをつけよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/EV51EmjC74o "></iframe></div>


<h4>補足</h4>

<ul>
<li><p>インストールする際のrakeやbundleは<code>bin/</code>に同封のbinstubの<code>bin/bundle</code>, <code>bin/rake</code>を使ってください。<code>bin/</code>配下のコマンドで実行すると<code>RAILS_ENV=production</code>が自動的にセットされます。パスの通ったコマンドを使ってしまうと<code>RAILS_ENV=development</code>が自動的にセットされるので意図しない動作になるので注意してください。</p></li>
<li><p>GrowthForecastのグラフはscreencast用のダミーで@sonotsさん作の<a href="https://github.com/sonots/growthforecast-client">growthforecast-client</a>を使ってランダム値を定期POSTしてます。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupportのin_groups_ofメソッドでビューが捗る!]]></title>
    <link href="http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention/"/>
    <updated>2013-09-26T19:21:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention</id>
    <content type="html"><![CDATA[<p>ActiveSupportの<code>inc_groups_of</code>メソッドを使ってみたらビューが捗った。</p>

<!--more-->


<p>Arrayクラス拡張であるin_groups_ofメソッドとin_groupsメソッドを使うと簡単に配列をグルーピング化することができます。</p>

<p>例えば、以下の配列データ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(1, 2, 3, 4, 5, 6, 7, 8)</span>
</span></code></pre></td></tr></table></div></figure>


<p>in_groups_ofメソッドをつけて呼び出すと引数指定の数の要素数の小配列をメンバにした配列を返してくれます。また第2引数で空部分に埋める要素指定もできます。デフォルトはnilです。falseを与えるとnilの代わりに要素数を切り詰めます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;none&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使うシーンとしては、ビュー上で指定個数毎でグルーピングして表示したいときに便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>4<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>5<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>6<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>7<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>8<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>9<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>似たような名前でin_groupsというメソッドもあります。こちらは配列を指定グループ数に分割してくれるメソッドです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>普段Railsやってる人には当たり前かもしれない内容でした。いざ使いたかったときにメソッド名を忘れていたので、以上、自分メモでした!</p>

<p>他にもActiveSupportの拡張は便利なものがあるので<a href="http://edgeguides.rubyonrails.org/active_support_core_extensions.html">Active Support Core Extensions</a>の一読おすすめです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra::Reloader]]></title>
    <link href="http://orihubon.com/blog/2013/08/06/sinatra-reloader/"/>
    <updated>2013-08-06T19:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/08/06/sinatra-reloader</id>
    <content type="html"><![CDATA[<p>Sinatraを久々に使っている。はて、development環境での自動リロードどうやるのだったか。</p>

<!--more-->


<p><a href="http://www.sinatrarb.com/contrib/reloader.html">Sinatra::Reloader</a> を使うと。</p>

<p>実際には<a href="https://github.com/sinatra/sinatra-contrib">sinatra-contrib</a>というgemをinstallするわけだけど、このgemには他にも機能があるので困ったときはこのgemを眺めるとよさそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでIPアドレスの正規表現を超簡単に書く]]></title>
    <link href="http://orihubon.com/blog/2013/08/06/regex-for-ipv-address/"/>
    <updated>2013-08-06T09:14:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/08/06/regex-for-ipv-address</id>
    <content type="html"><![CDATA[<p>正規表現自前で書かずとも、<code>Resolv::IPv4::Regex</code>を使う。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'resolv'
</span><span class='line'>Resolv::IPv4::Regex.class     
</span><span class='line'>=&gt; Regexp</span></code></pre></td></tr></table></div></figure>


<p>IPv6の場合は、<code>Resolv::IPv6::Regex</code>を使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVMのrawフォーマットのイメージファイルをマウントする]]></title>
    <link href="http://orihubon.com/blog/2013/07/31/mount-kvm-os-image/"/>
    <updated>2013-07-31T15:49:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/31/mount-kvm-os-image</id>
    <content type="html"><![CDATA[<p>rawフォーマット限定。</p>

<!--more-->


<p>マウント</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># losetup /dev/loop0 /data/vm/myserver.img
</span><span class='line'># kpartx -av /dev/loop0 
</span><span class='line'># ls -alF /dev/mapper
</span><span class='line'># mount /dev/mapper/loop0p1 /mnt</span></code></pre></td></tr></table></div></figure>


<p>アンマウント</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># umount /mnt
</span><span class='line'># kpartx -dv /dev/loop0
</span><span class='line'># losetup -d /dev/loop0</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="http://d.hatena.ne.jp/okinaka/20091210/1260445130">KVMのイメージをマウントする その2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virt-installでvncサーバを立ち上げてCentOSをグラフィカルインストール]]></title>
    <link href="http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install/"/>
    <updated>2013-07-29T22:58:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install</id>
    <content type="html"><![CDATA[<p>やっつけ感ある手順であるが。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /data/vm
</span><span class='line'>qemu-img create -f qcow2 server01.img 10G
</span><span class='line'>virt-install -n server01 \
</span><span class='line'>-r 1024 \
</span><span class='line'>--disk path=/data/vm/server01.img,size=10,format=qcow2 \
</span><span class='line'>--virt-type=kvm \
</span><span class='line'>--vcpus=2 \
</span><span class='line'>--os-type linux \
</span><span class='line'>--os-variant=rhel6 \
</span><span class='line'>--network bridge=br0 \
</span><span class='line'>--graphics vnc,password=abc123,port=5910,keymap=us \ 
</span><span class='line'>--cdrom=/var/tmp/CentOS-6.4-x86_64-minimal.iso</span></code></pre></td></tr></table></div></figure>


<p>さらに、virsh consoleでコンソールを取れるようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /et/grub.conf
</span><span class='line'>
</span><span class='line'>#splashimage=(hd0,0)/boot/grub/splash.xpm.gz  # この行は不要
</span><span class='line'>serial --unit=0 --speed=115200 # 追加
</span><span class='line'>terminal --timeout=5 serial console # 追加</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># echo ttyS0 &gt;&gt; /etc/securetty</span></code></pre></td></tr></table></div></figure>


<p>CentOS6の場合upstart経由で起動時にttyS0を自動起動してあげる必要がある。CentOS6.4最小インストール直後であればttyS0は自動起動してくれていた。以下のとおり確認しただけ。</p>

<p>起動しているか確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># initctl list |grep serial
</span><span class='line'>serial (ttyS0) start/running, process 5091</span></code></pre></td></tr></table></div></figure>


<p>設定ファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /etc/init/serial.conf</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="http://lab.unicast.ne.jp/2013/02/15/%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88/">仮想マシンにシリアルコンソールで接続できるよ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordのtypeフィールドについて]]></title>
    <link href="http://orihubon.com/blog/2013/07/29/type-column-of-activerecord/"/>
    <updated>2013-07-29T16:26:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/29/type-column-of-activerecord</id>
    <content type="html"><![CDATA[<p>ActiveRecordのtypeフィールドについて。</p>

<!--more-->


<p>ActiveRecord::Baseを継承したモデルクラスで&#8221;type&#8221;という名前のフィールドを使おうとすると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::SubclassNotFound: The single-table inheritance mechanism failed to locate the subclass: 'abc123'. This error is raised because the column 'type' is reserved for storing the class in case of inheritance. Please rename this column if you didn't intend it to be used for storing the inheritance class or overwrite Graph.inheritance_column to use another column for that information.</span></code></pre></td></tr></table></div></figure>


<p>という例外に遭遇します。ActiveRecordでは&#8221;type&#8221;フィールドはSTIという機能により予約されています。 <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecordのSTIの説明</a>にtypeフィールドは継承関係にあるクラス名を保存するフィールドであることが書かれています。</p>

<blockquote><p>Active Record allows inheritance by storing the name of the class in a column
that by default is named “type” (can be changed by overwriting
Base.inheritance_column).</p></blockquote>

<p>このエラーを回避するには以下どちらかで対応します。</p>

<ol>
<li>typeというフィールド名を使うのをやめて別の名前を使う。</li>
<li>もしくは、STIで使うフィールド名を変えてしまう。</li>
</ol>


<p>2のケースでは以下のようにします。</p>

<figure class='code'><figcaption><span>app/models/campany.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Company</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">inheritance_column</span> <span class="o">=</span> <span class="s1">&#39;sti_type&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ケースバイケースですが、ある案件ではtypeフィールドをどうしても使いたかったので2の方法を取りました。type名以外の選択が可能であれば1のケースが良いとおもいます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundle_frozenとかbundle_without]]></title>
    <link href="http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without/"/>
    <updated>2013-07-26T16:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without</id>
    <content type="html"><![CDATA[<p>bundlerの<code>--deployment</code>や<code>--without</code>に関してはまったことのメモ。</p>

<!--more-->


<h3>bundle install &mdash;deployment</h3>

<p><code>--deployment</code>をつけ実行すると<code>vendor/bundle</code>以下にgemがインストールされます。deploymentの名の通り本番環境でインストールする場合を想定したコマンドです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install --deployment</span></code></pre></td></tr></table></div></figure>


<h3>BUNDLE_FROZEN</h3>

<p><code>--deployment</code>の名のとおり本番環境でインストールする場合を想定したコマンドですが、うっかり開発環境で実行してしまって少々はまってしまいました。</p>

<p>開発環境でGemfileに新しくgemを追加したので、<code>bundle install</code>しようとします。すると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install
</span><span class='line'>You are trying to install in deployment mode after changing
</span><span class='line'>your Gemfile. Run `bundle install` elsewhere and add the
</span><span class='line'>updated Gemfile.lock to version control.
</span><span class='line'>
</span><span class='line'>If this is a development machine, remove the Gemfile freeze
</span><span class='line'>by running `bundle install --no-deployment`.
</span><span class='line'>
</span><span class='line'>You have added to the Gemfile:
</span><span class='line'>* colorize</span></code></pre></td></tr></table></div></figure>


<p>とエラーがでます。<code>bundle install --deployment</code>を1度でも実行すると<code>.bundle/config</code>が更新され<code>BUNDLE_FROZEN: 1</code>が付加されるようです。</p>

<p>これを解除するには、<code>bundle install --no-deployment</code>を1度実行するか、<code>.bundle/config</code>を直接編集して<code>BUNDLE_FROZEN: 1</code>の行を削除してしまうかする必要があります。</p>

<h3>BUNDLE_WITHOUT</h3>

<p><code>--without</code>というオプションがあります。以下のように使います。本番環境ではdevelopmentやtestグループのgemは不要なのでwithoutでinstall対象から除外することができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ bundle install --deployment --without development test</span></code></pre></td></tr></table></div></figure>


<p>ただ、これも<code>--without</code>つきで実行すると<code>.bundle/config</code>に保存されてしまいます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>BUNDLE_WITHOUT: development test</span></code></pre></td></tr></table></div></figure>


<p>うっかり開発環境で実行してしまうと、その後、<code>bundle exec rspec</code>などやろうとすると以下のエラーが発生します。rspec-coreはGemに含まれませんと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rpsec
</span><span class='line'>/Users/name/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/rubygems_integration.rb:214:in `block in replace_gem': rspec-core is not part of the bundle. Add it to Gemfile. (Gem::LoadError)</span></code></pre></td></tr></table></div></figure>


<p>この場合も、<code>.bundle/config</code>を編集してBUNDLE_WITHOUTの行を削除すれば良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便利なカラーピッカー 0 to 255]]></title>
    <link href="http://orihubon.com/blog/2013/07/09/0-to-255-color-picker/"/>
    <updated>2013-07-09T23:59:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/09/0-to-255-color-picker</id>
    <content type="html"><![CDATA[<p>世の中カラーピッカーを提供するWebサイトはたくさんありますが、<a href="http://0to255.com/">0to255</a>がとても使いやすかったのでメモ。</p>

<!--more-->


<p>ベースカラーを選択するとベースからの濃い色淡い色をチョイスして並べて表示してくれる。それだけ。なんですがシンプルで使いやすいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Font AwesomeをRailsで使ってみた]]></title>
    <link href="http://orihubon.com/blog/2013/07/09/font-awesome-rails/"/>
    <updated>2013-07-09T00:42:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/09/font-awesome-rails</id>
    <content type="html"><![CDATA[<p><a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a></p>

<p>Bootstrap向けのicon系Webフォントを提供するライブラリ。</p>

<!--more-->


<p>Railsで使うには <a href="https://github.com/bokmann/font-awesome-rails">font-awesome-rails</a>をGemfileに書いて適切にimportすればOKです。</p>

<p>使い方1 &ndash; iタグ使う</p>

<pre><code>&lt;i class="icon-thumbs-up"&gt;&lt;/i&gt; icon-thumbs-up
</code></pre>

<p>TwitterBootstrapであらかじめ用意されているアイコンの使い方と同じです。ただFont Awesomeの場合、画像ではなくフォントとして扱われるのでfont-colorで色を調整したり出来ます。</p>

<p>使い方2 &ndash; CSSのcontentマークアップにユニコードを埋め込む</p>

<pre><code>.thumbs-up:before {
  font-size: 20px;
  font-family: 'FontAwesome';
  content: '\F164';
}
</code></pre>

<p>contentの値にユニコードをセットします。ユニコードの値は各アイコンの説明ページに小さく書かれてあります。たとえば<a href="http://fortawesome.github.io/Font-Awesome/icon/thumbs-up/">thumbs-up</a>であればF164をcontentの値にすればOK。また、font-familyにFontAwesomeを指定します。contentで埋め込めるので:beforeなどの疑似要素と組み合わせることでスタイルシートからアイコンをHTMLに埋め込むことも可能です!</p>

<p>という感じで簡単ながらFont Awesomeの紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsFiddleでjavascriptお手軽動作確認]]></title>
    <link href="http://orihubon.com/blog/2013/07/09/jsfiddle-js-test/"/>
    <updated>2013-07-09T00:16:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/09/jsfiddle-js-test</id>
    <content type="html"><![CDATA[<p>Webアプリを作っていると、思いついたUIのアイデアを実装して使用感や見た目を確認したくなることがしばしばあるとおもいます。そんな時はさくっと試せる <a href="http://jsfiddle.net/">jsFiddle</a> がお勧めです!</p>

<!--more-->


<p><a href="http://jsfiddle.net/niku4i/5pg4m/">jQuery-UIのaccordion pluginの動作確認をしてみた例</a></p>

<p>使ってみた感想としては、css、html、javascriptのコードをフォームに入力して Run! ボタンを押すだけでとても簡単でした。</p>

<p>また、jsFiddleはgithub.comのgistに近い感覚でJavaScriptやCSSを試すことが出来るので、作った画面をSkypeやIRCで他人と共有できる点が優れています。StackOverflowでjs系で検索すると結構な確率で見ますね。</p>

<p>jQueryなどのライブラリの選択やバージョンの変更も左側のメニューからポチポチやるだけで切り替えれて簡単。</p>

<p>また、Ajax系の動作確認も可能です。サーバサイドのエンドポイントが必要ですが、jsFiddleでは <code>/echo/json/</code>, <code>/echo/html/</code>といったリクエストをresponseとしてechoするダミーのエンドポイントが提供されています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yokohama.ex #2 に参加してきたよ]]></title>
    <link href="http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703/"/>
    <updated>2013-07-03T23:02:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703</id>
    <content type="html"><![CDATA[<p>2013/07/03(水) 開催された <a href="http://www.zusaar.com/event/822004">yokohama.ex #2</a> に参加してきました!</p>

<!--more-->


<p>場所はDeNA@渋谷ヒカリエ。</p>

<p>会の趣旨は <a href="http://elixir-lang.org/">elixir-lang.org</a>のGETTING STARTEDをみんなで読んで勉強しましょう、といったところ。</p>

<p>前回(第1回)はyokohama.rbの中でElixir紹介がてらGETTING STARTEDの1章から2.6.4までを読んだ、そうです。僕は参加してませんでしたので今回にあたって密かに一人独習したわけですが、@sonots さんが<a href="https://docs.google.com/presentation/d/1Tl-NTgGiW6V6QCCi2Hy0V81XZTjkAWEC22yTWE8ChP4/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.p">復習資料</a> を作成してくれていて今日の会はこの復習資料からスタート! 英文で読んだ後でまとまった日本語で再度インプットするとすーっと浸みいります。とても助かりました。</p>

<p>今回はSection2.6.5 TryからSection3の最後まで。プロジェクタにホームページの英文を映して代表の人が読みながらサンプルコードをiexで実行、あれこれ言い合う感じで進められていました。</p>

<p>Elixirにもの申すレベルではないのでElixirには言及しませんが、会の進め方については1つ1つ順番に読み進めるスタイルなのでElixir初心者であっても取っ付きやすかったとおもいます!!!</p>

<p>普段Ruby、Perlなどを使ってるので関数型言語の考え方は頭の体操になりました! 英語の速読にも良い会でした:)</p>

<p>次回#3も予定されています。まだ追いつけるとおもますので興味がありましたら次回参加してみたらいかがでしょうか。</p>
]]></content>
  </entry>
  
</feed>
