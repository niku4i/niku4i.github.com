<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ni-blog]]></title>
  <link href="http://orihubon.com/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2014-05-30T19:04:23+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptを速くするためのベストプラクティス]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script/"/>
    <updated>2014-05-30T18:23:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script</id>
    <content type="html"><![CDATA[<p>Google Developersサイトの<a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を要約してみた。</p>

<!--more-->


<h3>サービスのcallを最小限に</h3>

<p>javascript内で閉じた処理の方がサービスをcallするよりも早い。サービスのcallとはspreadsheetのデータを読み出したり書き出したり、Docsを参照したり、SiteやTranslateやUrlFetchとか使ったり。</p>

<h3>バッチオペレーション</h3>

<p>spreadsheetのreadとwriteの回数を最小化する。readとwriteは重い処理。1オペレーションでデータを配列にreadし、1オペレーションで配列にwriteすること。forreachの中で毎回callするのは遅いので、配列に溜めて最後に1回で書きだす。たとえば<code>setBackgroundColor(value)</code>をたくさん呼ぶのではなく<code>setBackgroundColors(values);</code>1回にする。</p>

<h3>Cache Class</h3>

<p><a href="https://developers.google.com/apps-script/reference/cache/cache?hl=ja">Cache</a>というキャッシュクラスがあるので、頻繁に使うけど遅いデータはキャッシュしとく。key valueでキャッシュできる。</p>

<p>例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function getRssFeed() {
</span><span class='line'>   var cache = CacheService.getPublicCache();
</span><span class='line'>   var cached = cache.get("rss-feed-contents");
</span><span class='line'>   if (cached != null) {
</span><span class='line'>     return cached;
</span><span class='line'>   }
</span><span class='line'>   var result = UrlFetchApp.fetch("http://example.com/my-slow-rss-feed.xml"); // takes 20 seconds
</span><span class='line'>   var contents = result.getContentText();
</span><span class='line'>   cache.put("rss-feed-contents", contents, 1500); // cache for 25 minutes
</span><span class='line'>   return contents;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Using Client Handlers for More Responsive UIs</h3>

<p>UI applicationを使う場合でイベントコールバック(たとえばボタンをクリックするとか)を使う場合、<a href="https://developers.google.com/apps-script/reference/ui/client-handler?hl=ja">ClientHandler</a>を使うと高速化できる。サーバサイドでイベントキャッチするのではなく、クライアントサイド(ブラウザ)でhandleすることができるので。使う機会がいまのところ無いので詳しくはない。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptの共通関数をライブラリでまとめる]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/google-apps-script-library/"/>
    <updated>2014-05-30T14:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/google-apps-script-library</id>
    <content type="html"><![CDATA[<p><a href="http://orihubon.com/blog/2014/05/30/tried-google-apps-script/">前回</a>に引き続きGoogle Apps Script。共通関数をライブラリにする方法。</p>

<!--more-->


<p>共通の処理をライブラリとして独立して管理できるのか調査した。Libraryの機能を使うとできることがわかったのでメモ。<a href="https://developers.google.com/apps-script/guide_libraries">公式のドキュメント</a>。</p>

<p>spreadsheet &ndash;> スクリプトエディタ &ndash;> スクリプト作成 の順番でたどるとspreadsheetのバインドされたscriptができあがるが、このスクリプトはライブラリにはできない。ライブラリとして作るにはGoogle Apps Home &ndash;> スクリプト作成する必要がある点が最初分かりにくかった。</p>

<p>ライブラリ作成後、spreadsheetのスクリプトエディタ側でライブラリを指定してあげればOK。実際はライブラリにユニークに割り当てられるproject keyを使う側で指定する。</p>

<h4>イメージ</h4>

<p><img src="http://orihubon.com/images/20140530-script-lib.png"></p>

<h4>最低限必要なこと</h4>

<ul>
<li>利用ユーザへライブラリへのアクセス権限が必要</li>
<li>project keyの伝達が必要</li>
<li>ライブラリスクリプトは1個以上のバージョニングをつけて保存すること(インクルード側でバージョン指定ができる)</li>
</ul>


<h4>その他</h4>

<ul>
<li>インクルードライブラリの識別子(クラス名みたいなもの)は任意の文字列を指定できる。たとえば<code>MyPicasaApi</code>とか。プロジェクト内では<code>MyPicasaApi.doSomething()</code>で呼べる。もし既存のクラス(たとえば<code>UiApp</code>)と被ると既存クラスがオーバライドされる。</li>
<li>privateなメソッドを作るには _ で終わる名前をつけるとautocompleteで出てこなくなる。 e.g. <code>myPrivateMethod_()</code></li>
<li>autocompleteで表示されるドキュメントを与えたいなら、関数の上に<a href="https://developers.google.com/closure/compiler/docs/js-for-compiler">JSDoc style documentation</a>でコメントを書く。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>* Raises a number to the given power, and returns the result.
</span><span class='line'>*
</span><span class='line'>* @param {number} base the number we're raising to a power
</span><span class='line'>* @param {number} exp the exponent we're raising the base to
</span><span class='line'>* @return {number} the result of the exponential calculation
</span><span class='line'>*/
</span><span class='line'>function power(base, exp) { ... }</span></code></pre></td></tr></table></div></figure>


<p>GAS力がさらに上がりました!以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Scriptをつかってみた]]></title>
    <link href="http://orihubon.com/blog/2014/05/30/tried-google-apps-script/"/>
    <updated>2014-05-30T00:39:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/30/tried-google-apps-script</id>
    <content type="html"><![CDATA[<p>某案件でGoogle Spreadsheetを使う機会があって少しかじってみた。浅くメモ。</p>

<!--more-->


<h3>About Google Apps Script</h3>

<p>Google Apps ScriptはGoogleプラットフォーム上で動くサーバサイドjavascript。spreadsheetに限らずGoogle Apps上のデータと連携してアイデア次第で何でもできる言語。例えばGmailでqueryをかけてbodyをパースしてspreadsheetにデータ貯めて、解析してPDF変換してGmailに送る、みたいなこともできる。</p>

<p>Google Apps内に限らず、外部のAPIサーバからデータを取ってきたり、逆に外のサーバにデータを送ることもできる。ただし、Google Platformで実行されるのでファイアウォールを超えてイントラネットに接続するという要件はセキュリティ的に難しい制約はある。</p>

<p>triggerを使うとイベント起因で関数を実行できる。ボタンクリックとかドキュメントを開いたときとか。</p>

<h4>triggerの例</h4>

<p>ドキュメントオープン時にメニューボタンを追加する例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function onOpen() { // automatically run this on open a spreadsheet.
</span><span class='line'>  var menuEntries = [ {name: "say hello", functionName: "sayHello"} ];
</span><span class='line'>  var ss = SpreadsheetApp.getActiveSpreadsheet();
</span><span class='line'>  ss.addMenu("my menu", menuEntries);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function sayHello() {
</span><span class='line'>  Logger.log('Hello World!');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>時限式のtriggerでcron的なことも可能で、もちろんMac Bookを閉じた後もGoogleプラットフォーム上で実行される。triggerを使えば定期的にGmailをチェックして何かやるみたいなこともできる。</p>

<p>書いたスクリプトをWebアプリとして公開する設定をするとURLのエンドポイントがもらえる。triggerには<code>doGet()</code>というのもあってURLをGETしたトリガで何かできたりする。例えばGETトリガでスクリプトへcallbackされるのでURLのqueryのkey, valueをspreadsheetにためるといったこともできる(簡易WebAPI!)</p>

<h3>制約</h3>

<h4>実行遅い</h4>

<p>結構実行遅い。APIのcallを少なくを心がける。ノウハウは <a href="https://developers.google.com/apps-script/best_practices?hl=ja">Best Practices</a>を参照のこと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ss = SpreadsheetApp.getActiveSpreadsheet();
</span><span class='line'>var sh = ss.getSheetByName('シート1');
</span><span class='line'>
</span><span class='line'>//bad
</span><span class='line'>for (n = 0; n &lt; 2; n++) {
</span><span class='line'>    sh.getRange(n,1).setValue('Value');
</span><span class='line'>    sh.getRange(n,2).setValue('Value');
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//good
</span><span class='line'>sh.getRange(1,1,2,2).setValues([['Value', 'Value'], ['Value', 'Value']]);</span></code></pre></td></tr></table></div></figure>


<h4>1回の実行 5分まで</h4>

<p>実行が5分過ぎるとスクリプトは終了する。</p>

<h3>リファレンス</h3>

<p>自分はこの辺みてます。</p>

<ul>
<li><a href="https://developers.google.com/apps-script/?hl=ja">何はともあれ公式サイト</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/google-apps-script">stackoverflowのtagged/google-apps-script</a> あまり見てないけど</li>
<li>本 僕はいま<a href="http://www.amazon.co.jp/gp/product/B00IM5UW1W/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">Google Apps Script for Biginner</a>を読んでる</li>
</ul>


<p>日本語でヒットするサイトはExcelっぽい雰囲気が漂っててあまり見ていない(笑) もちろん参考にさせていただいているけど。</p>

<h3>おもったところ</h3>

<p>開発環境はブラウザ上のスクリプトエディタを使わざるおえないので、脳がブラウジング脳になるのが難点。viモードほしい。</p>

<p>他のOSSと組み合わせるとアイデア次第で面白いことできそう。<a href="http://qiita.com/kazunori279/items/6329df57635799405547">Fluentd Dashboard</a> のデモはすごかった!</p>

<p>Viewを作らなくていいので楽!</p>

<p>カジュアルに初めてカジュアルに終えるのが良いかと。それなりの規模であればRailsとかで真面目に作ろう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vienna, Salzburg, Zurich, Parisを列車で巡ってみた - 後編]]></title>
    <link href="http://orihubon.com/blog/2014/05/17/zurich-paris/"/>
    <updated>2014-05-17T16:41:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/17/zurich-paris</id>
    <content type="html"><![CDATA[<p>ウィーンからパリまで列車の旅の後半編。<a href="http://orihubon.com/blog/2014/05/17/vienna-salzburg/">前半はこちら</a>。</p>

<!-- more -->


<h4>チューリッヒ</h4>

<ul>
<li>物価高い!!!</li>
<li>チェックインでトラブった</li>
<li>チーズフォンデュは濃厚</li>
</ul>


<p>物価高い!!evian 500mlペットボトルが400円強、昼飯2人でパスタとコーラ飲んで5000円弱とかで財布寒い。ホテルもベースが高かったのでチューリッヒではGuest Houseにしました。泊まったGH <a href="http://www.expedia.co.jp/Zurich-Hotels-Guesthouse-Brauerstrasse.h4623034.Hotel-Information">Guesthouse Brauerstrasse</a>。期待していなかったのですが意外、アパートメントタイプでちゃんと専用個室で風呂もトイレも専用。部屋広くてソファもあったりしていい部屋でした。ただしチェックインは難易度高い。フロントは無くてキーボックスからキーを入手する必要があるので事前にキーコードがメールされてきます。僕はキーコードの存在を忘れてて鍵ゲットするまでちょっと手間取りました。</p>

<p>スイスは1泊だけの滞在なのでスイスといえば&hellip;チーズフォンデュでしょってことで食べました。本場はチーズ風味が臭いです。味はおいしかったけど濃厚すぎて自分はダメでした。ちなみに本当は冬の食べ物らしいです。日本の鍋的感覚か。</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5429.JPG">
<img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5448.JPG"></p>

<h4>パリ</h4>

<ul>
<li>お洒落な街、でも地下鉄とっても汚い</li>
<li>エッフェル塔、凱旋門</li>
<li>ショッピング</li>
</ul>


<p>パリは2泊だけの滞在で駆け足。観光はエッフェル塔、凱旋門、ノートルダム寺院の3カ所。親戚の子供の洋服土産を探したりで町歩きしながらセーヌ川を眺めるそんな感じでした。パリは多人種な街ですね。セーヌ川沿いのBrasserieでワイン飲みながらってのはなかなか良いものでした。</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8903.JPG">
<img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8936.JPG"></p>

<h4>お金, 手配の方法など</h4>

<p>誰かの参考になるかもしれないので書いてみる。ツアーは使ってなくてすべて個人手配です。</p>

<p>2人で飛行機24万円、列車代が9万円、ホテルが10万くらい、その他食費等で合計55万くらい。飛行機は安かったけどユーロ高め(1ユーロ142円くらい)だったので結構財布寒い感じですね。結構食費は節約系でした。</p>

<p>飛行機はエールフランスのサイトで直接調べたら安く行けることが分かって、さらに安くならないかなとトラベルコちゃんで調べたらHISが同じ便で1万円くらい安かったので申し込み。行きはシャルルドゴール空港経由パリ行き、帰りはパリから成田への直行便です。</p>

<p>ホテルはExpediaで。選定方法はまず値段みて、あとGoogle Mapみながら交通の便が良い立地かどうかで選ぶ感じ。(このあたりネット系でコンシェルジュ的(楽々幹事さん的のり)なサービスあってやってくれるサービスとかないですかねえ。)</p>

<p>列車<a href="http://www.raileurope.com/index.html">RAILEUROPE</a>で列車時刻調べてチケットを事前に購入しました。ユーロレイルパスは使ってません(個別購入の方が安かったので)</p>

<h4>まとめ</h4>

<p>ウィーン、ザルツブルク、チューリッヒ、パリと列車で巡ってきた。弾丸な日程だったけど充実した旅でした。次は1都市滞在でゆっくりした旅がしたい!(けどかなり先だろう)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vienna, Salzburg, Zurich, Parisを列車で巡ってみた - 前編]]></title>
    <link href="http://orihubon.com/blog/2014/05/17/vienna-salzburg/"/>
    <updated>2014-05-17T16:41:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/05/17/vienna-salzburg</id>
    <content type="html"><![CDATA[<p>5月の前半、ウィーンからパリまで列車の旅をしたので簡単にまとめてみます。</p>

<!-- more -->


<p>今回は嫁と二人旅、世間的にはいわゆる新婚旅行というやつです。旅行先の選定は、まず嫁希望でオーストリアのウィーンとザルツブルクが決まって、僕がパリ行ってみたかったのでパリが決まって、列車の旅にしようということが決まって、ウィーンからパリの間でちょうどチューリッヒがあったのでチューリッヒに寄りました。</p>

<h4>ウィーン</h4>

<ul>
<li>音楽の都</li>
<li>オペラ座ツアーオススメ</li>
<li>観光スタートダッシュ</li>
</ul>


<p>僕が大学時代オーケストラやっていて嫁が現在チェロ習い中ということもあって <a href="http://www.musikverein.at/">楽友協会</a> (Wiener Musikverein)へクラシックコンサートききにいきました。黄金ホールが新年のウィーンフィルのニューイヤーコンサートで有名です。日本でクラシックコンサート聞く場合だと結構ジーパン、Tシャツってのもありではありなんですが、さすがヨーロッパ、みなさまお洒落紳士淑女なんですね。僕らは昼間観光した後にいったんホテル戻って綺麗な服に着替えて出かけました。普段クラシック聞かない人でも雰囲気満点で楽しめるとおもいます!</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5300.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5306.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5319.JPG"></p>

<p>ちなみにチケットは公式ページからクレジットカードで買えます。レシートをA4に印刷して当日会場のチケット預かりで提示すればチケット引き換えできます。</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5303.JPG"></p>

<p>また、昼間にやってるオペラ座ツアーは5ユーロでみれるので安くてお得でオススメです。オペラ座内部をガイドさんが40分くらいかけて案内してくれます。開始時刻は<a href="http://www.wiener-staatsoper.at/Content.Node/home/Startseite-Content.jp.php">公式ページ</a>を参照。予約無しで開始15分くらい前に行って5ユーロ支払えばOKです。</p>

<p>その他、ハプスブルク家関連。ホーフブルク宮殿、シシィ博物館、美術史美術館、シェーンブルン宮殿、と弾丸で巡りました。2日で巡ったのですが時間足りなかった(笑) シェーンブルク宮殿は街から少し離れたところにあって宮殿の裏手に丘があってそウィーンの街の眺めオススメです。</p>

<p>あとグルメ的にはウィーンにいったらウィーナーシュニッチェル、ザッハトルテは食べとけとのことでした。ザッハトルテってHotel Sacher Viennaというところのカフェのチョコケーキだからザッハトルテ(sacher torte)というのは今回知りました。</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8694.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8705.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8704.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8617.JPG"></p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8688.JPG"></p>

<h4>ザルツブルク</h4>

<ul>
<li>サウンドオブミュージック</li>
<li>ザルツ = 塩、ブルク = 城。モーツァルトが生まれた街</li>
<li>郊外にはRedBullの本社があるらしい</li>
</ul>


<p>ザルツブルクはけっこう田舎で、市より小さくて村より大きい感じの規模でした。市内観光と併せて郊外まで連れて行ってくれるツアーにjoinするのもオススメです。</p>

<p>嫁が映画サウンドオブミュージックのファンでロケ地を巡る半日ツアーに参加しました。利用したのは現地のツアー会社PANORAMA Toursの<a href="http://www.panoramatours.com/de/salzburg/tour/tour-1a-original-sound-of-music-tour-R-27/">Original Sound of Music Tour</a>、Webサイトから予約できます。英語ガイドさんつきのバスツアーなんですがなかなか陽気なおばちゃんで英語分からないところもありましたが楽しめました。なお、英語ツアーに日本人が参加するのは珍しいらしく参加するともれなくガイドさんイジってくれます(汗) ちなみに、日本語ツアーもあります。</p>

<p><img src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5361.JPG">
<img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8790.JPG" title="test" >
<img src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8815.JPG"></p>

<h4>列車での移動</h4>

<p>今回はオーストリア国鉄 OBB 運行のRajetというのと、フランス国鉄運行のTGVにのりました。TGVは結構狭い。Rajetは列車内Wifiついてて快適でした!</p>

<p><img class="right" src="http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8762.JPG">
<img class="right" src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5460.JPG">
<img class="right" src="http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5398.JPG"></p>

<h4>次回へ続く</h4>

<p>オーストリア編はここで終わり。1ポストで収まらなかったので続きは<a href="http://orihubon.com/blog/2014/05/17/zurich-paris/">次回へ</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/etc/sysctl.confを管理するChef cookbook]]></title>
    <link href="http://orihubon.com/blog/2014/03/26/sysctl-chef-cookbook/"/>
    <updated>2014-03-26T22:49:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/03/26/sysctl-chef-cookbook</id>
    <content type="html"><![CDATA[<p>Chefでsysctl.confを管理するやつ作ってみた。<a href="https://github.com/niku4i/sysctl-cookbook">niku4i/sysctl-cookbook</a></p>

<!--more-->


<p>なかのコードはonehealth-cookbooksさんの<a href="https://github.com/onehealth-cookbooks/sysctl">onehealth-cookbooks/sysctl</a>から必要最小限必要な部分だけかいつまみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-kitchen使ったメモ]]></title>
    <link href="http://orihubon.com/blog/2014/03/25/test-kitchenshi-tutamemo/"/>
    <updated>2014-03-25T11:46:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/03/25/test-kitchenshi-tutamemo</id>
    <content type="html"><![CDATA[<p>最近はImmutable Infrastracture盛り上がりでChefやPuppetが語られる機会が少なくなって気がしますが、それはChef/Puppetが成熟してきた証拠? test-kitchenを使ってみたメモです。</p>

<!--more-->


<p><a href="http://kitchen.ci/docs/getting-started">GETTING STARTED GUIDE</a> を写経。詳細はリンク先の原文を参照してください。</p>

<p>拙作の<a href="https://github.com/niku4i/rbenv-cookbook">rbenv-cookbook</a>をtest-kitchenをつかってVagrant上の仮想マシンでテストするところまで進めました。なお、Vagrantのバージョンは1.5.1を使いました。</p>

<h3>インストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install test-kitchen
</span><span class='line'>$ kitchen -v
</span><span class='line'>Test Kitchen version 1.2.1</span></code></pre></td></tr></table></div></figure>


<p>また、あらかじめcookbookをgit cloneしておきます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:niku4i/rbenv-cookbook.git
</span><span class='line'>$ cd rbenv-cookbook</span></code></pre></td></tr></table></div></figure>


<h3>kitchen init</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kitchen init --driver=kitchen-vagrant
</span><span class='line'>      create  .kitchen.yml
</span><span class='line'>      create  test/integration/default
</span><span class='line'>      create  .gitignore
</span><span class='line'>      append  .gitignore
</span><span class='line'>      append  .gitignore
</span><span class='line'>         run  gem install kitchen-vagrant from "."
</span><span class='line'>Fetching: kitchen-vagrant-0.14.0.gem (100%)
</span><span class='line'>Successfully installed kitchen-vagrant-0.14.0
</span><span class='line'>Parsing documentation for kitchen-vagrant-0.14.0
</span><span class='line'>Installing ri documentation for kitchen-vagrant-0.14.0
</span><span class='line'>1 gem installed</span></code></pre></td></tr></table></div></figure>


<p>.kitchen.ymlが作られた。中身は以下のとおり。ubuntuはひとまず不要なのでplatformから削除。またinitで作成されたyamlに登録されているcentos-6.4ではkitchen createしたときにvagrant upできなくてエラーになってしまったので、boxイメージが悪いのかなと判断して6.5を使うように変更した。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>driver:
</span><span class='line'>  name: vagrant
</span><span class='line'>
</span><span class='line'>provisioner:
</span><span class='line'>  name: chef_solo
</span><span class='line'>
</span><span class='line'>platforms:
</span><span class='line'>#  - name: ubuntu-12.04
</span><span class='line'>#  - name: centos-6.4
</span><span class='line'>  - name: centos-65
</span><span class='line'>
</span><span class='line'>suites:
</span><span class='line'>  - name: default
</span><span class='line'>    run_list:
</span><span class='line'>      - recipe[rbenv-cookbook::default]
</span><span class='line'>    attributes:</span></code></pre></td></tr></table></div></figure>


<p>kitchen listコマンドで確認できた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kitchen list
</span><span class='line'>Instance           Driver   Provisioner  Last Action
</span><span class='line'>default-centos-64  Vagrant  ChefSolo     &lt;Not Created&gt;</span></code></pre></td></tr></table></div></figure>


<h3>kitchen create</h3>

<p>kitchen createでインスタンスをアップ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ kitchen create default-centos-65
</span><span class='line'>-----&gt; Starting Kitchen (v1.2.1)
</span><span class='line'>-----&gt; Creating &lt;default-centos-65&gt;...
</span><span class='line'>       Bringing machine 'default' up with 'virtualbox' provider...
</span><span class='line'>       ==&gt; default: Box 'opscode-centos-6.5' could not be found. Attempting to find and install...
</span><span class='line'>           default: Box Provider: virtualbox
</span><span class='line'>           default: Box Version: &gt;= 0
</span><span class='line'>       ==&gt; default: Adding box 'opscode-centos-6.5' (v0) for provider: virtualbox
</span><span class='line'>           default: Downloading: https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.5_chef-provisionerless.box
</span><span class='line'>       ==&gt; default: Successfully added box 'opscode-centos-6.5' (v0) for 'virtualbox'!
</span><span class='line'>       ==&gt; default: Importing base box 'opscode-centos-6.5'...
</span><span class='line'>       ==&gt; default: Matching MAC address for NAT networking...
</span><span class='line'>       ==&gt; default: Setting the name of the VM: default-centos-65_default_1395719095721_73691
</span><span class='line'>       ==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2201.
</span><span class='line'>       ==&gt; default: Clearing any previously set network interfaces...
</span><span class='line'>       ==&gt; default: Preparing network interfaces based on configuration...
</span><span class='line'>           default: Adapter 1: nat
</span><span class='line'>       ==&gt; default: Forwarding ports...
</span><span class='line'>           default: 22 =&gt; 2201 (adapter 1)
</span><span class='line'>       ==&gt; default: Running 'pre-boot' VM customizations...
</span><span class='line'>       ==&gt; default: Booting VM...
</span><span class='line'>==&gt; default: Waiting for machine to boot. This may take a few minutes...           default: SSH address: 127.0.0.1:2201
</span><span class='line'>           default: SSH username: vagrant
</span><span class='line'>           default: SSH auth method: private key
</span><span class='line'>           default: Error: Connection timeout. Retrying...
</span><span class='line'>       ==&gt; default: Machine booted and ready!
</span><span class='line'>       ==&gt; default: Checking for guest additions in VM...
</span><span class='line'>           default: The guest additions on this VM do not match the installed version of
</span><span class='line'>           default: VirtualBox! In most cases this is fine, but in rare cases it can
</span><span class='line'>           default: prevent things such as shared folders from working properly. If you see
</span><span class='line'>           default: shared folder errors, please make sure the guest additions within the
</span><span class='line'>           default: virtual machine match the version of VirtualBox you have installed on
</span><span class='line'>           default: your host and reload your VM.
</span><span class='line'>           default:
</span><span class='line'>           default: Guest Additions Version: 4.3.8
</span><span class='line'>           default: VirtualBox Version: 4.2
</span><span class='line'>       ==&gt; default: Setting hostname...
</span><span class='line'>       Vagrant instance &lt;default-centos-65&gt; created.
</span><span class='line'>       Finished creating &lt;default-centos-65&gt; (11m27.39s).
</span><span class='line'>-----&gt; Kitchen is finished. (11m27.70s)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>vagrantでインスタンスを起動する</li>
<li>boxが登録されてなければネットワークから探してくる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kitchen list
</span><span class='line'>Instance           Driver   Provisioner  Last Action
</span><span class='line'>default-centos-65  Vagrant  ChefSolo     Created</span></code></pre></td></tr></table></div></figure>


<h3>kitchen converge</h3>

<p>レシピをインスタンスに適用する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kitchen converge default-centos-65
</span><span class='line'>-----&gt; Starting Kitchen (v1.2.1)
</span><span class='line'>-----&gt; Converging &lt;default-centos-65&gt;...
</span><span class='line'>       Preparing files for transfer
</span><span class='line'>       Preparing current project directory as a cookbook
</span><span class='line'>       Removing non-cookbook files before transfer
</span><span class='line'>-----&gt; Installing Chef Omnibus (true)
</span><span class='line'>       downloading https://www.getchef.com/chef/install.sh
</span><span class='line'>         to file /tmp/install.sh
</span><span class='line'>       trying wget...
</span><span class='line'>       Downloading Chef  for el...
</span><span class='line'>       downloading https://www.getchef.com/chef/metadata?v=&prerelease=false&p=el&pv=6&m=x86_64
</span><span class='line'>         to file /tmp/install.sh.1851/metadata.txt
</span><span class='line'>       trying wget...
</span><span class='line'>       url      https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm
</span><span class='line'>       md5      3fe6dd8e19301b6c66032496a89097db
</span><span class='line'>       sha256   edd5d2bcc174f67e5e5136fd7e5fffd9414c5f4949c68b28055b124185904d9f
</span><span class='line'>       downloaded metadata file looks valid...
</span><span class='line'>       downloading https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm
</span><span class='line'>         to file /tmp/install.sh.1851/chef-11.10.4-1.el6.x86_64.rpm
</span><span class='line'>       trying wget...
</span><span class='line'>       Comparing checksum with sha256sum...
</span><span class='line'>       Installing Chef
</span><span class='line'>       installing with rpm...
</span><span class='line'>       warning: /tmp/install.sh.1851/chef-11.10.4-1.el6.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 83ef826a: NOKEY
</span><span class='line'>Preparing...                #####  ########################################### [100%]
</span><span class='line'>   1:chef                          ########################################### [100%]
</span><span class='line'>       Thank you for installing Chef!
</span><span class='line'>       Transfering files to &lt;default-centos-65&gt;
</span><span class='line'>       [2014-03-25T03:51:33+00:00] INFO: Forking chef instance to converge...
</span><span class='line'>       Starting Chef Client, version 11.10.4
</span><span class='line'>       [2014-03-25T03:51:33+00:00] INFO: *** Chef 11.10.4 ***
</span><span class='line'>       [2014-03-25T03:51:33+00:00] INFO: Chef-client pid: 1948
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Setting the run_list to ["recipe[rbenv-cookbook::default]"] from JSON
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Run List is [recipe[rbenv-cookbook::default]]
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Run List expands to [rbenv-cookbook::default]
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Starting Chef Run for default-centos-65
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Running start handlers
</span><span class='line'>       [2014-03-25T03:51:34+00:00] INFO: Start handlers complete.
</span><span class='line'>       Compiling Cookbooks...
</span><span class='line'>
</span><span class='line'>       Running handlers:
</span><span class='line'>       [2014-03-25T03:51:34+00:00] ERROR: Running exception handlers
</span><span class='line'>       Running handlers complete
</span><span class='line'>
</span><span class='line'>       [2014-03-25T03:51:34+00:00] ERROR: Exception handlers complete
</span><span class='line'>       [2014-03-25T03:51:34+00:00] FATAL: Stacktrace dumped to /tmp/kitchen/cache/chef-stacktrace.out
</span><span class='line'>       Chef Client failed. 0 resources updated in 0.458583313 seconds
</span><span class='line'>       [2014-03-25T03:51:34+00:00] ERROR: Cookbook yum-epel not found. If you're loading yum-epel from another cookbook, make sure you configure the dependency in your metadata
</span><span class='line'>       [2014-03-25T03:51:34+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt; Converge failed on instance &lt;default-centos-65&gt;.
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt; Please see .kitchen/logs/default-centos-65.log for more details
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt; ------Exception-------
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt; Class: Kitchen::ActionFailed
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt; Message: SSH exited (1) for command: [sudo -E chef-solo --config /tmp/kitchen/solo.rb --json-attributes /tmp/kitchen/dna.json  --log_level info]</span></code></pre></td></tr></table></div></figure>


<p>エラーでこけた&hellip; 。rbenv-cookbookはyum-epelに依存してるせい? metadata.rbは既に作ってるのでBerkshelfファイルを作成しmetadataを読み込むようにしたらエラーをパスできた!</p>

<figure class='code'><figcaption><span>Berksfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>source &quot;https://api.berkshelf.com&quot;
</span><span class='line'>
</span><span class='line'>metadata
</span></code></pre></td></tr></table></div></figure>


<p>再実行。gitが無いので止まった。これはレシピが悪い。</p>

<figure class='code'><figcaption><span>recipes/default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">snip</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">+</span> <span class="n">package</span> <span class="s2">&quot;git&quot;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">snip</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>再実行!無事終了!</p>

<p>kitchen convergeでやること</p>

<ul>
<li>インスタンスにChefをインストール</li>
<li>依存関係のレシピをインストール</li>
<li>.kitchen.ymlのrun_listを実行</li>
</ul>


<h3>手動で確認する</h3>

<p>ここまででレシピをエラー無くインスタンスに適用できることを確認した。手動でログインし確認する。</p>

<figure class='code'><figcaption><span>recipes/default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">kitchen</span> <span class="n">login</span> <span class="n">default</span><span class="o">-</span><span class="n">centos</span><span class="o">-</span><span class="mi">65</span>
</span><span class='line'><span class="no">Last</span> <span class="ss">login</span><span class="p">:</span> <span class="no">Tue</span> <span class="no">Mar</span> <span class="mi">25</span> <span class="mo">03</span><span class="p">:</span><span class="mi">59</span><span class="p">:</span><span class="mi">38</span> <span class="mi">2014</span> <span class="n">from</span> <span class="mi">10</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'><span class="o">[</span><span class="n">vagrant</span><span class="vi">@default</span><span class="o">-</span><span class="n">centos</span><span class="o">-</span><span class="mi">65</span> <span class="o">~]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>ログインできた。rbenvインストールされている。</p>

<figure class='code'><figcaption><span>recipes/default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rbenv</span>
</span><span class='line'><span class="n">rbenv</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="mi">95</span><span class="o">-</span><span class="n">gf71e227</span>
</span><span class='line'><span class="ss">Usage</span><span class="p">:</span> <span class="n">rbenv</span> <span class="o">&lt;</span><span class="n">command</span><span class="o">&gt;</span> <span class="o">[&lt;</span><span class="n">args</span><span class="o">&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>テストを書く</h3>

<p>ServerSpecを使いたいところではあるが、ここではチュートリアルに従ってBusserというテストフレームワークでテストを書く。</p>

<p>テスト用のディレクトリを作成</p>

<figure class='code'><figcaption><span>recipes/default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mkdir</span> <span class="o">-</span><span class="nb">p</span> <span class="nb">test</span><span class="o">/</span><span class="n">integration</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">bats</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は実行ファイルが存在するかどうかだけチェックした。</p>

<figure class='code'><figcaption><span>test/integration/default/bats/rbenv_installed.bats    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#!/usr/bin/env bats
</span><span class='line'>
</span><span class='line'>@test &quot;executable rbenv command is found&quot; {
</span><span class='line'>  run test -x /usr/local/rbenv/bin/rbenv
</span><span class='line'>  [ &quot;$status&quot; -eq 0 ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>テストを流す</p>

<figure class='code'><figcaption><span>test/integration/default/bats/rbenv_installed.bats    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ kitchen veryfy default-centos-65
</span><span class='line'>
</span><span class='line'>-----&gt; Starting Kitchen (v1.2.1)
</span><span class='line'>-----&gt; Verifying &lt;default-centos-65&gt;...
</span><span class='line'>       Removing /tmp/busser/suites/bats
</span><span class='line'>       Uploading /tmp/busser/suites/bats/rbenv_installed.bats (mode=0644)
</span><span class='line'>-----&gt; Running bats test suite
</span><span class='line'> ✓ executable rbenv command is found
</span><span class='line'>
</span><span class='line'>       1 test, 0 failures
</span><span class='line'>       Finished verifying &lt;default-centos-65&gt; (0m1.30s).
</span><span class='line'>-----&gt; Kitchen is finished. (0m2.12s)
</span></code></pre></td></tr></table></div></figure>


<h3>kitchen test</h3>

<p>いままでやってきたことを全工程流す。</p>

<figure class='code'><figcaption><span>test/integration/default/bats/rbenv_installed.bats    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ kitchen veryfy default-centos-65
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>既存のインスタンスがあれば廃棄する</li>
<li>インスタンス作成</li>
<li>Chefのインストール</li>
<li>レシピのインストール</li>
<li>テストの実行</li>
<li>インスタンスの廃棄</li>
</ul>


<h3>感想</h3>

<p>test kitchenよい。でも初回遅い。boxが最初ないと更に遅い。この辺はVagrantをDockerに変えるというアプローチがあるとおもうが気軽ではない感じかも。しばらく使ってみる!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yohoushi Chef Cookbook作った]]></title>
    <link href="http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook/"/>
    <updated>2014-01-15T20:35:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yohoushi/chef-yohoushi">chef-yohoushi</a> を作った。YohoushiをChefでインストールするクックブック。</p>

<!--more-->


<p>ユーザ作成、データベースマイグレーション、Yohoushiリポジトリをgit cloneしてというところまでやってくれます。RubyのbuildとかMySQLサーバのインストールとかはクックブックの範囲外にしてて別クックブックと組み合わせて使ってください。</p>

<p>またサービスの再起動とかchkconfig的なところはレシピに書いてない。その辺やろうとすると諸々yack shavingになるので今時点ではインストールだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefでtd-agentをインストールしたメモ + knife solo cook実行時エラーにはまったメモ]]></title>
    <link href="http://orihubon.com/blog/2014/01/08/install-td-agent-by-chef-and-install-error/"/>
    <updated>2014-01-08T21:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2014/01/08/install-td-agent-by-chef-and-install-error</id>
    <content type="html"><![CDATA[<p>td-agentを<a href="https://github.com/treasure-data/chef-td-agent/">treasure-data/chef-td-agent</a>のChefレシピを使ってVagrantの仮想マシンに適用したメモです。</p>

<!-- more -->


<h3>準備</h3>

<p>chefとknife-soloをインストール</p>

<pre><code>$ gem install chef
$ gem install knife-solo
</code></pre>

<h3>Chefレポジトリ作成</h3>

<pre><code>$ knife solo init chef-test-repo
$ cd chef-test-repo/
</code></pre>

<h3>chef-td-agentをBerkshelfでインストール</h3>

<p>Berkshelf = gemでいうところのbundler(とrubygems)みたいなもの。</p>

<p>berkshelfコマンドのインストール。bundler経由でインストールした。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>source &#39;https://rubygems.org&#39;
</span><span class='line'>gem &#39;berkshelf&#39;
</span></code></pre></td></tr></table></div></figure>


<p>インストール</p>

<pre><code>$ bundle install
</code></pre>

<p>Berksfileにインストールするクックブックを定義</p>

<pre><code>site :opscode
cookbook 'td-agent', git: 'https://github.com/treasure-data/chef-td-agent.git'
</code></pre>

<p>berks installでクックブックをインストール。<code>--path</code>で<code>cookbooks</code>以下に。</p>

<pre><code>$ bundle exec berks --path cookbooks
</code></pre>

<h3>knifeコマンドで対象マシンの定義を作る</h3>

<p>knifeコマンドで対象マシンへchef soloをインストールしつつ、定義ファイル(json)を作る。</p>

<pre><code>$ knife solo prepare chef-test.local
  =&gt; chef-test.local に chef solo がインストールされる
  =&gt; nodes/chef-test.local.json が作られる
</code></pre>

<p>nodes/chef-test.local.jsonのrun_listにtd-agentを加える</p>

<figure class='code'><figcaption><span>nodes/chef-test.local.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>{&quot;run_list&quot;:[&quot;td-agent&quot;]}
</span></code></pre></td></tr></table></div></figure>


<h3>レシピ適用!!!</h3>

<p>以下を実行することで、td-agent実行ユーザ、グループの作成、td-agentのインストール、設定ファイル配置、起動登録、起動といったことをやってくれます。</p>

<pre><code>$ knife solo coook chef-test.local
</code></pre>

<p>&hellip;とここで楽勝終わる予定だったのですが、途中でエラーが出て止まってしまいました。</p>

<h3>package td-agent が途中で止まる</h3>

<figure class='code'><figcaption><span>nodes/chef-test.local.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>knife solo cook cheftest.local
</span><span class='line'>Running Chef on cheftest.local...
</span><span class='line'>Checking Chef version...
</span><span class='line'>Installing Berkshelf cookbooks to &#39;cookbooks&#39;...
</span><span class='line'>Installing td-agent (0.0.1) from git: &#39;https://github.com/treasure-data/chef-td-agent.git&#39; with branch: &#39;master&#39; at ref: &#39;d29d3f78bc2ffe991c63d56cbf8521eda6fdeb35&#39;
</span><span class='line'>
</span><span class='line'>(..snip..)
</span><span class='line'>
</span><span class='line'>Recipe: td-agent::default
</span><span class='line'>  * template[/etc/td-agent/td-agent.conf] action create (up to date)
</span><span class='line'>  * package[td-agent] action upgrade
</span><span class='line'>
</span><span class='line'>================================================================================
</span><span class='line'>Error executing action `upgrade` on resource &#39;package[td-agent]&#39;
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Chef::Exceptions::Exec
</span><span class='line'>----------------------
</span><span class='line'> returned 1, expected 0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Resource Declaration:
</span><span class='line'>---------------------
</span><span class='line'># In /home/vagrant/chef-solo/cookbooks-2/td-agent/recipes/default.rb
</span><span class='line'>
</span><span class='line'> 60: package &quot;td-agent&quot; do
</span><span class='line'> 61:   options value_for_platform(
</span><span class='line'> 62:     [&quot;ubuntu&quot;, &quot;debian&quot;] =&gt; {&quot;default&quot; =&gt; &quot;-f --force-yes&quot;},
</span><span class='line'> 63:     &quot;default&quot; =&gt; nil
</span><span class='line'> 64:   )
</span><span class='line'> 65:   action :upgrade
</span><span class='line'> 66: end
</span><span class='line'> 67:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Compiled Resource:
</span><span class='line'>------------------
</span><span class='line'># Declared in /home/vagrant/chef-solo/cookbooks-2/td-agent/recipes/default.rb:60:in `from_file&#39;
</span><span class='line'>
</span><span class='line'>package(&quot;td-agent&quot;) do
</span><span class='line'>  action [:upgrade]
</span><span class='line'>  retries 0
</span><span class='line'>  retry_delay 2
</span><span class='line'>  package_name &quot;td-agent&quot;
</span><span class='line'>  version &quot;1.1.18-0&quot;
</span><span class='line'>  cookbook_name :&quot;td-agent&quot;
</span><span class='line'>  recipe_name &quot;default&quot;
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[2014-01-08T12:23:00+00:00] ERROR: Running exception handlers
</span><span class='line'>[2014-01-08T12:23:00+00:00] ERROR: Exception handlers complete
</span><span class='line'>[2014-01-08T12:23:00+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
</span><span class='line'>Chef Client failed. 4 resources updated
</span><span class='line'>[2014-01-08T12:23:00+00:00] ERROR: package[td-agent] (td-agent::default line 60) had an error: Chef::Exceptions::Exec:  returned 1, expected 0
</span><span class='line'>[2014-01-08T12:23:00+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
</span><span class='line'>ERROR: RuntimeError: chef-solo failed. See output above.gg
</span></code></pre></td></tr></table></div></figure>


<p>調べたところ、<code>yum install td-agent</code>がgpgcheckで失敗していた。</p>

<pre><code>$ yum -d0 -e0 -y install td-agent-1.1.18-0
Package td-libyaml-0.1.4-1.x86_64.rpm is not signed
</code></pre>

<p>お、バグかな?とおもったらKnown Issueでした。<a href="https://github.com/treasure-data/td-agent/issues/43">Apply signature to rpm /deb</a>。<strong>(2013/01/15 追記) rpmが更新されて問題は解消しました</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-deriveで単位時間あたりの差分値を計算する]]></title>
    <link href="http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released/"/>
    <updated>2013-12-23T14:57:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/niku4i/fluent-plugin-derive">fluent-plugin-derive</a> というFluentd outputプラグインをリリースしました。</p>

<!--more-->


<p>gemコマンドからインストールできます。</p>

<pre><code>$ gem install fluent-plugin-derive
</code></pre>

<p>何をするplug-inかというと、端的にいうと受け取ったrecordの前回分の値(timestamp, key, value)をキャッシュし2回目受信したrecordとの差(per second rate)をre-emitします。</p>

<p>例えばSNMPで取得するInterfaceのカウンタ値(バイトカウンタ)をFluentd内でbpsに変換するといったことで使えます。計算値を任意の値で掛け算したり割り算したりできるので、毎秒以外にも毎時や毎分にすることもできます。</p>

<h3>設定</h3>

<pre><code>&lt;match foo.bar.**&gt;
  type derive
  add_tag_prefix derive
  key1 foo_count *1000
  key2 bar_count *1000
&lt;/match&gt;
</code></pre>

<h3>例</h3>

<p>こういう入力があったとして&hellip;</p>

<pre><code>2013-12-19 20:01:00 +0900 foo.bar: {"foo_count":  100, "bar_count":  200}
2013-12-19 20:02:00 +0900 foo.bar: {"foo_count":  700, "bar_count": 1400}
2013-12-19 20:03:10 +0900 foo.bar: {"foo_count":  700, "bar_count": 1470}
2013-12-19 20:04:10 +0900 foo.bar: {"foo_count": 1300, "bar_count":  870}
</code></pre>

<p>こう出力されます。</p>

<pre><code>2013-12-19 20:01:00 +0900 derive.foo.bar: {"foo_count":   nil, "bar_count":    nil}
2013-12-19 20:02:00 +0900 derive.foo.bar: {"foo_count": 10000, "bar_count":  20000}
2013-12-19 20:03:10 +0900 derive.foo.bar: {"foo_count":     0, "bar_count":   1000}
2013-12-19 20:04:10 +0900 derive.foo.bar: {"foo_count": 10000, "bar_count": -10000}
</code></pre>

<p><code>*1000</code>の部分はオプションで指定しないこともできます。上の例では差分値を1000倍しました。例えば<code>*8</code>にするとバイトバイトカウンタをbpsに変換できます。演算子は<code>*</code>と<code>/</code>をサポートしています。また、他にも<code>min</code>,<code>max</code>オプションで最小値、最大値を指定できます。カウンタ値がリセットされると値がマイナスになるので<code>min 0</code>にして使っています。</p>

<h3>作った理由</h3>

<p>ちなみにRRDToolやGrowthForecastを使っている場合はプラグインでやらずともRRDTool側でderiveをサポートしているのでカウンタ値をそのままつっこめばよいです。わざわざ途中で計算する必要はありません。GrowthForecastの場合はsubtractモードだけでもよいかもしれません。</p>

<p>ではなぜFluentd側で計算しているのかというと、1つはカウンタ値よりもbpsの方が扱いやすかったかで、Fluentdで閾値設定したり解析したりと二次用途に使いやすくなります。</p>

<p>もう1つはFluentdで生のカウンタ値を流してRRDへ格納する場合、取得して格納するまでに若干時差が発生するので、カウンタ値のようなderiveな値だとRRDへの値格納が少し遅れたり早かったりすると差分値が実際より大きくなったり小さくなったり揺れてしまいました。そのためderiveプラグインを作ってカウンタ値を取得した瞬間に計算するようにしました。</p>

<p>なお注意点としては、Fluentdではメッセージの到着順が保証されている訳ではないので、秒単位でメッセージがinされるようなタグに対しては正しく計算でき無い場合があるのでそのようなケースでは使えません。分毎に1メッセージがinされるとかそういうったタグ向けです。</p>

<p>作る前に既存プラグインを探してみましたが、前回値との差分を計算してくれるプラグインがなかったので自作に至りました。</p>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[親プロセスと子プロセスでTCPソケットを共有したらどうなるか]]></title>
    <link href="http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal/"/>
    <updated>2013-12-11T19:53:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal</id>
    <content type="html"><![CDATA[<p>前回の<a href="http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/">Redisクライアントでforkするときは子プロセスでrecoonectする</a>の続き。では<a href="https://github.com/fluent/fluent-logger-ruby">fluent-logger-ruby</a>だとどうなるの? ってことで社内の同僚に質問してみました。色々なところでも書かれてますし混ざるんですよね。以下のコードは書かない方が良いってこと。</p>

<!-- more -->


<h3>サンプルコード</h3>

<figure class='code'><figcaption><span>このコードは一見動くけどよくない</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fluent-logger&#39;</span>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="ss">Fluent</span><span class="p">:</span><span class="ss">:Logger</span><span class="o">::</span><span class="no">FluentLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="ss">:host</span><span class="o">=&gt;</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">:port</span><span class="o">=&gt;</span><span class="mi">24224</span><span class="p">)</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;myapp.access&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;agent&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo&quot;</span><span class="p">})</span>     <span class="c1"># socket(A) が確立される</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>                                        <span class="c1"># socket(A)は子プロセスにもコピーされる</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;myapp.access&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;agent&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo&quot;</span><span class="p">})</span>   <span class="c1"># socket(A)に書き込む</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>質問してみた</h3>

<p>社内のIRCでちらっと聞いてみたところ同僚から助言いただきました。</p>

<pre><code>18:36 nikushi: forkしてTCPソケットを親、子で使いまわすの
18:38 sonots: 同じソケットを、並列で利用したら、混ざってることになるけど
18:39 nikushi: ふむふむ
..snip..
18:41 nikushi: ぼくがおもったのは、TCPのデータペイロードの中(つまりmsgpackのところ)
18:41 nikushi: が壊れるのかなーとおもったけど。
..snip..
18:47 sonots: RST 受け取ったとき、どのプロセスが close するの？
18:48 sonots: ruby 的には Errno::ECONNRESET
18:49 sonots: proc1 が close しようとする前に、proc2 がデータ送っちゃったりするでしょ？
18:49 sonots: ということを言いたい
18:50 hirose31: 親子で共用するの辞めたほうがいいんじゃないのかなｗ
18:57 hirose31: 一般的にやるべきじゃないと思いますよ
19:06 hirose31: APUEに書いてないかな。。
19:11 hirose31: If both parent and child write to the same descriptor, 
      without any form of synchronization, such as having the parent 
      wait for the child, their output will be intermixed 
      (assuming it’s a descriptor that was open before the fork). 
      Although this is possible—we saw it in Figure 8.2—it’s 
      not the normal mode of operation.
19:11 hirose31: だそうな
19:11 hirose31: p232
</code></pre>

<p>APUEによると、可能ではあるが出力が混ざる、通常のオペレーションではない。という記述がありました。@hirose31++</p>

<p>またクライアントの実装によっては再接続処理で変になったり、意図しない挙動になりそうですね。</p>

<p>APUEことAdvanced Programming in the UNIX Environment 3rd Editionについては、(ひ)メモの<a href="http://d.hatena.ne.jp/hirose31/20130731/1375248744">『詳細UNIXプログラミング』の原書『Advanced Programming in the UNIX Environment</a>に紹介がありますので興味がある人か買うといいですね。私もこの機会に買いました。</p>

<h3>まとめ</h3>

<pre><code>19:08 sonots: TCPコネクション１本で並列処理する方法があれば、知りたい感はあります。
19:08 nikushi: SPDY w
19:13 sonots: まさにSPDY
19:12 hirose31: まさにSPDY
19:13 sonots: ふむふむ、それを想定したプロトコル設計にしないといけないわけか
19:13 nikushi: きょうの結論!
</code></pre>

<p>@hirose31先生, @sonots ありがとうございました。以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisクライアントでforkするときは子プロセスでrecoonectする]]></title>
    <link href="http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/"/>
    <updated>2013-12-11T16:24:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby</id>
    <content type="html"><![CDATA[<p>Redisクライアントインスタンスを親プロセスで作った後、forkし子プロセス側でGETとSETしても大丈夫だっけ? とおもったのでRubyの<a href="https://github.com/redis/redis-rb">redis-rb</a>で実験しました。結論としてはfork後に子プロセス側でクローズして再確立すれば良いです。</p>

<!-- more -->


<p>以下のケースは動かない。</p>

<figure class='code'><figcaption><span>bad case</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>       <span class="c1"># 親プロセスがRedisサーバとコネクション確立</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>     <span class="c1"># 子プロセスがgetしようとすると...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>例外が発生。子プロセスからコネクションを利用しようとしたので怒られる。</p>

<pre><code>=&gt; ..snip.. redis/client.rb:285:in `ensure_connected': Tried to use a connection from a child process without reconnecting. You need to reconnect to Redis after forking. (Redis::InheritedError)
</code></pre>

<p>fork後にreconnectするように言われるのでそのとおりします。以下はOKです。</p>

<figure class='code'><figcaption><span>works!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">reconnect</span>
</span><span class='line'>  <span class="n">redis</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のコードではTCPを使うのでtcpdumpでパケットを確認してみたところ、子は自分用のTCPコネクションを確立することを確認しました。</p>

<p>昔々Cでforkしてsocket read/writeするプログラムを書いたのを思い出しました。forkした後に複数プロセスで同じソケットを使ってはいけないので片方はクローズする、であってますかね。以上です!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SNMPのindexキャッシュによる取得時間短縮の検証]]></title>
    <link href="http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast/"/>
    <updated>2013-12-06T14:47:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast</id>
    <content type="html"><![CDATA[<p>ルータやサーバのインタフェースのbpsを測定する場合、SNMPのifDescr, ifHCInOctets, ifHCOutOctetsこの3つのMIBを取得すれば良いわけですが、ifDescrを毎回取得するの無駄だなとおもったので測定してみました。</p>

<!--more-->


<p>ifDescr, ifHCInOctets, ifHCOutOctetsをsnmpwalkする場合と、ifDescr(ifIndex)をキャッシュしifHCInOctets, ifHCOutOctetsをsnmpgetする場合で比較します。</p>

<h3>ベンチスクリプト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;snmp&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;creating cache&quot;</span>
</span><span class='line'><span class="n">indexes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>  <span class="n">manager</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="sx">%w(ifIndex)</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="n">indexes</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;walk&quot;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>      <span class="n">manager</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="sx">%w(ifDescr ifHCInOctets ifHCOutOctets)</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;cache with get&quot;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">SNMP</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="ss">community</span><span class="p">:</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>      <span class="n">indexes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="n">manager</span><span class="o">.</span><span class="n">get_value</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;ifHCInOctets.</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;ifHCOutOctets.</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際はlocalhostではなくNICをたくさん持った機器を指定。またベンチスクリプトでは簡略してifIndexだけキャッシュしてます。</p>

<h3>結果</h3>

<p>当然といえば当然ですがbind variablesの数がwalk=3個、get=2個なのでgetが早い。26%早くなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">walk</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">.</span><span class="mi">850000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">210000</span>   <span class="mi">1</span><span class="o">.</span><span class="mo">060000</span> <span class="p">(</span> <span class="mi">11</span><span class="o">.</span><span class="mi">343248</span><span class="p">)</span>
</span><span class='line'><span class="n">index</span> <span class="n">cached</span> <span class="n">get</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">.</span><span class="mi">710000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">210000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">920000</span> <span class="p">(</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">387955</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>デメリット</h3>

<p>キャッシュのデメリットもあります。インデックス番号は主キーになりますが、主キーに対する実態が変わってしまう場合がありえます。Linuxでインタフェースを増やしたり減らしたり、リブートしたりしてみたところ、主キーに対する実態が変わることが分かりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">こういう状態で</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">4</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">veth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">5</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">veth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="n">veth0</span><span class="p">,</span><span class="n">veth0</span><span class="err">を消した</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="n">eth1</span><span class="o">.</span><span class="mi">200</span><span class="err">を追加した</span><span class="p">(</span><span class="mi">4</span><span class="err">ではなく</span><span class="mi">7</span><span class="err">が選ばれた</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">snmpwalk</span> <span class="o">-</span><span class="n">c</span> <span class="kp">public</span> <span class="o">-</span><span class="n">v</span> <span class="mi">2</span><span class="n">c</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">10161</span> <span class="n">ifDesc</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">6</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">7</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="err">リブートした後</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">1</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">lo</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">2</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth0</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">3</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">4</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">100</span>   <span class="c1"># 以前は 4 は veth0 だった!!!!!</span>
</span><span class='line'><span class="no">IF</span><span class="o">-</span><span class="ss">MIB</span><span class="p">:</span><span class="ss">:ifDescr</span><span class="o">.</span><span class="mi">5</span> <span class="o">=</span> <span class="ss">STRING</span><span class="p">:</span> <span class="n">eth1</span><span class="o">.</span><span class="mi">200</span>   <span class="c1"># 以前は 5 は veth1 だった!!!!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ciscoなどではindex値を固定化するオプションが有効という情報もありますので、ベンダによるみたい。</p>

<p>ちなみに、Cactiではindexキャッシュを動的にリフレッシュする仕組みがあって<a href="http://www.cacti.net/downloads/docs/html/cli_poller_reindex_hosts.html">こちら</a>のドキュメントによると、</p>

<ul>
<li>アップタイム(sysUptime)が小さくなった(再起動)ら強制的にindexキャッシュを更新</li>
<li>indexの総数が変わった場合(たとえばifIndexの中の個数が変わった場合)。インタフェースなどのケース。</li>
<li>全フィールドを検証する(?) Macアドレスなどがこのケース。エントリに変化があればキャッシュ削除ってことですかね。</li>
</ul>


<p>インタフェースにに限ればCactiをまねてアップタイムとインデックスの個数を見て判定すれば上手くいきますね。</p>

<p>しかしSNMP、何十年前の技術をいつまで使うんだ!!と毎度おもってしまいます。snmpwalk時間かかるし&hellip;.。</p>

<p>以上です!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdのマルチプロセス化が簡単になったので試してみた!]]></title>
    <link href="http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/"/>
    <updated>2013-12-06T08:35:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin</id>
    <content type="html"><![CDATA[<p>ワイワイ! <a href="http://qiita.com/advent-calendar/2013/fluentd">Fluentd Advent Calendar 2013</a> 6日目担当の <a href="http://twitter.com/niku4i">@niku4i</a> です。</p>

<!--more-->


<p>今日はFluentdのマルチプロセス化について。最近公式ページに <a href="http://docs.fluentd.org/articles/in_multiprocess">Multiprocess Input Plugin</a> がドキュメント化されました。</p>

<p>Fluentdはシングルプロセスで動作するため、マルチコアなサーバ環境下では全コアのCPUを消費できません。Fluentd1プロセスでも小〜中規模の環境であれば十分さばけますが、大規模環境ではCPUが足りなくなります。そこでCPUを効率的に使うため、一昔前までは起動スクリプトをコア数に応じて用意しマルチプロセス化するといった手法を用いていましたが手軽にはできませんでした。</p>

<p>そこで最近登場したのが <a href="https://twitter.com/frsyuki">@frsyuki</a> さん作の <a href="http://docs.fluentd.org/articles/in_multiprocess">Multiprocess Input Plugin</a> です。ネット上に試した記事がなかったので試してみました。</p>

<p>Fluentdは0.10.41を使っています。gemコマンドでインストールしました。</p>

<h3>インストール</h3>

<p>Fluentdのコアプラグインではないので、fluent-gemコマンドを使ってインストールします。</p>

<figure class='code'><figcaption><span>install plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fluent-gem install fluent-plugin-multiprocess
</span></code></pre></td></tr></table></div></figure>


<p>なお、td-agent版の場合はコマンドのパスが通っていないので以下のとおりインストールしてください。</p>

<figure class='code'><figcaption><span>install plugin (td-agent user)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-multiprocess
</span></code></pre></td></tr></table></div></figure>


<h3>コンフィグレーション</h3>

<p>今回は4プロセスでそれぞれ24221〜24224/TCPでListenし受信したメッセージを標準出力に書き出す設定を作りました。書き出し部分は全プロセス共通なので <code>include</code> で1つにまとめました。非常に簡単な設定例なので面白みがないですが実際はinclude先にout系の設定を入れていくことになります。</p>

<figure class='code'><figcaption><span>/etc/fluent/fluentd.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> multiprocess
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child1.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child2.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child3.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;process&gt;</span>
</span><span class='line'>    <span class="nb">cmdline</span> -c <span class="sx">/etc/fluent/fluentd_child4.conf</span>
</span><span class='line'>    <span class="nb">sleep_before_start</span> <span class="m">1</span>s
</span><span class='line'>    <span class="nb">sleep_before_shutdown</span> <span class="m">5</span>s
</span><span class='line'>  <span class="nt">&lt;/process&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cmdline</code>にマルチプロセス化した時の子プロセスに読み込ませるコンフィグファイルを指定します。このコンフィグは以下のように記述します。</p>

<figure class='code'><figcaption><span>/etc/fluent/fluentd_child1.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Receive events from TCP port</span>
</span><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> <span class="m">24221</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Include common configurations</span>
</span><span class='line'><span class="nb">include</span> conf.d/*.conf
</span></code></pre></td></tr></table></div></figure>


<p>fluentd_child[2-4].confのコンフィグ掲載は省略しますが <code>port</code> の番号のみ変更します。</p>

<p>includeしたコンフィグで出力を定義しました。</p>

<figure class='code'><figcaption><span>/etc/fluent/conf.d/match_all.conf </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Output messages to STDOUT</span>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">**</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> stdout
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>起動</h3>

<p>今回はコマンドラインから起動します。</p>

<p><code>$ fluentd -c fluent/fluentd.conf</code></p>

<p><a href="https://gist.github.com/niku4i/7802190">起動ログ</a>を見ると親fluentdプロセスが子fluentdを立ち上げていることが分かります。</p>

<figure class='code'><figcaption><span>起動ログ抜粋</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2013-12-05 08:45:30 +0000 <span class="o">[</span>info<span class="o">]</span>: launching child fluentd -c /etc/fluent/fluentd_child4.conf
</span></code></pre></td></tr></table></div></figure>


<p>netstatコマンドを使って確認しました。確かに4ポートでListenしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo netstat -anpt | grep -e ruby -e Proto
</span><span class='line'>Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name
</span><span class='line'>tcp        0      0 0.0.0.0:24221               0.0.0.0:*                   LISTEN      25160/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24222               0.0.0.0:*                   LISTEN      25143/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24223               0.0.0.0:*                   LISTEN      25126/ruby
</span><span class='line'>tcp        0      0 0.0.0.0:24224               0.0.0.0:*                   LISTEN      25108/ruby
</span></code></pre></td></tr></table></div></figure>


<h3>追記: -i オプションによる動的リッスンポート切替</h3>

<p><em>2013/12/19 追記</em></p>

<p>あまり知られていないですがFluentdには<code>-i</code>という起動オプションがあり<code>-i</code>に続いてコンフィグを記述することができます。以下のようにすればinput forwardでリッスンするポートをプロセス毎に変えることができます。ポート番号などプロセス固有の設定は<code>-i</code>で渡すことで同じ設定ファイルで異なる挙動ということも実現できますね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;<span class="nb">source</span>&gt;
</span><span class='line'>  <span class="nb">type </span>multiprocess
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20000\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20001\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>  &lt;process&gt;
</span><span class='line'>    cmdline -i <span class="s2">&quot;&lt;source&gt;\ntype forward\nport 20002\n&lt;/source&gt;&quot;</span> -c /etc/fluentd/fluentd.conf
</span><span class='line'>    sleep_before_start 1s
</span><span class='line'>    sleep_before_shutdown 1s
</span><span class='line'>  &lt;/process&gt;
</span><span class='line'>&lt;<span class="nb">source</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>Multiprocess Input Pluginにより簡単にマルチプロセス化することができました。</p>

<p>気になる安定性などに関して、<a href="https://groups.google.com/forum/#!topic/fluentd/syXPqRAE-4w">Fluentdのメーリングリスト上の議論</a> によると 10+ billion records / day 環境下に投入しているユーザ事例もあるようです!</p>

<p>話はそれますが、Fluentdを使っている人やこれから使ってみようという人は <a href="http://docs.fluentd.org/ja/articles/mailing-list">Fluentdのメーリングリスト</a> にjoinすることをオススメします!(自分はもっぱら読むだけ専門ですが) メールは基本英語ですが流し読みするだけでも有益な情報を拾えたり、リリース状況をタイムリーに知ることができます。また、最近では海外のエンジニアの間でも知られるようになってきており、海外でのユースケースなど知れるかもしれません。個人的には英語の勉強にもなるので両得だとおもっています。コミュニティについては@tagomorisさんの<a href="http://tagomoris.hatenablog.com/entry/2013/12/03/150656">Fluentdとはどのようなソフトウェアなのか</a>の中で詳しく書かれていますね。</p>

<p>またFluentdの<code>-i</code>オプションを紹介しました。</p>

<p>簡単ではありましたが以上です。</p>

<p>すごい知った風でしたがgemの使い方を紹介しただけでした。最近Fluentdにふれる機会がなかったので、ユースケースを開拓してFluentdを積極的に使ってアウトプットしていきたいですね。</p>

<p>次は、<a href="https://twitter.com/yteraoka">@yteraoka</a> さんです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubの組織が成長する過程で変えたことと変えなかったこと、のメモ]]></title>
    <link href="http://orihubon.com/blog/2013/11/20/github-memo/"/>
    <updated>2013-11-20T12:04:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/11/20/github-memo</id>
    <content type="html"><![CDATA[<p><a href="http://wazanova.jp/items/675">GitHubの組織が成長する過程で変えたことと変えなかったこと</a>を読んで、良いこと書いててたのでブログに引用する。</p>

<!--more-->


<blockquote><p>情報は抱えないで、wiki / chat などを使ってとにかく共有する。社内の特定の人だけに情報が留まるとセクショナリズムにつながる。（追記: 短く意訳してますが、ビデオでは「このことは専門であるあの人に聞かなくてはいけないという意味のない権威主義がはびこるので組織が硬直する。」的な説明がされてます。）</p></blockquote>

<p>特定の人に聞かないと分からない、権威的になっている状態はあるあるですね。そこで属人的になってるから脱却しようと上司が声高々に&#8221;明文化しよう!!!&ldquo;というだけじゃダメなんだろうな&hellip;とおもうわけです。この記事のこのポイントだけ切り出すと単純な話なのですが、Githubの透明性といった文化がある前提なので、他社で単純に明文化だけ取り入れてもうまく行かないかもしれませんね。</p>

<blockquote><p>新入社員はGithubイシュー、チャットログ、pull requestとか読んで、自然と学ぶから邪魔しない。情報はアクセスできるようにするが、時間かけて教え込んだりしない。しかし、この放置する方式だけでは、Githubという組織に早く慣れ親しむのは無理があるので、最近は、最初の１週間はサンフランシスコのオフィスに呼んで、バディ（メンター）をアサインしている。バディの期間をもう少し長くすることも検討中。</p></blockquote>

<p>最初の1週間、集中的にコミュニケーションとるのは良さげ。でも新卒だったらどうするかな。</p>

<blockquote><p>153のチャットルームがある。実際のオフィスと違ってつくるのは安いし、全てのチャットルームに参加するわけでなく、個人単位で選択して参加することで適宜最適化できるので、一時的なものも含めて積極的にルームをつくるようにしている。チャットルームで名前が@でメンションされるとモバイル/デスクトップにpush notificationが飛んでくる。必要なときに連絡がくるが、答えられるときに反応すればよいという非同期スタイル。</p></blockquote>

<p>チャットツール何使ってるんだろう。IRCではないことは確かだ&hellip;!</p>

<blockquote><p>テクノロジーでなくてプロダクトが最先端のいいものであるべき。Ruby, C, git, MySQL, Memcachedというシンプルな構成に絞っている。最新のテクノロジーが会社を成功させるわけではない、どうワークフローをどのように信頼できるテクノロジーとツールでつくりあげていくかがもっと大事。システムを安定して運営できるということは素敵なこと。</p>

<p>役割を増やしたチームを新設して組織を無駄に肥大化させるのでなく、ツールを活用して解決できることも多い。組織を無駄に肥大化させるような昔からの固定観念は疑ってかかるべき。会社は成長する過程では変わらなければいけない。しかし、バリューは変えてはいけない。</p></blockquote>

<p>そうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スロークエリをMySQL再起動せずオンラインで調査する]]></title>
    <link href="http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql/"/>
    <updated>2013-11-05T10:11:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql</id>
    <content type="html"><![CDATA[<p>スロークエリをログに吐く方法。設定ファイル修正する必要はなかった。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; set global slow_query_log = 1;
</span><span class='line'>mysql&gt; set global slow_query_log_file = '/tmp/slowquery.log';
</span><span class='line'>mysql&gt; set global long_query_time = 0; # 0秒にセットすると全queryをロギング</span></code></pre></td></tr></table></div></figure>


<p>調査が終わったら<code>slow_query_log = 0</code>にするのを忘れないように。本番環境とかでやるとログがぶくぶく太るのでやらないほうが良いでしょう。</p>

<p>ログの解析はmysqldumpslowコマンドで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqldumpslow /tmp/slowquery.log</span></code></pre></td></tr></table></div></figure>


<p>なお、コネクションプーリングしている場合は新規コネクションから有効になるようです。アプリを再起動しないと反映されないです。mysqlコマンドから設定した場合も<code>show variables like 'long_query_time';</code>やっても値が反映されていないように見えますが、再接続すると確認できました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3予選の記録]]></title>
    <link href="http://orihubon.com/blog/2013/10/07/isucon3-yosen/"/>
    <updated>2013-10-07T10:38:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/07/isucon3-yosen</id>
    <content type="html"><![CDATA[<p><a href="http://isucon.net/archives/29328289.html">ISUCON3</a>予選に参加しました。</p>

<!--more-->


<p>チームは会社の同僚の<a href="https://twitter.com/sonots">@sonots</a>さん、<a href="https://twitter.com/Spring_MT">@Spring_MT</a>さん3名(チーム Miami)、予選は10/5(土), 10/6(日)に分かれていて僕たちは2日目に参加しました。</p>

<p>長時間の作業になるので会社で作業しました。僕は朝から興奮してしまって1時間前に会場入りして素振りしてましたが。</p>

<h4>お題アプリ</h4>

<p>githubのgistの機能ライクなメモアプリでした。</p>

<h4>最終的な構成</h4>

<p>nginx + unicorn + MySQL + InnoDB memcached plugin</p>

<h4>午前 &ndash; スタート</h4>

<h5>10:00</h5>

<p>まず、インスタンスによってCPUのモデルに差異があるかもしれないのでメンバ3人それぞれインスタンスを作成しCPUのモデルを確認しましたが結局偏りはありませんでした。</p>

<h5>10:30</h5>

<p>僕はwebappをgithub.comにgit pushしたり、予め用意しておいたカーネルチューニング(とってもネットワーク周りを少しだけ)をしてました。</p>

<h5>11:00</h5>

<p>my.cnf書き換えてslow query logを出すように修正。最初にベンチ走らせてスコアが800ほど。あまり大きなslow queryはありませんでした。</p>

<h5>10:20</h5>

<p>他の2名がリードしてくれてる状況なので、僕何からやろうかなという状態。とりあえずもう一度ドキュメント読んで注意点を確認しました。<code>--workload</code>これは重要なのでチームに周知しときました:) 他のチームでこれ忘れてる人結構ありましたね。</p>

<p>また、<a href="http://miniprofiler.com/">rack-mini-profiler</a>を導入して遅いページを探しました。これ便利ですね。</p>

<p>変更点</p>

<ul>
<li>nginx導入。public_htmlをnginxで返すよう変更</li>
<li>memo POST時にgem_markdown呼び出してmarkdownからHTMLに変換。表示時に都度HTMLコンバートするのをやめた</li>
<li>N+1問題。<code>memos</code>テーブルだけで完結するようにするため、<code>memos</code>テーブルに<code>username</code>フィールドを追加することにした。</li>
<li>複合インデックスを入れてパフォーマンス改善</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create index user_create_at_index on memos (user, created_at);
</span><span class='line'>create index user_is_private_created_at_index on memos (user, is_private, created_at);</span></code></pre></td></tr></table></div></figure>


<p>クエリの改善系は僕も対応しました。1つ、2つ改善できてホッとしました。</p>

<h5>13:30</h5>

<p>コンビニ飯</p>

<h4>午後 &ndash; 伸び悩み</h4>

<p>クエリを改善し、nginx + unicornの構成にしスコアは上がりましたが、午後はこの後どうしようか悩む時間でした。</p>

<p>前回isucon2ではVarnishを入れることで劇的にスコアアップできた事例がありましたので、Varnish対応を始めましたがVarnish作戦は結局失敗でした。recentページがキャッシュしにくい(olderとnewerのリンク)構成であったという点&hellip;と認識しています。あとセッションのバリデーションでベンチがコケたみたい。(このへんは僕やってないからもやっとしてる)</p>

<p>より詳細なプロファイリングのためNewRelicも入れてプロファイリング(by Spring_MTさん)。トップページとrecentが70ms程度かかっている状況で以下のクエリがある以上この程度かかるのかな&hellip;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT id, first_sentence, username, created_at FROM memos WHERE is_private=0 ORDER BY id DESC LIMIT 100 OFFSET #{page * 100}</span></code></pre></td></tr></table></div></figure>


<p>indexは効かせていたのでこのSELECTやめて別のアプローチをとればスコアアップ狙える、逆にいうとこれ改善しないと上位には入れないよね、というのがチームの午後の課題でしたが最後まで答えを出せずじまいで終わってしまいました。</p>

<p>その他改善したところは以下です。</p>

<ul>
<li>markdown生成のためフォークやめて<a href="https://github.com/vmg/redcarpet">redcarpet</a>使った。でも+500くらい</li>
<li>毎回memoのcontentを<code>.split(/\r?\n/)</code>せず、<code>memos.first_sentence</code>フィールドを作ってmemo POST時に入れるようにした</li>
<li>メモ数をカウントする<code>SELECT count(*) FROM memos</code>をmemdにキャッシュした</li>
<li>sonotsスペシャル => 詳細はsonots blogで</li>
</ul>


<p>最後はログ吐くのをやめてプロファイリングも切って<code>--workload=4</code>くらいにして測定して終了。</p>

<h3>反省点とか所感</h3>

<ul>
<li>memcachedみたいなものには気づかなかった&hellip;</li>
<li>8時間かっとなってコード釘付けになりがちですが、30分くらいはコーヒー飲みながらメンバでディスカッションしてもよかったかも</li>
<li>githubにwebappを上げてpull req方式でコード改修しようとして、実機でコード変えて即ベンチ走らせたい場合もあってmasterがconflictしてしまった。どっちもどっちで難しい。他のチームどうやってるか気になる。</li>
</ul>


<p>ちなみに、自分は普段高負荷環境のWebサービスを運用,開発してる訳ではなくて、Railsで管理系アプリ書いたり監視系ツール作ったりしてる系。始まる前は自分どれだけ対応できるか不安でした。周りのエンジニアや参加者も凄い人たちばかりですし。でも終わってみると参加してよかったです。しんどかったけど。反省会のビールがうまかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yohoushi screencasts!]]></title>
    <link href="http://orihubon.com/blog/2013/10/01/yohoushi-screencasts/"/>
    <updated>2013-10-01T11:37:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/10/01/yohoushi-screencasts</id>
    <content type="html"><![CDATA[<p>グラフツール <a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>を紹介するスクリーンキャストを作ってみた。</p>

<!--more-->


<p><a href="http://yohoushi.github.io/yohoushi/">Yohoushi</a>というグラフツールを<a href="https://twitter.com/sonots">@sonots</a>さんと作っています。Yohoushiを使うと<a href="http://kazeburo.github.io/GrowthForecast/">GrowthForecast</a>に登録したグラフと連携し検索やタギング、グラフ画像の拡大縮小、期間カスタム指定などができます。</p>

<p>会社の同僚の方々からYohoushiがどんなツールかもっと分かりやすく解説してよというコメントをいただきまして、Yohoushiの概要〜インストール、簡単な使い方までをscreencastにしてみました。&#8221;GrowthForecast使ってるからそろそろYohoushiも&hellip;でもYohoushiむずいんでしょ?&ldquo; とおもわれている方にYohoushiの導入の簡単さを分かってもらえる内容になってるとおもいます。</p>

<p>各話3分程度です。エピソード1は概要なのでわかってる方は飛ばしてください。Yohoushiの雰囲気を知るだけならエピソード3、4だけでもおすすめです!</p>

<h4>1 Yohoushiとはなにか?</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZjZjtzyx6Jc "></iframe></div>


<h4>2 Yohoushiをインストールしてみよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mqIR0RClP3o "></iframe></div>


<h4>3 Yohoushiを使ってみよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/q_vMqjpFRUc "></iframe></div>


<h4>4 Yohoushiを使ってグラフにタグをつけよう</h4>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/EV51EmjC74o "></iframe></div>


<h4>補足</h4>

<ul>
<li><p>インストールする際のrakeやbundleは<code>bin/</code>に同封のbinstubの<code>bin/bundle</code>, <code>bin/rake</code>を使ってください。<code>bin/</code>配下のコマンドで実行すると<code>RAILS_ENV=production</code>が自動的にセットされます。パスの通ったコマンドを使ってしまうと<code>RAILS_ENV=development</code>が自動的にセットされるので意図しない動作になるので注意してください。</p></li>
<li><p>GrowthForecastのグラフはscreencast用のダミーで@sonotsさん作の<a href="https://github.com/sonots/growthforecast-client">growthforecast-client</a>を使ってランダム値を定期POSTしてます。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupportのin_groups_ofメソッドでビューが捗る!]]></title>
    <link href="http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention/"/>
    <updated>2013-09-26T19:21:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention</id>
    <content type="html"><![CDATA[<p>ActiveSupportの<code>inc_groups_of</code>メソッドを使ってみたらビューが捗った。</p>

<!--more-->


<p>Arrayクラス拡張であるin_groups_ofメソッドとin_groupsメソッドを使うと簡単に配列をグルーピング化することができます。</p>

<p>例えば、以下の配列データ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(1, 2, 3, 4, 5, 6, 7, 8)</span>
</span></code></pre></td></tr></table></div></figure>


<p>in_groups_ofメソッドをつけて呼び出すと引数指定の数の要素数の小配列をメンバにした配列を返してくれます。また第2引数で空部分に埋める要素指定もできます。デフォルトはnilです。falseを与えるとnilの代わりに要素数を切り詰めます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;none&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使うシーンとしては、ビュー上で指定個数毎でグルーピングして表示したいときに便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>4<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>5<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>6<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;group2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>7<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>8<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>9<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>似たような名前でin_groupsというメソッドもあります。こちらは配列を指定グループ数に分割してくれるメソッドです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="sx">%w(1 2 3 4 5 6 7 8)</span><span class="o">.</span><span class="n">in_groups</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;7&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;8&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>普段Railsやってる人には当たり前かもしれない内容でした。いざ使いたかったときにメソッド名を忘れていたので、以上、自分メモでした!</p>

<p>他にもActiveSupportの拡張は便利なものがあるので<a href="http://edgeguides.rubyonrails.org/active_support_core_extensions.html">Active Support Core Extensions</a>の一読おすすめです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra::Reloader]]></title>
    <link href="http://orihubon.com/blog/2013/08/06/sinatra-reloader/"/>
    <updated>2013-08-06T19:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/08/06/sinatra-reloader</id>
    <content type="html"><![CDATA[<p>Sinatraを久々に使っている。はて、development環境での自動リロードどうやるのだったか。</p>

<!--more-->


<p><a href="http://www.sinatrarb.com/contrib/reloader.html">Sinatra::Reloader</a> を使うと。</p>

<p>実際には<a href="https://github.com/sinatra/sinatra-contrib">sinatra-contrib</a>というgemをinstallするわけだけど、このgemには他にも機能があるので困ったときはこのgemを眺めるとよさそうですね。</p>
]]></content>
  </entry>
  
</feed>
