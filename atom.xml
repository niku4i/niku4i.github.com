<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ni-blog]]></title>
  <link href="http://orihubon.com/atom.xml" rel="self"/>
  <link href="http://orihubon.com/"/>
  <updated>2013-07-09T00:55:44+09:00</updated>
  <id>http://orihubon.com/</id>
  <author>
    <name><![CDATA[niku4i]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Font AwesomeをRailsで使ってみた]]></title>
    <link href="http://orihubon.com/blog/2013/07/09/font-awesome-rails/"/>
    <updated>2013-07-09T00:42:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/09/font-awesome-rails</id>
    <content type="html"><![CDATA[<p><a href="Font%20Awesome">http://fortawesome.github.io/Font-Awesome/</a></p>

<p>Bootstrap向けのicon系Webフォントを提供するライブラリ。</p>

<p>Railsで使うには<a href="font-awesome-rails">https://github.com/bokmann/font-awesome-rails</a>をGemfileに書いて適切にimportすればOKです。</p>

<p>使い方1 &ndash; iタグ使う</p>

<pre><code>&lt;i class="icon-thumbs-up"&gt;&lt;/i&gt; icon-thumbs-up
</code></pre>

<p>TwitterBootstrapであらかじめ用意されているアイコンの使い方と同じです。ただFont Awesomeの場合、画像ではなくフォントとして扱われるのでfont-colorで色を調整したり出来ます。</p>

<p>使い方2 &ndash; CSSのcontentマークアップにユニコードを埋め込む</p>

<pre><code>.thumbs-up {
  font-size: 20px;
  font-family: FontAwesome;
  content: '\F164';
}
</code></pre>

<p>contentの値にユニコードをセットします。ユニコードの値は各アイコンの説明ページに小さく書かれてあります。たとえば<a href="thumbs-up">http://fortawesome.github.io/Font-Awesome/icon/thumbs-up/</a>であればF164をcontentの値にすればOK。また、font-familyにFontAwesomeを指定します。contentで埋め込めるので:beforeなどの疑似要素と組み合わせることでスタイルシートからアイコンをHTMLに埋め込むことも可能です!</p>

<p>という感じで簡単ながらFont Awesomeの紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsFiddleでjavascriptお手軽動作確認]]></title>
    <link href="http://orihubon.com/blog/2013/07/09/jsfiddle-js-test/"/>
    <updated>2013-07-09T00:16:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/09/jsfiddle-js-test</id>
    <content type="html"><![CDATA[<p>Webアプリを作っていると、思いついたUIのアイデアを実装して使用感や見た目を確認したくなることがしばしばあるとおもいます。そんな時はさくっと試せる <a href="http://jsfiddle.net/">jsFiddle</a> がお勧めです!</p>

<p><a href="http://jsfiddle.net/niku4i/5pg4m/">jQuery-UIのaccordion pluginの動作確認をしてみた例</a></p>

<p>使ってみた感想としては、css、html、javascriptのコードをフォームに入力して Run! ボタンを押すだけでとても簡単でした。</p>

<p>また、jsFiddleはgithub.comのgistに近い感覚でJavaScriptやCSSを試すことが出来るので、作った画面をSkypeやIRCで他人と共有できる点が優れています。StackOverflowでjs系で検索すると結構な確率で見ますね。</p>

<p>jQueryなどのライブラリの選択やバージョンの変更も左側のメニューからポチポチやるだけで切り替えれて簡単。</p>

<p>また、Ajax系の動作確認も可能です。サーバサイドのエンドポイントが必要ですが、jsFiddleでは <code>/echo/json/</code>, <code>/echo/html/</code>といったリクエストをresponseとしてechoするダミーのエンドポイントが提供されています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yokohama.ex #2 に参加してきたよ]]></title>
    <link href="http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703/"/>
    <updated>2013-07-03T23:02:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703</id>
    <content type="html"><![CDATA[<p>2013/07/03(水) 開催された <a href="http://www.zusaar.com/event/822004">yokohama.ex #2</a> に参加してきました! 場所はDeNA@渋谷ヒカリエ。</p>

<p>会の趣旨は <a href="http://elixir-lang.org/">elixir-lang.org</a>のGETTING STARTEDをみんなで読んで勉強しましょう、といったところ。</p>

<p>前回(第1回)はyokohama.rbの中でElixir紹介がてらGETTING STARTEDの1章から2.6.4までを読んだ、そうです。僕は参加してませんでしたので今回にあたって密かに一人独習したわけですが、@sonots さんが<a href="https://docs.google.com/presentation/d/1Tl-NTgGiW6V6QCCi2Hy0V81XZTjkAWEC22yTWE8ChP4/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.p">復習資料</a> を作成してくれていて今日の会はこの復習資料からスタート! 英文で読んだ後でまとまった日本語で再度インプットするとすーっと浸みいります。とても助かりました。</p>

<p>今回はSection2.6.5 TryからSection3の最後まで。プロジェクタにホームページの英文を映して代表の人が読みながらサンプルコードをiexで実行、あれこれ言い合う感じで進められていました。</p>

<p>Elixirにもの申すレベルではないのでElixirには言及しませんが、会の進め方については1つ1つ順番に読み進めるスタイルなのでElixir初心者であっても取っ付きやすかったとおもいます!!!</p>

<p>普段Ruby、Perlなどを使ってるので関数型言語の考え方は頭の体操になりました! 英語の速読にも良い会でした:)</p>

<p>次回#3も予定されています。まだ追いつけるとおもますので興味がありましたら次回参加してみたらいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL チートシート]]></title>
    <link href="http://orihubon.com/blog/2013/04/07/mysql-cheat-sheet/"/>
    <updated>2013-04-07T13:04:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/04/07/mysql-cheat-sheet</id>
    <content type="html"><![CDATA[<p>MySQLのマの字も知らないデータベースエンジニアリング初心者なのでチートシートを作った。間違っているところがあれば指摘いただきたい。</p>

<h3>起動</h3>

<pre><code># mysqld_safe --user=_mysql &amp;
</code></pre>

<h3>停止</h3>

<pre><code># mysqladmin -uroot shutdown
</code></pre>

<!-- more -->


<h3>接続</h3>

<h4>接続</h4>

<p>testデータベースへ接続</p>

<pre><code>$ mysql test
</code></pre>

<h4>ユーザ名指指定</h4>

<p>hogeユーザ権限でtestデータベースへ接続。-pではパスワード指定しない</p>

<pre><code>$ mysql -u hoge -p test
Password: 
</code></pre>

<h4>リモートのMySQLサーバへ接続</h4>

<pre><code>$ mysql -u hoge -p --host=192.168.1.1 --port=1000 test
</code></pre>

<h4>ソケットファイルを使って接続</h4>

<pre><code>$ mysql --socket=/tmp/ownsocket_file test
</code></pre>

<h3>データベース選択</h3>

<pre><code>$ mysql
&gt; USE test
</code></pre>

<h3>ページャを設定</h3>

<p>SELECT文等で出力が大量の場合、ページャを用いる</p>

<pre><code>&gt; pager less
</code></pre>

<p>ページャをオフにする場合</p>

<pre><code>&gt; nopager
</code></pre>

<h3>ヘルプの表示</h3>

<p>mysqlコマンドが持つコマンド群と使い方の説明を表示。SQL文用の説明ではない。SQL文ではないので末尾に;は不要。</p>

<pre><code>&gt; help
</code></pre>

<h3>テーブル作成</h3>

<p>aテーブルをcというフィールド付きで作成</p>

<pre><code>&gt; CREATE TABLE a (c CHAR(100));
</code></pre>

<p>複数のフィールドを指定してテーブルを作成</p>

<pre><code>&gt; CREATE TABLE t1 ( id INT, dep INT, name CHAR(30) );
</code></pre>

<h3>テーブル作成(ストレージエンジンの指定)</h3>

<pre><code>&gt; CREATE TABLE t2 ( id INT, dep INT, name CHAR(30) ) ENGINE=InnoDB;
</code></pre>

<h3>テーブル作成(キャラクタセットの指定)</h3>

<pre><code>&gt; CREATE TABLE t3 ( id INT, dep INT, name CHAR(30) ) CHARACTER SET utf8;
</code></pre>

<h3>テーブルのリネーム</h3>

<pre><code>&gt; ALTER TABLE old_table RENAME TO new_table;
</code></pre>

<h3>テーブル定義の確認</h3>

<p>SHOW CREATE TABLE文を使用して、ストレージエンジン、テーブル、フィールドキャラクタセット等確認できる。</p>

<pre><code>&gt; SHOW CREATE TABLE t1;
</code></pre>

<h3>データベースの情報確認</h3>

<p>SHOW TABLE STATUS文を使うと、データベースに存在するすべてのテーブルの情報を確認可能。LIKE &lsquo;テーブル名&#8217;を使うと特定テーブルに限定可能。</p>

<p>テーブルaの詳細情報を縦型出力で出力</p>

<pre><code>&gt; SHOW TABLE STATUS LIKE 'a'\G
*************************** 1. row ***************************
           Name: a
         Engine: InnoDB
        Version: 10
     Row_format: Compact
           Rows: 19
 Avg_row_length: 862
    Data_length: 16384
Max_data_length: 0
   Index_length: 0
      Data_free: 0
 Auto_increment: NULL
    Create_time: 2013-04-07 13:41:36
    Update_time: NULL
     Check_time: NULL
      Collation: latin1_swedish_ci
       Checksum: NULL
 Create_options:
        Comment:
1 row in set (0.00 sec)
</code></pre>

<p>version 5.0以上では、information_schema.TABLES テーブルから情報参照も可能</p>

<pre><code>&gt; SELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA='test' AND TABLE_NAME='t1'\G
*************************** 1. row ***************************
  TABLE_CATALOG: def
   TABLE_SCHEMA: test
     TABLE_NAME: t1
     TABLE_TYPE: BASE TABLE
         ENGINE: InnoDB
        VERSION: 10
     ROW_FORMAT: Compact
     TABLE_ROWS: 1
 AVG_ROW_LENGTH: 16384
    DATA_LENGTH: 16384
MAX_DATA_LENGTH: 0
   INDEX_LENGTH: 0
      DATA_FREE: 0
 AUTO_INCREMENT: NULL
    CREATE_TIME: 2013-04-07 14:10:03
    UPDATE_TIME: NULL
     CHECK_TIME: NULL
TABLE_COLLATION: latin1_swedish_ci
       CHECKSUM: NULL
 CREATE_OPTIONS:
  TABLE_COMMENT:
1 row in set (0.00 sec)
</code></pre>

<h3>テーブルのフィールドの構造確認</h3>

<p>SHOW文またはDESC文を使う</p>

<pre><code>mysql&gt; DESC t1;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| id    | int(11)  | YES  |     | NULL    |       |
| dep   | int(11)  | YES  |     | NULL    |       |
| name  | char(30) | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.01 sec)

&gt; DESC t1;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| id    | int(11)  | YES  |     | NULL    |       |
| dep   | int(11)  | YES  |     | NULL    |       |
| name  | char(30) | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.01 sec)
</code></pre>

<p>version 5.0以上ならばinformation_schema.COLUMNSテーブルを参照することで同等のことが可能</p>

<h3>テーブル一覧を確認</h3>

<pre><code>&gt; SHOW TABLES
</code></pre>

<h3>複数のフィールドに値をセットしたレコードを挿入</h3>

<pre><code>&gt; INSERT INTO a(c,d) VALUES ('123abc','246ace')
</code></pre>

<h3>フィールドの追加</h3>

<p>テーブルaにdというCHAR(100)のフィールドをフィールド最後に追加。COLUMNは省略可能</p>

<pre><code>&gt; ALTER TABLE a ADD COLUMN d CHAR(100);
or
&gt; ALTER TABLE a ADD d CHAR(100);
</code></pre>

<p>フィールドを指定した位置に追加。FIRSTなら先頭、AFTERは指定したフィールドの次に追加。BEFOREは無い。</p>

<pre><code>&gt; ALTER TABLE a ADD COLUMN b CHAR(50) FIRST;
&gt; ALTER TABLE a ADD COLUMN f CHAR(50) AFTER e;
</code></pre>

<h3>フィールドの削除</h3>

<pre><code>&gt; ALTER TABLE a DROP COLUMN f;
</code></pre>

<h3>フィールドの変更</h3>

<p>名前や型を変更できる。下の例はeフィールドをe2にリネームしつつ、型をCHAR(50)に変換。</p>

<pre><code>&gt; ALTER TABLE a CHANGE COLUMN e e2 CHAR(50);
</code></pre>

<h3>フィールド型の変換</h3>

<pre><code>&gt; ALTER TABLE a MODIFY e2 CHAR(100);
</code></pre>

<h3>ストレージエンジンの変更</h3>

<p>テーブルのストレージエンジンを変更する</p>

<pre><code>&gt; ALTER TABLE a ENGINE=MyISAM;
</code></pre>

<h3>テーブルの破棄</h3>

<pre><code>&gt; DROP TABLE a;
</code></pre>

<h3>レコード追加</h3>

<p>フィールドの値セットしてレコード追加。指定されなかったフィールドにはデフォルト値が入る。</p>

<pre><code>&gt; INSERT INTO a (c) VALUES ('123abc');
</code></pre>

<p>複数フィールドの値セットしてレコード追加。指定されなかったフィールドにはデフォルト値が入る。</p>

<pre><code>&gt; INSERT INTO a (b,c) VALUES ('1', '2');
</code></pre>

<p>最初の()を省略すると VALUESの()はすべてのフィールドの値が含まれることが期待される。個数が足りない場合はエラーになる。</p>

<pre><code>&gt; INSERT INTO a VALUES (1,'2','3','4');
</code></pre>

<h3>データの検索</h3>

<p>テーブルaのすべてのレコードを表示</p>

<pre><code>&gt; SELECT * FROM a;
</code></pre>

<h3>特定フィールドに限定した検索</h3>

<p>テーブルaのc,dフィールドのレコードを表示</p>

<pre><code>&gt; SELECT c,d FROM a;
</code></pre>

<h3>レコードの縦表示</h3>

<p>フィールド数が多くて横1行に収まらなく見づらい場合。1レコード毎に縦表示させる。;の代わりに\Gを末尾にする。</p>

<pre><code>&gt; SELECT c,d FROM a\G
</code></pre>

<p>結果</p>

<pre><code>&gt; SELECT c,d FROM a\G
*************************** 1. row ***************************
c: 123abc
d: NULL
*************************** 2. row ***************************
c: 123abc
d: NULL
2 rows in set (0.00 sec)
</code></pre>

<h3>特定値を含むレコードの抽出</h3>

<pre><code>&gt; CREATE TABLE a ( id INT, name CHAR(50), age INT );
Query OK, 0 rows affected (0.02 sec)

&gt; INSERT INTO a VALUES (1, 'John', 30);
&gt; INSERT INTO a VALUES (2, 'Smith', 24);
&gt; INSERT INTO a VALUES (3, 'Alice', 18);
&gt; DESC a;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| id    | int(11)  | YES  |     | NULL    |       |
| name  | char(50) | YES  |     | NULL    |       |
| age   | int(11)  | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.01 sec)
</code></pre>

<p>名前がJohn</p>

<pre><code>&gt; SELECT * FROM a WHERE name = 'John';
+------+------+------+
| id   | name | age  |
+------+------+------+
|    1 | John |   30 |
+------+------+------+
1 row in set (0.00 sec)
</code></pre>

<p>名前がJohn以外</p>

<pre><code>mysql&gt; SELECT * FROM a WHERE name != 'John';
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    2 | Smith |   24 |
|    3 | Alice |   18 |
+------+-------+------+
2 rows in set (0.00 sec)
</code></pre>

<p>年齢が20より上</p>

<pre><code>&gt; SELECT * FROM a WHERE age &gt; 20;
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    1 | John  |   30 |
|    2 | Smith |   24 |
+------+-------+------+
2 rows in set (0.00 sec)
</code></pre>

<p>名前がAから始まる人(パターン検索)</p>

<p>%は0文字以上の任意の文字列の意味</p>

<pre><code>&gt; SELECT * FROM a WHERE name LIKE 'A%';
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    3 | Alice |   18 |
+------+-------+------+
1 row in set (0.00 sec)
</code></pre>

<p>AND</p>

<pre><code>&gt; SELECT * FROM a WHERE id &lt;= 2 AND age &gt; 25;
+------+------+------+
| id   | name | age  |
+------+------+------+
|    1 | John |   30 |
+------+------+------+
1 row in set (0.00 sec)
</code></pre>

<p>OR</p>

<pre><code>&gt; SELECT * FROM a WHERE age &gt; 25 OR name LIKE 'A%';
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    1 | John  |   30 |
|    3 | Alice |   18 |
+------+-------+------+
2 rows in set (0.00 sec)
</code></pre>

<p>IN</p>

<pre><code>&gt; SELECT * FROM a WHERE name IN ( 'Alice', 'John' );
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    1 | John  |   30 |
|    3 | Alice |   18 |
+------+-------+------+
2 rows in set (0.00 sec)
</code></pre>

<h3>SELECT結果のソート</h3>

<pre><code>&gt; INSERT INTO a VALUES (0, 'Bob', 65);
Query OK, 1 row affected (0.01 sec)
</code></pre>

<p>昇順</p>

<pre><code>&gt; SELECT * FROM a ORDER BY id;
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    0 | Bob   |   65 |
|    1 | John  |   30 |
|    2 | Smith |   24 |
|    3 | Alice |   18 |
+------+-------+------+
4 rows in set (0.00 sec)
</code></pre>

<p>降順</p>

<pre><code>&gt; SELECT * FROM a ORDER BY id DESC;
+------+-------+------+
| id   | name  | age  |
+------+-------+------+
|    3 | Alice |   18 |
|    2 | Smith |   24 |
|    1 | John  |   30 |
|    0 | Bob   |   65 |
+------+-------+------+
4 rows in set (0.00 sec)
</code></pre>

<p>ソート基準のフィールドを複数指定</p>

<pre><code>&gt; SELECT * FROM a ORDER BY id, name;
</code></pre>

<h3>データの更新</h3>

<p>UPDATEを使う。key=value[, key=value] で複数指定もできる。</p>

<pre><code>&gt; UPDATE  a SET note="hello";
Query OK, 5 rows affected (0.00 sec)
Rows matched: 5  Changed: 5  Warnings: 0

&gt; SELECT * FROM a;
+------+-----------+------+-------+
| id   | name      | age  | note  |
+------+-----------+------+-------+
|    1 | John      |   30 | hello |
|    2 | Smith     |   24 | hello |
|    3 | Alice     |   18 | hello |
|    0 | Bob       |   65 | hello |
|    5 | Christian |   65 | hello |
+------+-----------+------+-------+
5 rows in set (0.00 sec)
</code></pre>

<p>特定レコードの特定フィールドを更新するにはWHERE句を使う。</p>

<pre><code>&gt; UPDATE  a SET age=19 WHERE name='Alice';
</code></pre>

<h3>テーブルからすべてのレコードを削除</h3>

<p>テーブルからすべてのレコードを削除する。テーブルは削除されない</p>

<pre><code>&gt; DELETE FROM b;
</code></pre>

<h3>テーブルから特定のレコードを削除</h3>

<p>特定のレコードだけを削除したい場合はWHERE句を使う</p>

<pre><code>DELETE  FROM b WHERE age &gt; 10;
</code></pre>

<h3>リダイレクト(SQLを記述したファイルを実行)</h3>

<pre><code>$ cat sql.txt
SELECT * FROM a;
$ mysql test &lt; sql.txt

c       d       e
123abc  NULL    NULL
123abc  NULL    NULL
NULL    1       NULL
a       1       NULL
a       1       NULL

$
</code></pre>

<p>上の例では枠線は表示されない。枠線を表示したい場合は-tを使う</p>

<pre><code>$ mysql -t test &lt; sql.txt
+--------+------+------+
| c      | d    | e    |
+--------+------+------+
| 123abc | NULL | NULL |
| 123abc | NULL | NULL |
| NULL   | 1    | NULL |
| a      | 1    | NULL |
| a      | 1    |      |
+--------+------+------+
</code></pre>

<h3>リダイレクト(実行結果をファイルに出力)</h3>

<p>&lsquo;>&#8217;上書き、&rsquo;>>&lsquo;追記</p>

<pre><code>$ mysql test &gt; out
SELECT * FROM a;
quit
$
$ cat out
c       d       e
123abc  NULL    NULL
123abc  NULL    NULL
NULL    1       NULL
a       1       NULL
a       1       NULL
</code></pre>

<h3>リダイレクト(&lt; と > を同時に使う)</h3>

<p>SQL文をファイルから読み込み実行。実行結果をファイルに保存</p>

<pre><code>$ cat sql.txt
SELECT c FROM a;
$ mysql test &lt; sql.txt &gt; out
$
$ cat out |head
c
123abc
123abc
NULL
a
a
a
a
a
a
</code></pre>

<h3>パイプ</h3>

<p>パイプを使ってSQL文を実行できる</p>

<pre><code>$ echo 'SELECT * FROM a' | mysql test | head
c       d       e
123abc  NULL    NULL
123abc  NULL    NULL
NULL    1       NULL
a       1       NULL
a       1       NULL
a       1       NULL
a       1       NULL
a       1       NULL
a       1       NULL
</code></pre>

<h3>データベースの作成</h3>

<p>testという名前のデータベースを作成</p>

<pre><code>$ mysqladmin -uroot -p create test
</code></pre>

<p>もしくはSQL文を使う</p>

<pre><code>&gt; CREATE DATABASE test;
</code></pre>

<p>キャラクタセットを指定しデータベースを作成する</p>

<pre><code>&gt; CREATE DATABASE test DEFAULT CHARACTER SET utf8;
</code></pre>

<h3>データベースの削除</h3>

<p>testという名前のデータベースを削除</p>

<pre><code>$ mysqladmin -uroot -p drop test
</code></pre>

<p>もしくはSQL文を使う</p>

<pre><code>&gt; DROP DATABASE test;
</code></pre>

<h3>データベース作成時のクエリを確認</h3>

<pre><code>&gt; SHOW CREATE DATABASE test;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前日日付のファイル名でローテートし圧縮するlogrotateの設定例]]></title>
    <link href="http://orihubon.com/blog/2013/03/07/logrotate-as-compressed-and-previous-date-formatted-file-name/"/>
    <updated>2013-03-07T15:57:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/03/07/logrotate-as-compressed-and-previous-date-formatted-file-name</id>
    <content type="html"><![CDATA[<p>logrotateでdateextを設定するとローテートしたファイルに日付を含めることができます。しかし、00:00-早朝のあたりでlogrotateを実行するとローテートされた内容は前日分のログなのに日付は実行時(今日)になりログの内容とファイル名の日付が乖離してしまいます。ファイル名を前日の日付でローテートする方法をメモします。</p>

<div><script src='https://gist.github.com/5105939.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>一部説明</p>

<pre><code>ifempty        # 空ファイルでもローテートする。
               # 過去ログを`ls | wc -l`などするときに
               # 日数と数を合わせたいので。
dateext        # ローテートしたファイルに実行時の日付を
               # 付ける。ただし、00:00以降にlogrotateを実行する
               # 場合は、ログ内容と日付が乖離するので別途
               # lastactionで日付を前日分に変えている。
extension .log # ローテート後のファイル名の場所の末尾に.log 
               # を持ってくる。 圧縮する場合は.log.gzになる。
               # 本オプション指定ない場合はapp.log-yyyymmdd となり
               # 微妙なので調整のため。
lastaction     # 最後に実行するコマンド
               # postrotateを使わないのはpostrotateはcompressする前
               # に実行されるため。compressしてlastactionが実行される。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl環境構築作りのチート]]></title>
    <link href="http://orihubon.com/blog/2013/02/25/perl-dev_env_and_deploy/"/>
    <updated>2013-02-25T09:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/25/perl-dev_env_and_deploy</id>
    <content type="html"><![CDATA[<p>ステージや本番での環境構築まわりについて調べてみた。</p>

<p>調べたかったことはこのスライドにまとまっていた。(モダンかもしれないPerlウェブアプリケーション開発入門 &ndash; Nigata.pm teck talk#1)[<a href="http://www.slideshare.net/ImaiHayato/niigatapm-1">http://www.slideshare.net/ImaiHayato/niigatapm-1</a>]</p>

<p>以下、自分用にメモします。</p>

<!--more-->


<h3>開発環境</h3>

<pre><code>$ curl -kL http://install.perlbrew.pl | bash
$ echo 'source ~/perl5/perlbrew/etc/bashrc' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile
$ perlbrew install perl-5.17.9
$ perlbrew switch perl-5.17.9
$ perlbrew install-cpanm
$ cpanm carton
$ cpanm proclet # 必要であれば
</code></pre>

<h3>デプロイ先</h3>

<pre><code>$ sudo useradd -m myapp &amp;&amp; sudo su - myapp
# perl環境構築(略)
myapp$ git clone url myapp
myapp$ cd myapp
myapp$ carton install
myapp$ carton exec -- prove
</code></pre>

<h3>daemontoolsスクリプト</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>export HOME=/home/myapp
</span><span class='line'>export PLACK_ENV=production
</span><span class='line'>cd $HOME/myappexec
</span><span class='line'>exec setuidgid myapp ./script/start.sh</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source $HOME/perl5/perlbrew/etc/bashrc
</span><span class='line'>carton exec -- myapp</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procletを使ってみた]]></title>
    <link href="http://orihubon.com/blog/2013/02/23/proclet/"/>
    <updated>2013-02-23T13:34:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/23/proclet</id>
    <content type="html"><![CDATA[<p>最近、仕事で小さなブロジェクトでレガシに作られたCGIのアプリケーションをちまちまとモダンにしています:)
RubyでいうところのForeman、PerlのProcletを使ってみました!!</p>

<p>インストール</p>

<pre><code>$ cpanm Proclet
</code></pre>

<p>簡単ですね!</p>

<p>Procfileを書く。</p>

<pre><code>$ vim Procfile
web: carton exec -Ilib -- plackup -r app.psgi
</code></pre>

<p>ほかにworkerなど立ち上げるプロセスがあれば行区切りで書けばOK。</p>

<p>起動させてみる</p>

<pre><code>$ proclet start --color
13:33:16 web.1      | Watching ./lib app.psgi for file updates.
13:33:16 web.1      | HTTP::Server::PSGI: Accepting connections at http://0:5000/
</code></pre>

<p>&mdash;colorオプションなどオプションは.foremanに定義することで省略可能。(.procletではないんだ!)</p>

<pre><code>$ cat .foreman
color: 1
</code></pre>

<p>Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmokePingをインストールしてみた]]></title>
    <link href="http://orihubon.com/blog/2013/02/18/install-smokeping/"/>
    <updated>2013-02-18T16:41:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/18/install-smokeping</id>
    <content type="html"><![CDATA[<p>SmokePingをインストールしたメモ。</p>

<p>SmokePingの概要は以下のとおりです。</p>

<ul>
<li>smokepingデーモンが対象に対して定期的にpingポーリング</li>
<li>監視対象ホストのネットワークレイテンシ可視化</li>
<li>閾値監視、通知</li>
<li>ping以外にもHTTPやDNSなどを使うこともできる</li>
</ul>


<p>以下、インストールしたときのメモ。</p>

<!-- more -->


<h3>1. RRDTool</h3>

<pre><code>yum install rrdtool rrdtool-devel rrdtoo-perl   
</code></pre>

<h3>2. fping</h3>

<p>sourceからインストールしました。fpingをroot権限で実行させるためsetuidしました。</p>

<pre><code>mkdir ~/src/ ; cd ~/src/
wget http://oss.oetiker.ch/smokeping/pub/fping-2.4b2_to4-ipv6.tar.gz
tar zxvf fping-2.4b2_to4-ipv6.tar.gz
cd fping-2.4b2_to4-ipv6
./configure --prefix=/usr/local/smokeping
make
su -
make install
chmod u+s /usr/local/sbin/fping
</code></pre>

<h3>3. Perl Modules</h3>

<p>公式に書いてあるCPANモジュールをcpanでインストールします。optionalなモジュールは必要ないので入れてません。</p>

<pre><code># perl -MCPAIN -e shell
cpan&gt; install FCGI CGI CGI::Fast Config::Grammar LWP
</code></pre>

<h3>4. SmokePingのインストール</h3>

<p>こちらもソースからインストールします。</p>

<pre><code>cd ~/src
wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.8.tar.gz
tar zxvf smokeping-2.6.8.tar.gz
cd smokeping-2.6.8
./configure --prefix=/usr/local/smokeping
/usr/bin/gmake install
mkdir -p /usr/local/smokeping/cache
mkdir -p /usr/local/smokeping/data
mkdir -p /usr/local/smokeping/var
mkdir /usr/local/smokeping/var/log
chown -R smokeping:smokeping /usr/local/smokeping
chmod -R g+rw /usr/local/smokeping/cache
chmod 600 /usr/local/smokeping/etc/smokeping_secrets.dist
</code></pre>

<p>smokepingユーザを作ります。</p>

<pre><code>useradd smokeping
usermod -G smokeping apache
</code></pre>

<h3>5. SmokePingのコンフィグ</h3>

<p><code>etc/config.dist</code>を<code>etc/smokeping.conf</code>にリネームしてサンプルを参考に設定する。</p>

<h3>6. 起動</h3>

<p>pingを定期実行するsmokepingデーモンを上げます。</p>

<p>ためしに起動する</p>

<pre><code>su - smokeping -m -c /usr/local/smokeping/bin/smokeping --config=/usr/local/smokeping/etc/smokeping.conf --debug
</code></pre>

<p>問題なければinitスクリプトから起動する。initスクリプトは適当に作ったのを<a href="https://gist.github.com/niku4i/4975644">gist</a>に上げました。</p>

<h3>7. apacheの設定</h3>

<p>以下を<code>/etc/httpd/conf.d/smokeping.conf</code>に。</p>

<div><script src='https://gist.github.com/4976007.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>cgi用に以下を作った</p>

<div><script src='https://gist.github.com/4976014.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>その他</h3>

<p>コンフィグの構文チェック</p>

<pre><code>smokeping --check --config=/path/to/config
</code></pre>

<p>デバッグモード実行</p>

<pre><code>smokeping --config=/path/to/config --debug
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSONオブジェクトのデータサイズを確認する方法(Ruby)]]></title>
    <link href="http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size/"/>
    <updated>2013-02-13T15:06:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/02/13/calculate-bson-objects-size</id>
    <content type="html"><![CDATA[<p>BSON Objectのサイズを求める方法。</p>

<pre><code>class Person
  include Mongoid::Document
  field :name, type: String
end

Person.create name: 'a'

person = Person.first
puts Moped::BSON::Document.serialize(parson.as_document).size
</code></pre>

<p>MongoDBにおける1BSONオブジェクトの最大サイズは16MB。ある件でembedしてデータをたくさん持たせた場合、サイズが制限内で妥当かどうか検証したときのメモ。</p>

<p>蛇足ならが、ちなみ結論的にはデータ構造がネストされて大きくなる場合はembededではなくreferencedを使うべきであった。</p>

<pre><code>class Person
  include Mongoid::Document
  field :name, type: String
  embeds_many :children
end

class Child
  include Mongoid::Document
  embeded_in :person
  field :age
end

Person.create name: 'a'
person = Person.first
person.children &lt;&lt; たくさんデータ入れる

Person.first   # loadに時間がかかる!
</code></pre>

<p>relationにした場合、子供はloadされないので時間がかかりません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterにリプライしたらgemが出来たお話]]></title>
    <link href="http://orihubon.com/blog/2013/01/12/capistrano-colorized-stream-gem-makes-log-monitoring-rainbow/"/>
    <updated>2013-01-12T01:03:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/01/12/capistrano-colorized-stream-gem-makes-log-monitoring-rainbow</id>
    <content type="html"><![CDATA[<p>1年前に書いた<a href="http://orihubon.com/blog/2012/02/09/streaming-log-with-capistrano/">Streaming Log With Capistrano</a>というポストが巡り巡って<a href="https://github.com/sonots/capistrano-colorized-stream">gem</a>で利用できるようになりました、というお話。</p>

<blockquote class="twitter-tweet" data-in-reply-to="288609436531052544" lang="ja"><p>@<a href="https://twitter.com/sonots">sonots</a> だいぶ昔書いたのでいけてなコードですが、こんな感じでしょうか。<a href="http://t.co/nifOD1YA" title="http://orihubon.com/blog/2012/02/09/streaming-log-with-capistrano/">orihubon.com/blog/2012/02/0…</a></p>&mdash; Nobuhiro Nikushiさん (@niku4i) <a href="https://twitter.com/niku4i/status/288612474276691968" data-datetime="2013-01-08T11:45:50+00:00">1月 8, 2013</a></blockquote>


<script async src="http://orihubon.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://twitter.com/sonots/">@sonots</a>さんがCapistranoの話題のツイートしてて、昔似たことをやったので過去のポストを教えてあげたところgemになった!</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/niku4i">niku4i</a> gemにしてみましたよ！ <a href="https://t.co/Q2tjd0kj" title="https://github.com/sonots/capistrano-colorized-stream">github.com/sonots/capistr…</a></p>&mdash; そのっつ (SEO Naotoshi)さん (@sonots) <a href="https://twitter.com/sonots/status/289690981152989184" data-datetime="2013-01-11T11:11:26+00:00">1月 11, 2013</a></blockquote>


<script async src="http://orihubon.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://github.com/sonots/capistrano-colorized-stream">capistrano-colorized-stream</a></p>

<p><a href="https://twitter.com/sonots/">@sonots</a>さん仕事早い。</p>

<p>gemにしていただいたので僕はこれをネタにブログを書くことにしました。</p>

<!-- more -->


<h3>コードを読んでみた</h3>

<h4>alias_method</h4>

<figure class='code'><figcaption><span>lib/capistrano/colorized_stream.rb </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">alias_method</span> <span class="ss">:stream_without_color</span><span class="p">,</span> <span class="ss">:stream</span>
</span><span class='line'><span class="n">alias_method</span> <span class="ss">:stream</span><span class="p">,</span> <span class="ss">:stream_with_color</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>alias_methodを使うと既存メソッドは残しつつ、alias_methodで上書くことができるんですね</li>
<li>実は<code>alias</code>との違いがピンときていないのでまた別途</li>
</ul>


<p>試してみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="s1">&#39;Hello!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">aisatsu</span>
</span><span class='line'>    <span class="s1">&#39;Konichiwa!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:greet</span><span class="p">,</span> <span class="ss">:hello</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:aisatsu</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; &quot;Konichiwa!&quot; </span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greet</span> <span class="c1"># =&gt; &quot;Hello!&quot; </span>
</span></code></pre></td></tr></table></div></figure>


<p><code>A#hello</code>が日本語に変更しつつ、<code>A#greet</code>にてオリジナルの英語で挨拶することができました。</p>

<h4>String#split</h4>

<figure class='code'><figcaption><span>lib/capistrano/colorized_stream.rb </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="n">out</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\r?\n/m</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>/\n/</code>ではなく<code>/\r?\n/</code>と各とCRLFとLFをサポートする</li>
<li>splitの第2引数に負の値を与え、改行のみの行を空要素として配列を返す。すると改行がどの位置にあるか気にしなくてもよくなる(!)。</li>
</ul>


<p>この<code>split</code>の第2引数のようにRubyのコアクラスのAPIの知識に深ければ小さくコードが書ける実例だなとおもいました。
このあたりは<a href="http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E-Ruby-%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8-%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D/dp/4873113946">プログラミング言語 Ruby</a>の9章Rubyプラットフォームが充実してますね。難しいコードを書いたな&hellip;.というときは標準のAPIで対応できないか、考え直してみるとよさそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homesickとgithubでドットファイルを管理する]]></title>
    <link href="http://orihubon.com/blog/2013/01/06/improve-management-of-your-dot-files-by-homesick-and-github/"/>
    <updated>2013-01-06T23:42:00+09:00</updated>
    <id>http://orihubon.com/blog/2013/01/06/improve-management-of-your-dot-files-by-homesick-and-github</id>
    <content type="html"><![CDATA[<p>お正月に時間があったのでPC環境のうちドットファイルのマスタファイルをgithub上で管理するようしました。また管理を楽にするため <a href="https://github.com/technicalpickles/homesick" title="homesick">homesick</a> を導入しました。</p>

<p>動機としては、昨年転職してから会社PCがMacになり家と会社のMacで設定が微妙に異なることがあり煩わしいので揃えてしまおうとおもったためです。</p>

<p>github上に置いたドットファイルをマスタとして扱い、各PCにリポジトリを<code>git clone</code>してシンボリックリンクを張れば済みます。</p>

<p>しかしながら、<code>ln</code>コマンドで1ファイルづつリンク作るのもPC台数が複数あると面倒くさく怠慢により機能しなくなることが予想されます。 <a href="http://dotfiles.github.com/">Github dotfiles</a> にはdotfilesの管理にまつわる先人の知恵が紹介されていましたので、この中からカジュアルそうなツールで <a href="https://github.com/technicalpickles/homesick">homesick</a> を導入しました。他にも事例はあるので自分の好みにあう方法を探すのもよいでしょう。</p>

<p>以下、詳細。</p>

<!-- more -->


<h3>dotfiles</h3>

<p>github上に<code>dotfiles</code>という名前で専用リポジトリを作りましょう。名前は何でもいいです。
なお、homesickの特性上、github上のリポジトリルートに<code>home</code>ディレクトリを作成して<code>home</code>ディレクトリ以下にドットファイルを置く必要がありました。
参考までに(参考にならないですが) <a href="https://github.com/niku4i/dotfiles">私のリポジトリ</a> です。</p>

<h3>homesick</h3>

<p>gemコマンドでインストールできます。</p>

<pre><code>$ gem install homesick
</code></pre>

<p>github上のdotfilesリポジトリをhomesickに登録します。<code>~/.homesick/</code>以下に<code>git clone</code>されます。</p>

<pre><code>$ homesick clone git@github.com:niku4i/dotfiles.git
</code></pre>

<p>登録したリポジトリのドットファイルを<code>~/</code>以下に適用。</p>

<pre><code>$ homesick symlink dotfiles
</code></pre>

<p>既にローカルPC上に同じドットファイルがある場合、上書く前にy/nで訪ねられますのでご安心を。</p>

<p>現在homesickに登録されたリポジトリ一覧を確認</p>

<pre><code>$ homesick list
dotfiles  git@github.com:niku4i/dotfiles.git
</code></pre>

<p>githubのリポジトリをpull(ローカルのドットファイルが更新される)</p>

<pre><code>$ homesick pull dotfiles
</code></pre>

<p>細かい使い方は<code>homesick help</code>を参照してください。</p>

<p><code>homesick clone</code>では複数のリポジトリを登録できるので、Github Enterpriseを導入しているような会社であれば会社用のドットファイルリポジトリ、全PC共通のドットファイルはgithub.comに、といった使い方もできて便利だとおもいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TEDの英文を取得する]]></title>
    <link href="http://orihubon.com/blog/2012/04/09/fetch-subtitle-for-talks-in-ted/"/>
    <updated>2012-04-09T01:49:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/04/09/fetch-subtitle-for-talks-in-ted</id>
    <content type="html"><![CDATA[<p>TEDのトークショーの内容をテキストデータで取得できるという話を聞きましたのでRubyで英文をprintするコードを書いてみました。</p>

<!-- more -->


<p>URLを叩くとJSONで返してくれるのでparseしてputsするだけでした。</p>

<div><script src='https://gist.github.com/2338391.js'></script>
<noscript><pre><code>#!/usr/bin/env ruby

#
# Dump subtitle in text for TED
#

require 'json'
require 'open-uri'

base_url = 'http://www.ted.com/talks/subtitles'
id = 1183
url = &quot;#{base_url}/id/#{id.to_s}/lang/eng&quot;

data = JSON.parse(open(url).read)
if data &amp;&amp; data.key?('captions')
  data['captions'].each do |sentence|
    puts sentence['content']
    puts 
  end
end 
</code></pre></noscript></div>


<p><a href="http://www.ted.com/talks/matt_cutts_try_something_new_for_30_days.html">Matt Cutts: Try something new for 30 days</a> という有名なTEDのトークをひとまずdumpしてみました。</p>

<pre><code>$ ./teddump.rb
A few years ago,

I felt like I was stuck in a rut,

so I decided to follow in the footsteps

of the great American philosopher, Morgan Spurlock,

and try something new for 30 days.

The idea is actually pretty simple.

Think about something you've always wanted to add to your life

and try it for the next 30 days.

It turns out, 

30 days is just about the right amount of time
</code></pre>

<p>できました。</p>

<p>ちなみに、idはページ中のHTMLのdata-idというパラメタから取得しないと分かりません。nokogiriとかでスクレイピングする方法があるようです。</p>

<p>以下を参考にしました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/1955618/parsing-and-converting-ted-talks-json-subtitles">Parsing and Converting TED Talks JSON Subtitles</a></li>
<li><a href="http://d.hatena.ne.jp/meganii/20120320/1332214416">TEDの英語原稿を取得する &ndash; ギークを夢見るじょーぶん男子 </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gist on command line]]></title>
    <link href="http://orihubon.com/blog/2012/04/09/gist-on-command-line/"/>
    <updated>2012-04-09T01:23:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/04/09/gist-on-command-line</id>
    <content type="html"><![CDATA[<p><code>gist</code>コマンドを使うとコマンドラインからGistに投稿できることを知りましたのでメモします。</p>

<p>インストール</p>

<pre><code>$ brew install gist

$ gist &lt; file.txt
</code></pre>

<p>または</p>

<pre><code>$ gist file.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Book Airが水没したので]]></title>
    <link href="http://orihubon.com/blog/2012/04/03/mac-book-air-got-wet/"/>
    <updated>2012-04-03T21:59:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/04/03/mac-book-air-got-wet</id>
    <content type="html"><![CDATA[<p>自宅のMac Book Air 13inchが水難にあいました記録。</p>

<p>夜、日本酒飲みながら使ってた僕がすべて悪いのですが10ミリリットルくらいの量がキーボード上部右側から被弾。すぐにタオルで拭きましたが若干キーボードから浸水しました。</p>

<p>せめてウイスキかスピリタスにしとけば直ぐに揮発したなw&hellip;とかどうでもいい後悔の念が少しだけ頭をよぎりました。</p>

<p>翌日欲にかられて起動してみましたところ、異常が見つかりました。</p>

<!-- more -->


<p>最初気づかなかったんですターミナルで作業しても。</p>

<pre><code>$ c hoge fuga
-bash: c: command not found
$ to
-bash: to: command not found
$ erl
-bash: erl: command not found
</code></pre>

<p>お分かりでしょうか。最初ファイルシステム壊れたかとおもいましたが、正解は&#8217;p&#8217;がきかなくなりました。</p>

<p>このままではインフラエンジニア業は卒業せざる終えなくなりますので、すぐにApple Store銀座店に駆け込みキーボード交換見積もりもらいました。
Apple Storeの店員さんからは、1週間ほど寝かせて(水分飛ばして)起動するようなら交換しましょう、ということになりました。</p>

<p>1週間後も無事に起動しましたので修理依頼になるわけですが、せっかくなので<code>stress</code>コマンドを使ってストレスかけても問題ないか(火ふいたり落ちたりしないか)見てみました。</p>

<pre><code>$ brew install stress
$ stress --cpu 4 --timeout 30m
$ stress --io 4  --timeout 5m
</code></pre>

<p>10分もするとキーボード付近が暑くなってきます。お遊びなのでせいぜい30分程度で終わらせます。</p>

<p>預けてわずか5日で交換完了しました。購入2ヶ月後、保証期間内ということで今回無料になりました。対応が早い!無償!すばらしや!!!</p>

<p>水難は基本保証対象外なので水難であることを申告したくない気分にもなりますが、正直に言ったほうが後の対応も気持ちよくやってくれるので良いなとおもいました。</p>

<p>ちなみに、Mac Book Air 水がかかる で検索するといくつか事例がありました。</p>

<ul>
<li>お風呂に水ためて洗う(ネタかとおもいます)</li>
<li>薬局でアルコールかってきて洗う</li>
</ul>


<p>ネタですね。僕は試せませんでした。</p>

<p>ノートPCで作業するときは水には注意しましょう。
でもコーヒーは絶対やめられないなあ。</p>

<p>おしまい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressにInstagramの写真を挿入するTag Pluginを作ってみた]]></title>
    <link href="http://orihubon.com/blog/2012/03/20/instagram-tag-plugin-for-octopress/"/>
    <updated>2012-03-20T20:39:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/20/instagram-tag-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>Octopressで書く記事の中に簡単にInstagramに載せた写真を挿入できたらいいなとおもい、プラグインを実装してみました。以下からダウンロードできます。</p>

<ul>
<li><a href="https://gist.github.com/2134897">instag.rb</a></li>
</ul>


<h3>概要</h3>

<pre><code>{% instag http://instagr.am/p/IYYs5bo0jd/ }
</code></pre>

<p>記事中でタグが使えます。表示したいinstagramページのURLは知っておく必要があります。</p>

<!-- more -->


<h3>インストール</h3>

<p><a href="https://gist.github.com/2134897">instag.rb</a>をダウンロードし<code>plugins/</code>ディレクトリに配置してください。</p>

<pre><code>cd /var/tmp/
git clone git://gist.github.com/2134897.git
mv 2134897/instag.rb path/to/octopress/plugins
rm -rf 2134897/
</code></pre>

<h3>使い方</h3>

<pre><code># Syntax:
{% instag [class name(s)] http://instagr.am/p/IYYs5bo0jd/ [width [height]] [title text | "title text" ["alt text"]] }

# Examples:
{% instag http://instagr.am/p/IYYs5bo0jd/ }
{% instag left half http://instagr.am/p/IYYs5bo0jd/ my title }
{% instag left half http://instagr.am/p/IYYs5bo0jd/ 150 150 "my title" "our title" }

# Output:
&lt;img src="http://path/to/istagram/image.jpg"&gt;
&lt;img class="left half" src="http://path/to/instagram/image.jpg" title="my title" alt="my title"&gt;
&lt;img class="left half" src="http://path/to/instagram/image.jpg" width="150" height="150" title="my title" alt="our title"&gt;
</code></pre>

<h3>例</h3>

<p>今日、中野駅近くのベジタブル料理専門のカフェレストランに行ってきたときの写真で試します。</p>

<p>標準サイズ</p>

<pre><code>{% instag http://instagr.am/p/IYYs5bo0jd/ }
</code></pre>

<p><img src="http://distilleryimage1.s3.amazonaws.com/2a3e47fa724611e181bd12313817987b_7.jpg" title="dal curry!!! yumyum" alt="dal curry!!! yumyum"></p>

<p>125x125に縮小</p>

<pre><code>{% instag http://instagr.am/p/IYYs5bo0jd/ 125 125 }
</code></pre>

<p><img src="http://distilleryimage1.s3.amazonaws.com/2a3e47fa724611e181bd12313817987b_7.jpg" width="125" height="125" title="dal curry!!! yumyum" alt="dal curry!!! yumyum"></p>

<p><a href="https://gist.github.com/2134897">instag.rb</a>はスクラッチから書いたわけではなく、標準で付属するimage.rbプラグインとgist_tag.rbプラグイン参考にしました。</p>

<p>InstagramのページURLから画像を取得方法は<a href="http://instagram.com/developer/embedding/">Embedding Endpoints</a>の機能を利用しました。認証キーを取得しなくとも利用できるので簡単に利用できます。画像ページのURLから実際のjpgのURLを取得する方法はこんな感じです。</p>

<pre><code>require 'open-uri'
require 'json'

api  = 'http://api.instagram.com/oembed?url='
page = 'http://instagr.am/p/IYYs5bo0jd/'
p JSON.parse(open(url+page).read)
 =&gt; {"provider_url"=&gt;"http://instagram.com/", "media_id"=&gt;"150979225957124317_1267257", "title"=&gt;"dal curry!!! yumyum", "url"=&gt;"http://distilleryimage1.s3.amazonaws.com/2a3e47fa724611e181bd12313817987b_7.jpg", "author_name"=&gt;"niku4i", "height"=&gt;612, "width"=&gt;612, "version"=&gt;"1.0", "author_url"=&gt;"http://instagram.com/", "author_id"=&gt;1267257, "type"=&gt;"photo", "provider_name"=&gt;"Instagram"} 
</code></pre>

<p><strong>2012/04/03 追記 キャッシュ対応しました</strong></p>

<p>コードは<a href="https://gist.github.com/2134897">引き続きgist</a>からダウンロードできます。
APIを参照するのみでは<code>rake generate</code>するたびに問い合わせるのでAPI問い合わせ結果をキャッシュするよう修正しました。なお、.instag-cache/というディレクトリ以下にキャッシュファイルが生成されますので、<code>git commti</code>しても含まれないように.gitignoreに.instag-cacheを追記してください。</p>

<figure class='code'><figcaption><span>変更後の.gitignoreをgit diffコマンドで確認</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git diff .gitignore
</span><span class='line'>diff --git a/.gitignore b/.gitignore
</span><span class='line'>index 68a6830..c80293a 100644
</span><span class='line'>--- a/.gitignore
</span><span class='line'>+++ b/.gitignore
</span><span class='line'>@@ -2,6 +2,7 @@
</span><span class='line'> .DS_Store
</span><span class='line'> .sass-cache
</span><span class='line'> .gist-cache
</span><span class='line'>+.instag-cache
</span><span class='line'> .pygments-cache
</span><span class='line'><span class="o">(</span>略<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>次はサイドバーにInstagramの画像を表示したくなりました。OctopressはWordpressに比べて圧倒的にプラグインの数が少ないのが難点ですがこうやって作れるは魅力的です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seqコマンド]]></title>
    <link href="http://orihubon.com/blog/2012/03/18/seq-command-in-sh/"/>
    <updated>2012-03-18T12:55:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/18/seq-command-in-sh</id>
    <content type="html"><![CDATA[<p>seqというコマンドというのを知らなかったのでメモ。</p>

<pre><code>$ for i in seq 1 10; do expr $i \* 2; done
2
4
6
8
10
12
14
16
18
20
</code></pre>

<p>Rubyだとこうやるのかな。</p>

<pre><code>(1..10).each { |i| puts i * 2 }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressのソースリポジトリをDropboxに変更]]></title>
    <link href="http://orihubon.com/blog/2012/03/18/change-upstream-of-source-to-dropbox/"/>
    <updated>2012-03-18T05:32:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/18/change-upstream-of-source-to-dropbox</id>
    <content type="html"><![CDATA[<h3>octopressのソースファイルの管理</h3>

<p><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a>の手順でgithub pagesを使うと、localのworking copyにはsourceというブランチが生成されています。blogを書くときは以下のワークフローになるようです。</p>

<ol>
<li><code>rake new_post['hoge']</code>で記事を作成</li>
<li><code>rake deploy</code>で記事を公開</li>
<li><code>git push</code>にてlocalのsourceブランチをgithub.comにpush(sourceファイルのバックアップ)</li>
</ol>


<p><code>git push</code>してupstreamにpushするとgithub上に全部公開されますが、個人的にはソースファイルは公開しなくてよいなと考えました。plugin作って見せたりするシーンでは便利ですが今のところgistを使えば十分なので。</p>

<p>そこで<code>git push</code>する先のリポジトリをgithub.comからDropboxに作成したリモートリポジトリに変更してみます。</p>

<!-- more -->


<h3>リポジトリ作成</h3>

<pre><code>mkdir -p ~/Dropbox/repos/ni-blog.git        
cd ~/Dropbox/repos/ni-blog.git              
git --bare init                           
</code></pre>

<h3>リモートリポジトリの追加</h3>

<p>リモートリポジトリの確認
現在のremoteはoctopressとoriginの2種類。</p>

<pre><code>$ cd path/to/octopress
$ git remote -v                     
octopress       git://github.com/imathis/octopress.git (fetch)
octopress       git://github.com/imathis/octopress.git (push)
origin  git@github.com:niku4i/niku4i.github.com.git (fetch) 
origin  git@github.com:niku4i/niku4i.github.com.git (push)  
</code></pre>

<p>~/Dropbox/repos/ni-blog.gitをdropboxという名前で登録</p>

<pre><code>git remote add dropbox ~/Dropbox/repos/ni-blog.git
</code></pre>

<p>確認</p>

<pre><code>$ git remote -v                          
dropbox /Users/nikushi/Dropbox/repos/ni-blog.git (fetch)       
dropbox /Users/nikushi/Dropbox/repos/ni-blog.git (push)        
octopress       git://github.com/imathis/octopress.git (fetch) 
octopress       git://github.com/imathis/octopress.git (push)  
origin  git@github.com:niku4i/niku4i.github.com.git (fetch)    
origin  git@github.com:niku4i/niku4i.github.com.git (push)     
</code></pre>

<p>dropboxが追加されました。</p>

<h3>Dropboxのリポジトリにソースファイルをpushする</h3>

<p>まずbareで作成したDropboxのリポジトリにpush。-uを指定することで以降<code>git push</code>(引数なし)で実行可能になります。最初の1回だけ-uつきで実行します。</p>

<pre><code>$ git push -u dropbox source                   
Counting objects: 4110, done.                                        
Delta compression using up to 4 threads.                             
Compressing objects: 100% (1598/1598), done.                         
Writing objects: 100% (4110/4110), 2.73 MiB, done.                   
Total 4110 (delta 2307), reused 3836 (delta 2197)                    
To /Users/nikushi/Dropbox/repos/ni-blog.git                          
 * [new branch]      source -&gt; source                                
 Branch source set up to track remote branch source from dropbox.     
</code></pre>

<p>以後<code>git push</code>を実行するとDropboxのリポジトリにバックアップされることになります。</p>

<h3>バックアップからリカバリする</h3>

<p>本当にバックアップされたか確認してみます。<code>git clone</code>する際には-bでsourceブランチを指定する必要がありました。</p>

<pre><code>mkdir ~/tmp/ &amp;&amp; cd ~/tmp/
git clone -b source ~/Dropbox/repos/ni-blog.git
cd ni-blog
</code></pre>

<p>この状態では、remoteはorigin=~/Dropbox/repos/ni-blog.gitのみがリモートリポジトリに設定されていますので、元々の設定に戻してあげます。現在のremoteの設定は<code>git remote -v</code>で確認してください。</p>

<pre><code>git remote add octopress  git://github.com/imathis/octopress.git 
git remote rename origin dropbox
git remote add origin  git@github.com:niku4i/niku4i.github.com.git
git push -u dropbox source                   
</code></pre>

<p>3つのremoteを設定し、dropboxリモートリポジトリをgit pushのデフォルトにしました。</p>

<p>rake deployにてgithubに記事をアップロード、git pushにてDropboxにバックアップするワークフローに変更しましたのでしばらく運用してみます。</p>

<p><strong>2012/11/05 追記</strong>
最終的には、github.comをremoteにする運用に戻しました。</p>

<pre><code>git push -u origin source
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode 4.3とoctopress]]></title>
    <link href="http://orihubon.com/blog/2012/03/15/xcode-43-and-octopress/"/>
    <updated>2012-03-15T01:57:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/15/xcode-43-and-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://orihubon.com/blog/2012/03/15/install-rvm-and-ruby193-and-192-on-llvm-gcc-and-xcode431/">前回の記事</a>でXCode4.3.1環境でrvmを使ってRuby1.9.2をbuildしたので、その話をoctopressで書こうとおもい<code>rake new_post['hoge']</code>したら<code>bundle install</code>しろと怒られたので実行してみたら途中で止まってしまいはまった。</p>

<p>初めはXCodeまわりを疑ったが最終的にはoctopressのディレクトリのGemfileを修正して対応。以下その対応内容。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd path/to/octopress/
</span><span class='line'>$ bundle install
</span><span class='line'>Fetching gem metadata from http://rubygems.org/.......
</span><span class='line'>Using rake (0.9.2)
</span><span class='line'>Using RedCloth (4.2.8)
</span><span class='line'>Using posix-spawn (0.3.6)
</span><span class='line'>Using albino (1.3.3)
</span><span class='line'>Using blankslate (2.1.2.4)
</span><span class='line'>Using chunky_png (1.2.1)
</span><span class='line'>Using fast-stemmer (1.0.0)
</span><span class='line'>Using classifier (1.3.3)
</span><span class='line'>Using fssm (0.2.7)
</span><span class='line'>Using sass (3.1.5)
</span><span class='line'>Using compass (0.11.5)
</span><span class='line'>Using directory_watcher (1.4.0)
</span><span class='line'>Using ffi (1.0.9)
</span><span class='line'>Using haml (3.1.2)
</span><span class='line'>Using kramdown (0.13.3)
</span><span class='line'>Using liquid (2.2.2)
</span><span class='line'>Using syntax (1.0.0)
</span><span class='line'>Using maruku (0.6.0)
</span><span class='line'>Using jekyll (0.11.0)
</span><span class='line'>Using rubypython (0.5.1)
</span><span class='line'>Using pygments.rb (0.1.3)
</span><span class='line'>Using rack (1.3.2)
</span><span class='line'>Installing rb-fsevent (0.4.3.1) with native extensions Unfortunately, a fatal error has occurred. Please report this error to the Bundler issue tracker at https://github.com/carlhuda/bundler/issues so that we can fix it. Thanks!
</span><span class='line'>/Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/lib/ruby/site_ruby/1.9.1/rubygems/installer.rb:552:in `rescue in block in build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)
</span><span class='line'>
</span><span class='line'>        /Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/bin/ruby extconf.rb
</span><span class='line'>        creating Makefile
</span><span class='line'>        CFLAGS='-isysroot /Applications/Xcode.app/Contents/Developer/SDKs/MacOSX10.7.sdk -mmacosx-version-min=10.7 -mdynamic-no-pic -std=gnu99 -Os -pipe -Wmissing-prototypes -Wreturn-type -Wmissing-braces -Wparentheses -Wswitch -Wunused-function -Wunused-label -Wunused-parameter -Wunused-variable -Wunused-value -Wuninitialized -Wunknown-pragmas -Wshadow -Wfour-char-constants -Wsign-compare -Wnewline-eof -Wconversion -Wshorten-64-to-32 -Wglobal-constructors -pedantic' /usr/bin/clang -isysroot /Applications/Xcode.app/Contents/Developer/SDKs/MacOSX10.7.sdk -mmacosx-version-min=10.7 -mdynamic-no-pic -std=gnu99 -dead_strip -framework CoreServices -o '/Users/nikushi/.rvm/gems/ruby-1.9.2-p318/gems/rb-fsevent-0.4.3.1/bin/fsevent_watch' fsevent/fsevent_watch.c
</span><span class='line'>        fsevent/fsevent_watch.c:1:10: fatal error: 'stdio.h' file not found
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>                 ^
</span><span class='line'>                 1 error generated.
</span><span class='line'>                 extconf.rb:59:in `&lt;main&gt;': Compilation of fsevent_watch failed (see README) (RuntimeError)
</span></code></pre></td></tr></table></div></figure>


<p>最初、stdio.shがfile not foundと言われて途方にくれた。XCodeをずっと疑ってたのだけど以下の記事を見つけた。</p>

<ul>
<li><a href="http://zanshin.net/2012/02/17/rvm-and-xcode-4-dot-3/">RVM and Xcode 4.3</a></li>
<li><a href="http://d.karashi.org/20120303.html#p01">&ldquo;[ruby][OSX]OS X で rb-fsevent のインストールに失敗するので pre-compiled 版に変更した&rdquo;</a></li>
</ul>


<p>rb-fseventが問題みたいで、オリジナルにはcommitされていないXCode4.3対応版をGemfileに指定して対応らしい。将来的には対応されるかな。</p>

<p>以下のようにGemfileを修正した。Gemfile.orgはオリジナルのバックアップ。-の行を+の記述に置き換える。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ diff -u Gemfile.org Gemfile
</span><span class='line'>--- Gemfile.org     2012-03-15 00:28:04.000000000 +0900
</span><span class='line'>+++ Gemfile     2012-03-15 00:28:19.000000000 +0900
</span><span class='line'>@@ -10,7 +10,7 @@
</span><span class='line'>   gem 'haml', '&gt;= 3.1'
</span><span class='line'>   gem 'compass', '&gt;= 0.11'
</span><span class='line'>   gem 'rubypants'
</span><span class='line'>-  gem 'rb-fsevent'
</span><span class='line'>+  gem 'rb-fsevent', :git =&gt; 'git://github.com/ttilley/rb-fsevent.git', :branch =&gt; 'pre-compiled-gem-one-off'
</span><span class='line'>   gem 'stringex'
</span><span class='line'>   gem 'liquid', '2.2.2'
</span><span class='line'> end</span></code></pre></td></tr></table></div></figure>


<p>変更後、<code>$ bundle install</code>。通った。rvmのインストールの下りからここに至るまで長かった。XCodeでどれだけの人がはまっるんだろう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing rvm and Ruby1.9.3/1.9.2 on LLVM gcc and XCode4.3.1]]></title>
    <link href="http://orihubon.com/blog/2012/03/15/install-rvm-and-ruby193-and-192-on-llvm-gcc-and-xcode431/"/>
    <updated>2012-03-15T00:30:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/15/install-rvm-and-ruby193-and-192-on-llvm-gcc-and-xcode431</id>
    <content type="html"><![CDATA[<p>XCode 4.3.1 + rvm + Ruby1.9.3-p125の組み合わせでRubyをbuildする。</p>

<p>Mac Book Air(2011 mid)購入直後はrbenvを使っていたが結局rvmに戻すことにしたのが始まり。rvmでRubyが動くようになるまでとても苦労したので記しておく。</p>

<p>普通に考えて進めると、</p>

<ol>
<li>XCodeインストール</li>
<li>rvm install</li>
</ol>


<p>するのだけど、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The provided compiler '/usr/bin/gcc' is LLVM based, it is not yet fully supported by ruby and gems, please read `rvm requirements`.</span></code></pre></td></tr></table></div></figure>


<p>という出力で終了する。ネット上の情報を見ると<a href="https://github.com/kennethreitz/osx-gcc-installer/downloads">osx-gcc-installer</a>をインストールする例と、LLVMではないgccが入ってるXCode 4.1にダウングレードする方法と、4.2以降を使って&mdash;with-gcc=clangをつけてインストールする方法があった。今回は&mdash;with-gcc=clangをつけてRubyをbuildした。詳細は後述。</p>

<p>以下、詳細。</p>

<!-- more -->


<h3>環境</h3>

<ul>
<li>Mac OS X Version 10.7.3 Lion</li>
<li>XCode 4.3.1</li>
<li>gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)</li>
<li>rvm 1.10.3</li>
<li>rvm installするRuby

<ul>
<li>ruby-1.9.2-p318</li>
<li>ruby-1.9.3-p125</li>
</ul>
</li>
</ul>


<p>このブログ=octopressが現時点で1.9.3に対応していないため、1.9.2-p318もインストールした。</p>

<h3>rbenvをアンインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf ~/.rbenv</span></code></pre></td></tr></table></div></figure>


<h3>rvmをインストール</h3>

<p>公式ページの手順どおりやればよし。あえてコマンドは書かない。</p>

<h3>XCode</h3>

<p>XCode4.3からXCode本体とは別パッケージでgccやmake等のCLIツールだけのCommand Line Tools for XcodeというパッケージがApp Storeから入手できるようになった。</p>

<p>Mac Book Airの容量を節約できるしXCodeのCLIツールしか使わないのでこれは嬉しいので、喜んでXCodeはインストールせずCommand Line Tools for Xcodeだけインストールして、rvm install &hellip; と進めていたのだけど、最終的にやはり必要ということが分かった。</p>

<p>XCodeが結局必要な理由は話が先に飛ぶが、<code>rvm install ruby-1.9.2</code>の後octopress(このブログのシステム)用のgemをインストールする目的で<code>bundle install</code>する必要があったが、以下のとおりXCodeが見つからないというエラーが出てしまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post['rbenvからrvmに変更した']
</span><span class='line'>Could not find RedCloth-4.2.8 in any of the sources
</span><span class='line'>Run `bundle install` to install missing gems.
</span><span class='line'>mba208:octopress nikushi$ bundle install
</span><span class='line'>Fetching gem metadata from http://rubygems.org/.......
</span><span class='line'>Using rake (0.9.2)
</span><span class='line'>Installing RedCloth (4.2.8) with native extensions
</span><span class='line'>Installing posix-spawn (0.3.6) with native extensions
</span><span class='line'>Installing albino (1.3.3)
</span><span class='line'>Installing blankslate (2.1.2.4)
</span><span class='line'>Installing chunky_png (1.2.1)
</span><span class='line'>Installing fast-stemmer (1.0.0) with native extensions
</span><span class='line'>Installing classifier (1.3.3)
</span><span class='line'>Installing fssm (0.2.7)
</span><span class='line'>Installing sass (3.1.5)
</span><span class='line'>Installing compass (0.11.5)
</span><span class='line'>Installing directory_watcher (1.4.0)
</span><span class='line'>Installing ffi (1.0.9) with native extensions
</span><span class='line'>Installing haml (3.1.2)
</span><span class='line'>Installing kramdown (0.13.3)
</span><span class='line'>Installing liquid (2.2.2)
</span><span class='line'>Installing syntax (1.0.0)
</span><span class='line'>Installing maruku (0.6.0)
</span><span class='line'>Installing jekyll (0.11.0)
</span><span class='line'>Installing rubypython (0.5.1)
</span><span class='line'>Installing pygments.rb (0.1.3)
</span><span class='line'>Installing rack (1.3.2)
</span><span class='line'>Installing rb-fsevent (0.4.3.1) with native extensions Unfortunately, a fatal error has occurred. Please report this error to the Bundler issue tracker at https://github.com/carlhuda/bundler/issues so that we can fix it. Thanks!
</span><span class='line'>/Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/lib/ruby/site_ruby/1.9.1/rubygems/installer.rb:552:in `rescue in block in build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)
</span><span class='line'>
</span><span class='line'>        /Users/nikushi/.rvm/rubies/ruby-1.9.2-p318/bin/ruby extconf.rb
</span><span class='line'>        creating Makefile
</span><span class='line'>        xcode-select: Error: No Xcode folder is set. Run xcode-select -switch &lt;xcode_folder_path&gt; to set the path to the Xcode folder.
</span><span class='line'>        extconf.rb:15:in `&lt;main&gt;': Could not find a suitable Xcode installation (RuntimeError)</span></code></pre></td></tr></table></div></figure>


<p>そういうわけでXCode4.3.1をインストール。App Storeからダウンロードする。Command Line ToolはApp Storeからインストールしてもいいし、XCode起動後にPreferenceの中からでもinstall可能。どちらでもよいみたい。</p>

<p>xcode-selectコマンドでpathを確認して、セットされていないようなら-switchでセットする。XCode4.2系は/Developerだったのが4.3系からは/Application/Xcode.app/以下に変更になったらしい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcode-select  -print-path
</span><span class='line'>xcode-select: Error: No Xcode folder is set. Run xcode-select -switch &lt;xcode_folder_path&gt; to set the path to the Xcode folder.</span></code></pre></td></tr></table></div></figure>


<p>手動でセットする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
</span><span class='line'>$ xcode-select  -print-path
</span><span class='line'>/Applications/Xcode.app/Contents/Developer</span></code></pre></td></tr></table></div></figure>


<h4>Command Line Toolsの確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls /Applications/Xcode.app/Contents/Developer/usr/bin/
</span><span class='line'>BuildStrings*                     gcc@                              mksdk*
</span><span class='line'>CpMac*                            gcov@                             momc*
</span><span class='line'>DeRez*                            gcov-4.2@                         nasm*
</span><span class='line'>GetFileInfo*                      gdb*                              ndisasm*
</span><span class='line'>ImageUnitAnalyzer*                git*                              nm*
</span><span class='line'>MergePef*                         git-cvsserver*                    nmedit*
</span><span class='line'>MvMac*                            git-receive-pack@                 opendiff*
</span><span class='line'>PPCExplain*                       git-shell*                        otool*
</span><span class='line'>ResMerger*                        git-upload-archive@               pagestuff*
</span><span class='line'>Rez*                              git-upload-pack*                  projectInfo*
</span><span class='line'>RezDet*                           gitk*                             ranlib@
</span><span class='line'>RezWack*                          gnumake*                          rcs*
</span><span class='line'>SetFile*                          gprof*                            rcs2log@
</span><span class='line'>SplitForks*                       hdxml2manxml*                     rcsclean*
</span><span class='line'>UnRezWack*                        headerdoc2html*                   rcsdiff*
</span><span class='line'>agvtool*                          i686-apple-darwin11-llvm-g++-4.2@ rcsmerge*
</span><span class='line'>amlint*                           i686-apple-darwin11-llvm-gcc-4.2@ rebase*
</span><span class='line'>ar*                               ibtool*                           redo_prebinding*
</span><span class='line'>as*                               ibtool3*                          resolveLinks*
</span><span class='line'>c89*                              ibtoold*                          rlog*
</span><span class='line'>c99*                              ident*                            sdef*
</span><span class='line'>ci*                               install_name_tool*                sdp*
</span><span class='line'>cmpdylib*                         instruments*                      segedit*
</span><span class='line'>co*                               iprofiler*                        size*
</span><span class='line'>codesign_allocate*                javaconfig*                       strip*
</span><span class='line'>codesign_wrapper*                 javatool*                         svn*
</span><span class='line'>cpp*                              ld*                               svnadmin*
</span><span class='line'>ctf_insert*                       ld_classic*                       svndumpfilter*
</span><span class='line'>cvs*                              libtool*                          svnlook*
</span><span class='line'>cvsbug*                           lldb*                             svnserve*
</span><span class='line'>desdp*                            llvm-cpp-4.2@                     svnsync*
</span><span class='line'>docsetutil*                       llvm-g++@                         svnversion*
</span><span class='line'>dsymutil*                         llvm-g++-4.2@                     unwinddump*
</span><span class='line'>dvtexec*                          llvm-gcc@                         xcodebuild*
</span><span class='line'>dwarfdump*                        llvm-gcc-4.2@                     xcrun*
</span><span class='line'>dyldinfo*                         make*                             xed*
</span><span class='line'>g++@                              mapc*                             xml2man*
</span><span class='line'>gatherheaderdoc*                  merge*</span></code></pre></td></tr></table></div></figure>


<p>いろいろ入った。
ちなみに、 /usr/bin/以下にもgcc入ったけど競合しないのか?ネット上の情報をみると/Applicaitons/Xcode.app/Contents/Developer/usr/bin/は$PATHに通す必要はないらしい。まったく自信はない。</p>

<p>/usr/bin/gcc -v</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/bin/gcc -v
</span><span class='line'>Using built-in specs.
</span><span class='line'>Target: i686-apple-darwin11
</span><span class='line'>Configured with: /private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/src/configure --disable-checking --enable-werror --prefix=/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2 --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-prefix=llvm- --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin11 --enable-llvm=/private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/dst-llvmCore/Developer/usr/local --program-prefix=i686-apple-darwin11- --host=x86_64-apple-darwin11 --target=i686-apple-darwin11 --with-gxx-include-dir=/usr/include/c++/4.2.1
</span><span class='line'>Thread model: posix
</span><span class='line'>gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)</span></code></pre></td></tr></table></div></figure>


<p>/Applications/Xcode.app/Contents/Developer/usr/bin/gcc -v</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /Applications/Xcode.app/Contents/Developer/usr/bin/gcc -v
</span><span class='line'>Using built-in specs.
</span><span class='line'>Target: i686-apple-darwin11
</span><span class='line'>Configured with: /private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/src/configure --disable-checking --enable-werror --prefix=/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2 --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-prefix=llvm- --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin11 --enable-llvm=/private/var/tmp/llvmgcc42/llvmgcc42-2336.9~22/dst-llvmCore/Developer/usr/local --program-prefix=i686-apple-darwin11- --host=x86_64-apple-darwin11 --target=i686-apple-darwin11 --with-gxx-include-dir=/usr/include/c++/4.2.1
</span><span class='line'>Thread model: posix
</span><span class='line'>gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)</span></code></pre></td></tr></table></div></figure>


<p>同じgccなので気にしないで進む。</p>

<h3>Compiling Ruby</h3>

<p>依存性のあるzlib、openssl、ncurses等を$HOME/.rvm/usr/以下にインストールしとく。zlibが入ってないとインストール後のgemの実行で失敗したので。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm pkg install ree_dependencies</span></code></pre></td></tr></table></div></figure>


<p>Rubyをインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 1.9.2 --with-gcc=clang
</span><span class='line'>$ rvm install 1.9.3 --with-gcc=clang</span></code></pre></td></tr></table></div></figure>


<p>&mdash;with-gcc=clangはLLVM gcc対応のため。毎回つけるの面倒くさいな。rvm側の今後のバージョンアップで改善されないかなと期待。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Install of ruby-1.9.2-p318 - #complete 
</span><span class='line'>clang: error: unsupported option '--with-libyaml'
</span><span class='line'>Ruby 'ruby-1.9.2-p318' was build using clang - but it's not (fully) supported, expect errors.</span></code></pre></td></tr></table></div></figure>


<p>成功するけど&mdash;with-libyamlはサポートしてないという警告がでた。とっても気になるのだけどとりあえず気にせず先に進めることにする。問題でないという自信はまったくない。</p>

<p>デフォルトは1.9.3に。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 1.9.3-p125 --default
</span><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p125 (2012-02-16 revision 34643) [x86_64-darwin11.3.0]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ irb
</span><span class='line'>1.9.3p125 :001 &gt; "Enjoy Ruby with rvm"
</span><span class='line'> =&gt; "Enjoy Ruby with rvm" </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpressからoctopressに移行した(画像移行編)]]></title>
    <link href="http://orihubon.com/blog/2012/03/11/migrate-from-wordpress-to-octopress-part2-image-files/"/>
    <updated>2012-03-11T22:36:00+09:00</updated>
    <id>http://orihubon.com/blog/2012/03/11/migrate-from-wordpress-to-octopress-part2-image-files</id>
    <content type="html"><![CDATA[<p>前回の記事とおり、ブログの過去の記事をWordpressからOctopressに移行したが、ブログの記事に貼付けた画像ファイルは移行後にリンク切れ状態のままでした。過去記事の画像を表示するよう修正します。</p>

<!-- more -->


<ul>
<li>移行前(Wordpress)の画像ファイル置き場は/wp-content/uploads/</li>
<li>移行後(octopress)の画像ファイル置き場は/images/</li>
</ul>


<p>Wordpressはxreaのサーバで運用していたので、sshでログインしてローカルのMacまでscpしてきた。 ~/tmp/uploads/ あたりに保存しとく。</p>

<p>つづいてローカルのoctopressディレクトリにコピーする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Documents/Blog/octopress
</span><span class='line'>cp ~/tmp/uploads/* source/images/</span></code></pre></td></tr></table></div></figure>


<p>source/images以下にコピーすると、<code>rake deploy</code>すると<code>http://username.github.com/images/</code>以下にマップされるみたい。</p>

<p>続いて過去記事のaタグとimgタグの修正。過去記事を確認したら、 <code>&lt;a href="http://orihubon.com/wp-contents/uploads/hogehoge.jpg"&gt;</code>みたいに<a href="http://%E3%81%A7%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E3%80%81%E6%96%B9%E9%87%9D%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AFhttp://orihubon.com/uploads/%E3%82%92%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E6%B6%88%E3%81%97%E3%81%A6/images%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AB%E3%81%99%E3%82%8B%E3%80%82">http://%E3%81%A7%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E3%80%81%E6%96%B9%E9%87%9D%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AFhttp://orihubon.com/uploads/%E3%82%92%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E6%B6%88%E3%81%97%E3%81%A6/images%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AB%E3%81%99%E3%82%8B%E3%80%82</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd source</span>/_posts
</span><span class='line'><span class="k">for </span>f in <span class="k">$(</span> ls <span class="k">)</span>; <span class="k">do  </span>ruby -ne <span class="s1">&#39;$_.gsub!(%r!http://orihubon.com/wp-content/uploads/!, &quot;/images/&quot;); puts $_;&#39;</span> &lt; <span class="nv">$f</span> &gt; tmp; mv tmp <span class="nv">$f</span>; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のコードは単純に置換してるだけ。過去記事のaタグやimgタグ意外のテキストも置き換えるのですが、私の記事をgrepして確認したらなかったので、parseしなくていいやということでシンプルに置き換えた。</p>

<p>生成して確認する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://localhost:4000/%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%A6%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%80%82">http://localhost:4000/%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%A6%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%80%82</a></p>

<p>deployし公開。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>commitもしとく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s2">&quot;Imported image files from old wordpress blog&quot;</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
