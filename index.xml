<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ni-blog </title>
    <link>http://orihubon.com/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2015</rights>
    <updated>2015-12-04 10:12:15 &#43;0900 JST</updated>

    
      
        <item>
          <title>Nagiosの監視変更作業をGitHubを使って楽にした話し</title>
          <link>http://orihubon.com/blog/2015/12/04/nagios-github/</link>
          <pubDate>Fri, 04 Dec 2015 10:12:15 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/12/04/nagios-github/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/netopscoding&#34;&gt;NetOpsCoding Advent Calendar 2015&lt;/a&gt;の9日目の記事です。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;DeNAという会社のネットワークチームで働いています。ネットワーク機器の死活監視にNagiosを使っています。今日書くのは監視対象追加や閾値修正等の運用について、レガシーな従来の仕組みをGitHub(とpull request)と自動deployで改善した話しをします。&lt;/p&gt;

&lt;p&gt;私の入社当時はNagiosの設定ファイルはCVSで設定ファイルを管理されてはいましたが、日々の作業(閾値変更など)は監視サーバへSSHログインして行う必要がありました。またNagiosサーバの数が複数台あり、どのサーバでどのネットワーク機器が監視されているか分かりにくかったとおもいます。&lt;/p&gt;

&lt;p&gt;以下、改善したかった点です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;誰が作業してるか見える化したかった&lt;/li&gt;
&lt;li&gt;閾値変更等に対して作業前にレビューを可能にしたかった(レビュー必須ではない)&lt;/li&gt;
&lt;li&gt;サーバログインレスにする。複数台のNagiosサーバのどれにログインするとか考えたくない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを実現するためにの仕組みは以下のようになりました。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/nagios-integration.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定ファイル管理はCVSからGitHubへ移行

&lt;ul&gt;
&lt;li&gt;プロジェクトルート以下にNagiosサーバホスト名毎のディレクトリを作る&lt;/li&gt;
&lt;li&gt;テンプレートエンジン等の自動生成の仕組みは不要だったので、素の設定をGitに突っ込むだけ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変更はPull Requestで。いわゆる&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow&lt;/a&gt;で運用

&lt;ul&gt;
&lt;li&gt;手元のMac等で監視項目追加、閾値変更等毎にトピックブランチを作りmasterブランチに対してpull request&lt;/li&gt;
&lt;li&gt;レビューする(ケースバイケース)&lt;/li&gt;
&lt;li&gt;masterブランチにマージされるとCIサーバがNagiosサーバへ設定ファイルをdeploy &amp;amp;&amp;amp; Nagiosプロセスreload&lt;/li&gt;
&lt;li&gt;GitHubからCIサーバへはwebhookで通知し連携&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CIサーバ兼、撒き元サーバ

&lt;ul&gt;
&lt;li&gt;CIにはJenkinsを使う&lt;/li&gt;
&lt;li&gt;CIサーバからNagiosサーバへはsshログイン可能にしておく&lt;/li&gt;
&lt;li&gt;撒きスクリプトはCapistrano + RSync(+ssh) で実装&lt;/li&gt;
&lt;li&gt;撒きスクリプトはJenkinsのbuildタスクとして登録しておく&lt;/li&gt;
&lt;li&gt;撒きの結果はSlackで通知&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この改善により、pull requestベースで変更が全て行われるようになるので作業が見える化され、また閾値の妥当性などについてコメントで議論することもでき色々捗るようになりました。またmasterブランチへマージするとNagiosサーバのreloadまでが裏側で自動実施されるのでサーバログイン不要となりまた気軽に閾値変更できるようにもなりました。&lt;/p&gt;

&lt;p&gt;実のところWebアプリケーションのCIとdeploy作業の自動化といったコンテキストでよく出てくるワークフローと同じです。また設定を撒くところはChefやPuppetで置き換えてもいいかもしれませんが、私の所ではテンプレートエンジン等も不要だったのでシンプルで早いRSyncで巻く方法を取りました。&lt;/p&gt;

&lt;p&gt;またこれにあたってはZabbixなど他の監視ミドルウェアへの移行も検討していましたが、最終的にはデータベースもいらず学習コストも低くメンバが仕組みにもなれたNagiosから別のミドルウェアに移行するほどのメリットが見いだせずNagiosを使って運用を改善することにしました。&lt;/p&gt;

&lt;p&gt;実はこれやったのは結構前の話しだったりするのですが、ソフトウェアからのネットワーク機器操作によってネットワーク運用の自動化を志す人達のAdvent Calendar、という機会を得てようやく書けた次第でよかった。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>英語学習 x コマンドラインツール</title>
          <link>http://orihubon.com/blog/2015/10/06/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92-x-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%84%E3%83%BC%E3%83%AB/</link>
          <pubDate>Tue, 06 Oct 2015 22:47:17 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/10/06/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92-x-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%84%E3%83%BC%E3%83%AB/</guid>
          <description>

&lt;p&gt;最近Skypeで英会話レッスンを受けてレッスン後には復習をさっとやるのですが、辞書を引く、単語の発音確認などの作業をささっとコマンドラインツールで出来たらとおもいまとめてみました。ほぼMac限定です。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;辞書:bd384aa5a3082b8866558cf890d67ac1&#34;&gt;辞書&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;open dict://WORD&lt;/code&gt;でターミナルからMac付属のDictionaly.app(辞書.app)を開ける&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ open dict://Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.bashrc, .zshrcなどにエイリアス登録しとくと&lt;code&gt;$ dict Hello&lt;/code&gt;で使えて便利。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function dict {
  if [ $# -eq 0 ]; then
    echo &amp;quot;Usage: dict WORD&amp;quot; 1&amp;gt;&amp;amp;2
    return 1
  fi
  open dict://$@
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あらかじめDictionaly.appの設定で必要な辞書(英英、英和、和英などなど)好みの設定にしておくとよい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 2015/10/12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;はてブコメント経由で辞書引いた結果をターミナル内で完結しないのか、というのがあり調べてみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jakwings/macdict]&#34;&gt;jakwings/macdict&lt;/a&gt;というのが良さそう。CLIオプションで辞書を選択できるようになってた。また&lt;a href=&#34;https://github.com/sekimura/lookup&#34;&gt;sekimura/lookup&lt;/a&gt;というのも見つけたがこちらは任意の辞書選択は出来ないみたい。&lt;/p&gt;

&lt;p&gt;ただ文字列を整形して(例えばmanみたいに)出してくれる訳ではないのでやはり読みやすくはないので、個人的な意見としてはopen dict://で辞書アプリに飛ぶ方が良いかなー。&lt;/p&gt;

&lt;h3 id=&#34;発音確認:bd384aa5a3082b8866558cf890d67ac1&#34;&gt;発音確認&lt;/h3&gt;

&lt;p&gt;sayコマンドでMacが喋り出す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ say &amp;quot;Bob’s mother became sick three month ago&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-r NUMBER&lt;/code&gt;オプションで1分間のワードレートを変更できる。-r 100くらいにするとゆっくり喋ってくれる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ say -r 100 Please speak slowly
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;自分の発音を録音し即時再生:bd384aa5a3082b8866558cf890d67ac1&#34;&gt;自分の発音を録音し即時再生&lt;/h3&gt;

&lt;p&gt;soxコマンド付属のコマンドを使うとコマンドラインで録音、オーディオファイル再生ができる。&lt;/p&gt;

&lt;p&gt;インストール。sox, rec, playコマンドがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install sox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドで録音 -&amp;gt; Ctrl-cで録音終了 -&amp;gt; 即時再生となる。簡易ボイスレコーダになって便利。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rec /tmp/a.wav; play /tmp/a.wav; rm /tmp/a.wav

Input File     : &#39;default&#39; (coreaudio)
Channels       : 2
Sample Rate    : 44100
Precision      : 32-bit
Sample Encoding: 32-bit Signed Integer PCM

In:0.00% 00:00:01.83 [00:00:00.00] Out:79.9k [   ===|===   ]  Clip:0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.zshrc, .bashrcなどに&lt;code&gt;alias rec-play=&#39;rec /tmp/a.wav; play /tmp/a.wav; rm /tmp/a.wav&#39;&lt;/code&gt;としておくと便利。&lt;/p&gt;

&lt;p&gt;いろいろ便利。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>daemontoolsインストール後にトラブった</title>
          <link>http://orihubon.com/blog/2015/09/11/daemontools%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%BE%8C%E3%81%AB%E3%83%88%E3%83%A9%E3%83%96%E3%81%A3%E3%81%9F/</link>
          <pubDate>Fri, 11 Sep 2015 11:50:31 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/09/11/daemontools%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%BE%8C%E3%81%AB%E3%83%88%E3%83%A9%E3%83%96%E3%81%A3%E3%81%9F/</guid>
          <description>&lt;p&gt;普段と違うで順でマシンをセットアップした時のこと。daemontoolsまわりたまにハマると詰んだ。メモメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 6.3&lt;/li&gt;
&lt;li&gt;upstart経由でsvscanbootを起動させる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういう構成&lt;/p&gt;

&lt;p&gt;daemontoolsをrpmからインストールした後、上げたいプロセス(mysqld)が起動しなくて困った。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svscan: warning: unable to start supervise mysql: file does not exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こういうエラーが出てる。でもためしにupstart経由せずマニュアル &lt;code&gt;$ svscan /service&lt;/code&gt; で起動するとうまく起動する。$PATH確認してみたりパーミッション確認したりしたが問題なさそう。英語Q&amp;amp;AサイトでOS再起動したら治るよ、っていう記述があって乱暴だな&amp;hellip;とおもったのだが。困ったときのreboot、マシンを再起動したらupstart経由でデーモン起動できた。謎&amp;hellip;。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>スキマトークで英会話レッスン受けてみた</title>
          <link>http://orihubon.com/blog/2015/09/07/start-off-skimatalk/</link>
          <pubDate>Mon, 07 Sep 2015 11:37:02 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/09/07/start-off-skimatalk/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://www.skimatalk.com/jp/&#34;&gt;スキマトーク&lt;/a&gt;というSkypeを使ってネイティブと英会話レッスンできるサービスを使ってみた。&lt;/p&gt;

&lt;p&gt;10月に海外出張行く関係で、会社で英会話レッスン(実際に会って会話する1 on 1 レッスン)を週1受けることになった。あまり時間はなく付け焼き刃感はあるもののいずれにせよ誠にありがたい。&lt;/p&gt;

&lt;p&gt;先日1回目があり、レッスン終わりに次回日程を決め次回は1週間後となったのだけど、はてそこでおもったのが1週間に1回の英会話レッスンで英語が流暢に話せるようになるだろうか?&amp;hellip;.なるいやなるわけがない!ということ。最近筋トレしていて時々筋トレ基準で考えることがあるのだけど週1回30分筋トレだけでマッチョになるわけはない。&lt;/p&gt;

&lt;p&gt;Listeningについては数ヶ月前からHuluで毎日寝る前に聞いてる一応鍛えてる。でもSpeakingは英会話レッスン以外で機会を作れない。そこでレッスン頻度を増やすべきだと考えた。ひとつは、会社に頼んで回数を増やしてもらう。この調整はできそうではあるが、社内英会話とは別のやりかたを混ぜてやってみるのも面白そうだったのでSkype英会話を試してみた。&lt;/p&gt;

&lt;p&gt;前置きが長くなったが&lt;a href=&#34;https://www.skimatalk.com/jp/&#34;&gt;スキマトーク&lt;/a&gt;を利用してみた。他にも似たサービスは沢山あるが比較検討はしてない。選択理由はスキマトークの割引が受けれたからでとりあえず使ってみて良かったら継続してみよう、くらい。ちなみに私は回し者ではないことを断っておく。&lt;/p&gt;

&lt;p&gt;週末1回、平日1回計2回とりあえず受けてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;世界中からネイティブの先生が登録されている&lt;/li&gt;
&lt;li&gt;自分にあうレッスンをサイトから探して、時間を決めて先生を選ぶ&lt;/li&gt;
&lt;li&gt;レッスン時間になるとskypeで先生から電話がかかってくるのでレッスンのスライドを見ながら進める&lt;/li&gt;
&lt;li&gt;値段は9コイン(=$9)前後/30分、先生によって値段がちがう&lt;/li&gt;
&lt;li&gt;授業後は、生徒から先生をレーティングできる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じ。Airbnbの英会話版みたいなとは言い過ぎかもしれないけどそういう印象で、先生を評価できるので沢山レビューもらった先生はより授業のofferが来る仕組みのようだ。そうすると先生もより熱心に頑張るのかなという印象。&lt;/p&gt;

&lt;p&gt;初回登録したとき初回10コインもらえたので1回目は実質無料で受けることができた。2回めは10コインクレジットカードでチャージした。&lt;/p&gt;

&lt;p&gt;1回目は何も考えずに適当に先生を選んでみたらSouth Englandの先生でイギリス英語アクセントでそれはそれで興味深かった。1回目の先生は真面目で淡々とレッスンを進めるタイプでところどころ発音を丁寧に教えてくれた。1回目の先生はイギリス英語でかっちりした発音で聴きやすかった。&lt;/p&gt;

&lt;p&gt;また2回目はアメリカのフロリダ出身で今現在はシンガポールで英語の先生をしていて普段は子供に教えてるとのこと。朝の授業にもかかわらず明るい授業をありがとうございます。2回目の先生はアメリカ英語なので流れるような流暢さ++で個人的には聞き取りにくい部分もあった。&lt;/p&gt;

&lt;p&gt;先生によって訛りが異なるので個人的には色々な発音が聞けて面白いとおもった。また先生は毎回変えれるので合わなかったら変えることができて良いなと。実際の英会話学校だと先生変えるのって気を使うのかな?(通ったことないから分からない)&lt;/p&gt;

&lt;p&gt;あとSkype英会話の良いなとおもったのは、授業中に指摘されることをリアルタイムにSkypeチャットで先生がメモしてくれること。アクセントとか、間違った文法を正してくれたり。授業後に振り返る時にとても助かるのでこれはいいなとおもった。&lt;/p&gt;

&lt;p&gt;2回受けての感想としてはSkype英会話便利だった。家の外にでずに隙間時間でさくっとできて便利。&lt;/p&gt;

&lt;p&gt;当面の目標は出張用なのでレッスン内容をも少し考えたいところ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ブログタイトル変更しました</title>
          <link>http://orihubon.com/blog/2015/09/06/%E3%83%96%E3%83%AD%E3%82%B0%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
          <pubDate>Sun, 06 Sep 2015 19:23:58 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/09/06/%E3%83%96%E3%83%AD%E3%82%B0%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
          <description>&lt;p&gt;ni-blog 改め Nikushi&amp;rsquo;s blog に変更しました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hugoに移行</title>
          <link>http://orihubon.com/blog/2015/09/06/hugo%E3%81%AB%E7%A7%BB%E8%A1%8C/</link>
          <pubDate>Sun, 06 Sep 2015 19:13:43 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/09/06/hugo%E3%81%AB%E7%A7%BB%E8%A1%8C/</guid>
          <description>&lt;p&gt;ブログのツールをOctopressからHugoに移行した。&lt;/p&gt;

&lt;p&gt;週末の時間を利用してHugoに移行してみた。HugoはGoで作られた静的サイト生成ツール。&lt;/p&gt;

&lt;p&gt;移行は案外大変だったけどhugoのコンパイル処理がサクサク動いて良い感じ。デザインも変えてみた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>h2oでreverse proxy</title>
          <link>http://orihubon.com/blog/2015/08/19/h2o/</link>
          <pubDate>Wed, 19 Aug 2015 14:18:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/08/19/h2o/</guid>
          <description>

&lt;p&gt;HTTP/2対応の高速なHTTPサーバ、h2oを使ってみた。&lt;/p&gt;

&lt;p&gt;今回、HTTP/2でリクエスト受けて裏側のアプリサーバへHTTP/1.1で流すreverse proxyとして動かしてみた。reverse proxy先へはunix domain socket経由で、またdaemontools経由で起動させるようにした。&lt;/p&gt;

&lt;p&gt;環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;h2o v1.4.3&lt;/li&gt;
&lt;li&gt;OS CentOS 6.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール:baa3a62230554beda5fd070b201e9e43&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;自前でbuildした&lt;/p&gt;

&lt;h4 id=&#34;cmake-libyaml:baa3a62230554beda5fd070b201e9e43&#34;&gt;cmake &amp;amp; libyaml&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install cmake libyaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;libuv:baa3a62230554beda5fd070b201e9e43&#34;&gt;libuv&lt;/h4&gt;

&lt;p&gt;libuv 1.0.0 以上が必要。CentOSのパッケージのバージョンは古いため自前でbuild。libuvをbuildするためにはlibtoolが必要だったのでyumで入れた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install libtool
cd /var/tmp
wget https://github.com/libuv/libuv/archive/v1.7.0.tar.gz
tar zxvf v1.7.0.tar.gz
cd libuv-1.7.0
./autogen.sh
./configure --prefix=/usr/local/libuv-1.7.0
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;h2o:baa3a62230554beda5fd070b201e9e43&#34;&gt;h2o&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cd /var/tmp
wget https://github.com/h2o/h2o/archive/v1.4.3.tar.gz
tar zxvf v1.4.3.tar.gz
cd h2o-1.4.3/
PKG_CONFIG_PATH=/usr/local/libuv-1.7.0/lib/pkgconfig/ cmake -DWITH_BUNDLED_SSL=on -DCMAKE_INSTALL_PREFIX=/usr/local/h2o-1.4.3 .
make
sudo make install
sudo ln -s /usr/local/h2o-1.4.3 /usr/local/h2o
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;設定:baa3a62230554beda5fd070b201e9e43&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;設定はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#/etc/h2o/h2o.conf
---
max-connections: 1024
num-threads: 4
user: nobody
hosts:
  &amp;quot;www.example.com:80&amp;quot;:
    listen:
      host: 0.0.0.0
      port: 80
    paths:
      &amp;quot;/&amp;quot;:
        redirect: https://www.example.com/
  &amp;quot;www.example.com:443&amp;quot;:
    listen:
      host: 0.0.0.0
      port: 443
      ssl:
        certificate-file: /etc/h2o/www.example.com.cer
        key-file: /etc/h2o/www.example.com.key.pem
    proxy.timeout.io: 30000
    paths:
      &amp;quot;/&amp;quot;:
        proxy.reverse.url: http://[unix:/tmp/unicorn.sock]/
        proxy.preserve-host: ON
      &amp;quot;/assets&amp;quot;:
        file.dir: /path/to/app/public/assets
access-log: /var/log/h2o/access.log
error-log: /var/log/h2o/error.log
pid-file: /var/spool/h2o/pid
http2-reprioritize-blocking-assets: ON
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;基本HTTPSで受ける(HTTPできたらHTTPSにリダイレクト)&lt;/li&gt;
&lt;li&gt;裏側のアプリ(Rails)とのつなぎはTCPではなくunix domain socket経由にしてみた

&lt;ul&gt;
&lt;li&gt;2015/8/19現在公式のドキュメントにはないけど&lt;a href=&#34;https://github.com/h2o/h2o/issues/383&#34;&gt;#383&lt;/a&gt;を参考に、&lt;code&gt;proxy.reverse.url: http://[unix:/tmp/unicorn.sock]/&lt;/code&gt;こう書いたら動く:)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;起動スクリプト:baa3a62230554beda5fd070b201e9e43&#34;&gt;起動スクリプト&lt;/h3&gt;

&lt;p&gt;ちゃんと動かすために今回はdaemontools経由で起動させてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#/service/h2o/run
#!/bin/sh
exec 2&amp;gt;&amp;amp;1
DAEMON=/usr/local/h2o/bin/h2o
CONFIG=/etc/h2o/h2o.conf

if [ ! -x &amp;quot;$DAEMON&amp;quot; ]; then
  echo &amp;quot;not executable: $DAEMON&amp;quot; &amp;gt;&amp;amp;2
  exit 1
fi

# Test configuration
$DAEMON -t -c $CONFIG
if [ $? -ne 0 ]; then
  echo &amp;quot;Failed to test $CONFIG&amp;quot; &amp;gt;&amp;amp;2
  exit 1
fi

ulimit -n 32896

exec \
  setuidgid root \
  $DAEMON \
  -m master \
  -c $CONFIG \
  ;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;-t で起動せずコンフィグのsyntaxチェックできる。&lt;/li&gt;
&lt;li&gt;-m master でh2oを起動するとデーモンモードで動く。HUPシグナルを受け取るとgraceful restartしてくれるモード。&lt;/li&gt;
&lt;li&gt;-m asterで起動すると中ではServer::Starterがh2oを起動してる&lt;/li&gt;
&lt;li&gt;abで負荷かけつつサーバ側で&lt;code&gt;while [ 1 ]; do sleep 1 ; echo ok ; svc -h /service/h2o/ ; done&lt;/code&gt;やってみたけど無事捌いてくれた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;まとめ:baa3a62230554beda5fd070b201e9e43&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;以上、h2oを動かした。&lt;/p&gt;

&lt;p&gt;社内にあるほぼ個人プロジェクトサイトをSSL化するついでにnginxからh2oに置き換えて様子見中。自分で構築したサイトでChromeのSPDY indicatorが青く(HTTP/2)に光るの嬉しいな。&lt;/p&gt;

&lt;h3 id=&#34;参考:baa3a62230554beda5fd070b201e9e43&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/cubicdaiya/items/d6f3a165fa29e199afb1&#34;&gt;h2oとUnixドメインソケット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hb.matsumoto-r.jp/entry/2015/07/31/220948&#34;&gt;H2Oとmrubyを使ってIPアドレスベースでアクセス制御しつつリバースプロキシとして動かしてWebサイトをHTTP/2化しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>SmokePingをPlack &#43; Perlbrew &#43; Alien::RRDtoolで動かす</title>
          <link>http://orihubon.com/blog/2015/04/19/plackup-smokeping-with-perlbrew/</link>
          <pubDate>Sun, 19 Apr 2015 11:45:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/04/19/plackup-smokeping-with-perlbrew/</guid>
          <description>

&lt;p&gt;SmokePingをApache+CGIではなくPlackだけで動かしてみた。&lt;/p&gt;

&lt;p&gt;以前書いた&lt;a href=&#34;http://orihubon.com/blog/2013/02/18/install-smokeping/&#34;&gt;SmokePingをインストールしてみた&lt;/a&gt;という記事ではシステムPerl + Apache CGI + yumからrrdtool, rrdtoo-perlをインストールする方法でやったが、今回は違う方針で入れてみた。&lt;/p&gt;

&lt;p&gt;やりたいこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;システムPerlではなくperlbrewで入れたperlを使う&lt;/li&gt;
&lt;li&gt;PlackでApache無しでWeb画面を立ち上げる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、RRDToolをシステムのパッケージシステムからインストールしPerlで使おうとするとCentOSの場合、rrdtoolとrrdtool-perlを入れることになる。rrdtool-perlを使うにはシステムPerlを使わなければならず、今回やりたいperlbrew perlを使えない。そこでAlien::RRDtoolを使ってrrdtoolをbuildすることでRRDToolをperlbrew perlで使えるようになる。Alien::RRDtoolは@gfxさんの&lt;a href=&#34;http://perl-users.jp/articles/advent-calendar/2011/hacker/2&#34;&gt;Alien::RRDtool - RRDtoolをCPANから入れる&lt;/a&gt;が大変参考になる。&lt;/p&gt;

&lt;p&gt;Plack化するためCGI::Emulate::PSGIを使う。&lt;/p&gt;

&lt;p&gt;以下CentOS6での作業&lt;/p&gt;

&lt;h4 id=&#34;rrdtoolのbuildに必要なパッケージを入れる:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;RRDToolのbuildに必要なパッケージを入れる&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# yum install cairo cairo-devel pango pango-devel libxml2-devel bitmap-console-fonts vlgothic-fonts vlgothic-fonts-common
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;perlbrewでsmokeping用perlをbuildする:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;PerlbrewでSmokePing用Perlをbuildする&lt;/h4&gt;

&lt;p&gt;perlbrewの&lt;code&gt;--as&lt;/code&gt;オプションを使ってperlを名前付きでインストールする。今回の作業で必須ではないが、perlのバージョンを上げたいときに普通にインストールするとshebangのパスを書き換えないといけないが、&lt;code&gt;--as&lt;/code&gt;オプションを付けると変えなくて済むので便利。&lt;/p&gt;

&lt;p&gt;まずsmokepingユーザを作成する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# groupadd smokeping
# useradd smokeping -g smokeping
# su - smokeping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてperlbrewをsmokepingユーザ環境化に入れる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ \curl -L http://install.perlbrew.pl | bash
$ echo &#39;source $HOME/perl5/perlbrew/etc/bashrc&#39; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;build&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl_version=5.20.2
$ perl_name=smokeping
$ perlbrew install $perl_version --as $perl_name  -j 4 -v 
   =&amp;gt; ~/perl5/perlbrew/perls/$perl_name にperlがインストールされる
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;smokepingのsourceをダウンロード:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;SmokePingのsourceをダウンロード&lt;/h4&gt;

&lt;p&gt;次のcpanmの工程で必要なので、まずsourceをダウンロードしておく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.11.tar.gz
$ tar zxf smokeping-2.6.11.tar.gz
$ cd smokeping-2.6.11
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;cpanモジュールインストール:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;CPANモジュールインストール&lt;/h4&gt;

&lt;p&gt;SmokePingが依存するCPANモジュール、 Alien::RRDtool、Plack関連モジュールをインストールする&lt;/p&gt;

&lt;p&gt;まず、perlbrew perlを使ってまずcpanmを入れる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew use $perl_name
$ curl -L https://cpanmin.us | perl - App::cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてcpanmを使ってperlbrew perl以下にCPANモジュールをインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Alien::RRDtool CGI::Emulate::PSGI Plack `cat PERL_MODULES`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PERL_MODULESはSmokePingのsourceに含まれているファイルでインストールすべきモジュールリストが定義されているのでここでインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;smokepingをインストール:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;SmokePingをインストール&lt;/h4&gt;

&lt;p&gt;SmokePingを普通に./configure -&amp;gt; make -&amp;gt; make installするとシステムPerlを使おうとするので一工夫が必要で、configure時に&lt;code&gt;PERL&lt;/code&gt;環境変数で使うperlを指定することが出来る。また&lt;code&gt;--enable-pkgonly&lt;/code&gt;オプションを指定することでSmokePingのインストーラ自身がCPANモジュールをインストールするのを止めている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ PERL=/home/smokeping/perl5/perlbrew/perls/smokeping/bin/perl ./configure --prefix=/usr/local/SmokePing --enable-pkgonly
$ make 
$ sudo /usr/bin/gmake install
$ sudo chown -R smokeping:smokeping /usr/local/SmokePing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本当にperlbrew perlを使ってるかshebangを確認してみる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ head -1  /usr/local/SmokePing/bin/smokeping
#!/home/smokeping/perl5/perlbrew/perls/smokeping/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;plackupする:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;plackupする&lt;/h4&gt;

&lt;p&gt;準備は整ったのでsmokepinユーザでplackupしてみる。なお今回は/smokepingをSmokePingのrootにした。&lt;/p&gt;

&lt;p&gt;まず、SmokePingの設定ファイルのうち以下の項目の修正が必要。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imgcache = /usr/local/SmokePing/cache
imgurl   = /smokeping/cache
cgiurl   = http://localhost:5000/smokeping/  # URLは適宜読み替えてください
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のapp.psgiを/usr/local/Smokeping/に置く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use warnings;
use strict;

use Plack::Builder;
use CGI::Emulate::PSGI;
use CGI qw();

use Smokeping;

my $smokeping = sub {
    CGI::initialize_globals();
    my $q = CGI-&amp;gt;new;
    # 適宜configは作成してください
    Smokeping::cgi(&amp;quot;/usr/local/Smokeping/etc/config&amp;quot;, $q);
};
$smokeping  = CGI::Emulate::PSGI-&amp;gt;handler( $smokeping );

builder {
    use Plack::App::File;
    mount &amp;quot;/smokeping/cache&amp;quot; =&amp;gt; Plack::App::File-&amp;gt;new(root =&amp;gt; &#39;./cache&#39;)-&amp;gt;to_app;
    mount &amp;quot;/smokeping/cropper&amp;quot; =&amp;gt; Plack::App::File-&amp;gt;new(root =&amp;gt; &#39;./htdocs/cropper&#39;)-&amp;gt;to_app;
    mount &amp;quot;/smokeping&amp;quot; =&amp;gt; $smokeping;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/cacheと/cropperはそれぞれ画像ファイルとjsファイルの参照のため。&lt;/p&gt;

&lt;p&gt;plackup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/SmokePing
$ plackup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:5000/smokeping&#34;&gt;http://localhost:5000/smokeping&lt;/a&gt; でweb画面が見れます!!!&lt;/p&gt;

&lt;p&gt;あとはpingプロセスを立ち上げる。これもsmokepingユーザで動かす。別途fping等インストールしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/local/SmokePing/bin/smokeping
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;まとめ:7cd04675aa0acc78f5f9de741333a9de&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;何がいいの? システムPerl使いたくない人向け。また管理画面なのでCGIでも十分ではあるけどApache立てずに動かしたい人には便利。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AngularJSことはじめ</title>
          <link>http://orihubon.com/blog/2015/04/17/angularjs-1/</link>
          <pubDate>Fri, 17 Apr 2015 12:27:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/04/17/angularjs-1/</guid>
          <description>

&lt;p&gt;仕事でAngularJSを使う機運が高まっているので素振り1日目。数時間Webブラウジングしたメモ。&lt;/p&gt;

&lt;h4 id=&#34;メモ:da71029cbecbb67e280045d1b45488bd&#34;&gt;メモ&lt;/h4&gt;

&lt;p&gt;Webの情報、podcastから得た今日の成果&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AngularJSはJavascriptのフレームワーク&lt;/li&gt;
&lt;li&gt;フルスタック&lt;/li&gt;
&lt;li&gt;クライアントサイドMVW(Model, View and Whatever)&lt;/li&gt;
&lt;li&gt;AngularJS 現在のバージョンは 1.3.15, 今後 version 2が出る機運&lt;/li&gt;
&lt;li&gt;他にはBackbone.js, React.js&lt;/li&gt;
&lt;li&gt;HTMLタグを拡張 e.g. &lt;code&gt;&amp;lt;html ng-app&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;yourName&amp;quot; placeholder=&amp;quot;Enter a name here&amp;quot;&amp;gt;&lt;/code&gt; こういうの。ngなんとかという記述が沢山出てくる。&lt;/li&gt;
&lt;li&gt;シングルWebページアプリケーション向き&lt;/li&gt;
&lt;li&gt;業務アプリ、管理アプリなどCRUDなアプリに向いている&lt;/li&gt;
&lt;li&gt;jQueryを使うとdom操作をつらつらと書く。コードが大きくなって後から読めなくなる。AngularJSだとコード量少なく書ける&lt;/li&gt;
&lt;li&gt;SEOに向かないらしい。ボットアクセスの時はPhantomJSでサーバサイドでhtml生成して返すといったことをやってる人がいる。&lt;/li&gt;
&lt;li&gt;SEOが重要なサイトには使わないという割りきってもいい、という人もいる&lt;/li&gt;
&lt;li&gt;フルスタックゆえか学習コストは高い&lt;/li&gt;
&lt;li&gt;例えばサーバサイドをRailsで作る場合、2パターンのアプローチが取れる

&lt;ul&gt;
&lt;li&gt;RailsでAngularJSのコードを含んだhtmlレンダリングして、クライアントサイドでAngularJSを使う&lt;/li&gt;
&lt;li&gt;もしくはRailsはXHRのAPIとして、ビジネスロジックとビューのレンダリング、フォームバリデーションなどはAngularJSに任せる&lt;/li&gt;
&lt;li&gt;アプリ化を見据えている人は後者のアプローチをとっているみたい&lt;/li&gt;
&lt;li&gt;(個人的にはRailsの恩恵を受けたいのでサーバサイドで一定のロジックを作りたい)&lt;/li&gt;
&lt;li&gt;Rails + AngularJSの例はここを見るとよさそう&lt;a href=&#34;https://github.com/mkwiatkowski/todo-rails4-angularjs&#34;&gt;kwiatkowski/todo-rails4-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;jQueryプラグインと一緒に使うとハマるかも&lt;/li&gt;
&lt;li&gt;困ったときはStackoverflow&lt;/li&gt;
&lt;li&gt;レガシーブラウザサポートはしてない&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;podcasts:da71029cbecbb67e280045d1b45488bd&#34;&gt;Podcasts&lt;/h4&gt;

&lt;p&gt;通勤の途中で聞いたpodcast。とても分かりやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wada.fm/ep024/&#34;&gt;wada.fm 24. AngularJSの功罪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mozaic.fm/post/87393804788/3-angular-js&#34;&gt;mozaic.fm #3 Angular.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;学習:da71029cbecbb67e280045d1b45488bd&#34;&gt;学習&lt;/h4&gt;

&lt;p&gt;これから読む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;official&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angularjsninja.com/&#34;&gt;AngularJS Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://egghead.io/&#34;&gt;Egghead.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://js.studio-kingdom.com/angularjs&#34;&gt;AnguarJS日本語リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mgechev/angularjs-style-guide/blob/master/README-ja-jp.md&#34;&gt;AnguarJS StyleGuide(JA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://weblogs.asp.net/dwahlin/video-tutorial-angularjs-fundamentals-in-60-ish-minutes&#34;&gt;Video Tutorial: AngularJS Fundamentals in 60-ish Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/&#34;&gt;Ultimate guide to learning AngularJS in one day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oreilly.co.jp/books/9784873116679/&#34;&gt;AngularJSアプリケーション開発ガイド(O&amp;rsquo;REILLY)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;その他:da71029cbecbb67e280045d1b45488bd&#34;&gt;その他&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ionicframework.com/&#34;&gt;ionic&lt;/a&gt; スマフォのハイブリッドアプリをAngularJSで書ける。ionicが吐くjsを見て勉強する、というやり方もあるようだ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;まとめ:da71029cbecbb67e280045d1b45488bd&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;まだコードは1行も書いてない。クライアントサイドエンジニアリング力の低い自分としてはとっても新鮮でした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Naginataという複数NagiosをSSH経由で操作するCLIツールを作りました</title>
          <link>http://orihubon.com/blog/2015/04/06/naginata/</link>
          <pubDate>Mon, 06 Apr 2015 12:22:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2015/04/06/naginata/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://github.com/niku4i/naginata&#34;&gt;Naginata&lt;/a&gt;という複数NagiosをSSH経由で操作するCLIツールを作りました。&lt;/p&gt;

&lt;p&gt;Nagiosの画面から一度に沢山のサービスに対して通知をOFFにしたり、監視開始したりするオペレーションは結構面倒です。&lt;/p&gt;

&lt;p&gt;Nagiosには&lt;a href=&#34;http://old.nagios.org/developerinfo/externalcommands/commandlist.php&#34;&gt;External Commands&lt;/a&gt;という仕組みがあり、nagiosのweb画面上で行える操作をCLI上でも行える仕組みが備わっています。例えば以下のコマンドをNagiosホスト上で実行すると通知OFFすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;[1428291034] DISABLE_SVC_NOTIFICATIONS;host1;service1&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CGIの画面にアクセスしなくてよくこの仕組みはとても便利ですがNagiosサーバにログインする手間があります。またもし複数のNagiosサーバを管理している場合、Nagiosサーバそれぞれでオペレーションするのは面倒です。&lt;/p&gt;

&lt;p&gt;そこで1つのマシンから複数Nagiosサーバに対してSSH越しに上のコマンドを実行するCLIツールを作ればいいんじゃないか、ということで作ったのが&lt;a href=&#34;http://github.com/niku4i/naginata&#34;&gt;Naginata&lt;/a&gt;です。複数監視対象を複数nagiosサーバ横断的に通知OFFにしたりすることが1コマンドで出来るツールになってます。&lt;/p&gt;

&lt;h3 id=&#34;使い方:4851fcac078bc34566a042e6490f78d8&#34;&gt;使い方&lt;/h3&gt;

&lt;h4 id=&#34;インストール:4851fcac078bc34566a042e6490f78d8&#34;&gt;インストール&lt;/h4&gt;

&lt;p&gt;SSH接続元となるホストにnaginataをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install naginata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;naginata&lt;/code&gt;コマンドがインストールされるので、以下のように設定ファイルを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ naginata init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カレントディレクトリにNaginatafileというのが出来ます。管理対象のnagiosサーバを書いてください。&lt;/p&gt;

&lt;p&gt;以下設定例です&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 管理対象のnagiosサーバを書く
# ログイン先のユーザ名が異なる場合はfoo@のようにユーザ名も指定する
nagios_server &#39;foo@nagios1.example.com&#39;
nagios_server &#39;bar@nagios2.example.com&#39;
nagios_server &#39;baz@nagios3.example.com&#39;

# Global nagios server options 
# nagios_serverのファイルパスを指定する
# またrun_command_as: には nagios.cmd に書き込む時の
# ユーザ名を指定する
set :nagios_server_options, {
  command_file: &#39;/usr/local/nagios/var/rw/nagios.cmd&#39;,
  status_file: &#39;/usr/local/nagios/var/status.cmd&#39;,
  run_command_as: &#39;nagios&#39;,
}

# Global SSH options
# SSHの秘密鍵を指定する
set :ssh_options, {
  keys: %w(/home/nikushi/.ssh/id_rsa),
}

# nagiosサーバでsudoするのでpty trueにしておく
set :pty, true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セットアップは以上です。nagiosサーバ側にはrubyやnaginataをインストールする必要はありません。&lt;/p&gt;

&lt;h4 id=&#34;通知を止める-有効にする:4851fcac078bc34566a042e6490f78d8&#34;&gt;通知を止める,有効にする&lt;/h4&gt;

&lt;p&gt;例として全nagiosサーバ上の全ホストのPINGとSSHの監視の通知を止めてみます。動作を確かめるため&lt;code&gt;-v (--verbose)&lt;/code&gt;オプションを付けて実行してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ naginata notification --all-hosts  --disable  --services PING,SSH -v
..snip..
Following notifications will be disabled
localhost
  - PING
  - SSH
redis01.tokyo.local
  - PING
  - SSH
web01.tokyo.local
  - PING
  - SSH
localhost
  - PING
  - SSH
redis01.osaka.local
  - PING
  - SSH
web01.osaka.local
  - PING
  - SSH
Are you sure? [y|N] y
INFO [71871262] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;localhost;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [48a76239] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;localhost;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [71871262] Finished in 0.017 seconds with exit status 0 (successful).
INFO [ef4827b7] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;localhost;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [48a76239] Finished in 0.017 seconds with exit status 0 (successful).
INFO [4ffe6eb6] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;localhost;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [ef4827b7] Finished in 0.021 seconds with exit status 0 (successful).
INFO [7ee77545] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;redis01.osaka.local;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [4ffe6eb6] Finished in 0.022 seconds with exit status 0 (successful).
INFO [2ef43042] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;redis01.tokyo.local;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [2ef43042] Finished in 0.017 seconds with exit status 0 (successful).
INFO [13b54c30] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;redis01.tokyo.local;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [7ee77545] Finished in 0.022 seconds with exit status 0 (successful).
INFO [de883201] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;redis01.osaka.local;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [13b54c30] Finished in 0.018 seconds with exit status 0 (successful).
INFO [13f9ce6c] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;web01.tokyo.local;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [de883201] Finished in 0.017 seconds with exit status 0 (successful).
INFO [5458ec38] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;web01.osaka.local;PING&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [13f9ce6c] Finished in 0.023 seconds with exit status 0 (successful).
INFO [5458ec38] Finished in 0.021 seconds with exit status 0 (successful).
INFO [be16e918] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;web01.tokyo.local;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios0
INFO [6247dc33] Running /usr/bin/env echo &amp;quot;[1428296330] DISABLE_SVC_NOTIFICATIONS;web01.osaka.local;SSH&amp;quot; &amp;gt; /var/spool/nagios/cmd/nagios.cmd on nagios1
INFO [be16e918] Finished in 0.020 seconds with exit status 0 (successful).
INFO [6247dc33] Finished in 0.021 seconds with exit status 0 (successful).
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、naginataは強力なフィルタ機能を持っています。上の例は全ホスト対象にしましたが引数にホスト名を指定すると対象ホストを限定できます。&lt;/p&gt;

&lt;p&gt;また、ホスト名やサービス名は部分一致の挙動のため一部だけ指定することもできます。grepコマンドの引数のイメージです。また複数指定も出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ naginata notification osaka.local tokyo --enable --services Lo,PI
Following notifications will be enabled
redis01.tokyo.local
  - Load
  - PING
web01.tokyo.local
  - Load
  - PING
redis01.osaka.local
  - Load
  - PING
web01.osaka.local
  - Load
  - PING
Are you sure? [y|N] y
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正規表現もできる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ naginata notification ^web  --enable --services &#39;d$&#39;
Following notifications will be enabled
web01.tokyo.local
  - Load
web01.osaka.local
  - Load
Are you sure? [y|N] y
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、例は割愛しますが&lt;code&gt;--nagios&lt;/code&gt;オプションで対象nagiosサーバを限定できます。&lt;/p&gt;

&lt;h4 id=&#34;ステータス確認:4851fcac078bc34566a042e6490f78d8&#34;&gt;ステータス確認&lt;/h4&gt;

&lt;p&gt;元々External Command実行フレームワークにする作りをしていましたが、作っていく途中で監視ステータスや通知OFFされているかどうかを確認出来た方がいいなということになって作ってみました。&lt;/p&gt;

&lt;p&gt;以下の例ではサービス一覧を複数Nagiosサーバから取得して現在の状態を表示してます。便利、でしょうか?。こちらも上述のフィルタが使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ naginata services -a
NAGIOS   HOST                 SERVICE          STATUS   FLAGS  OUTPUT
nagios0  localhost            HTTP             WARNING  AC,nt  HTTP WARNING: HTTP/1.1 403 Forbidden - 5152 bytes in 0.001 second response time
nagios0  localhost            Current Load     OK       AC,NT  OK - load average: 0.00, 0.00, 0.00
nagios0  localhost            PING             OK       AC,NT  PING OK - Packet loss = 0%, RTA = 0.04 ms
nagios0  redis01.tokyo.local  Load             CRITICAL AC,NT  Too high load average 15
nagios0  redis01.tokyo.local  PING             OK       ac,NT  PING OK - Packet loss = 0%, RTA = 0.04 ms
nagios0  redis01.tokyo.local  SSH              OK       AC,NT  SSH OK - OpenSSH_5.3 (protocol 2.0)
nagios0  web01.tokyo.local    Load             OK       AC,NT  OK - load average: 0.01, 0.00, 0.00
nagios0  web01.tokyo.local    PING             OK       AC,NT  PING OK - Packet loss = 0%, RTA = 0.04 ms
nagios0  web01.tokyo.local    SSH              OK       AC,NT  SSH OK - OpenSSH_5.3 (protocol 2.0)
nagios1  redis01.osaka.local  Load             OK       AC,NT  OK - load average: 0.00, 0.00, 0.00
nagios1  redis01.osaka.local  PING             OK       AC,NT  PING OK - Packet loss = 0%, RTA = 0.04 ms
nagios1  redis01.osaka.local  SSH              OK       AC,NT  SSH OK - OpenSSH_5.3 (protocol 2.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FLAGSという列に見慣れぬ文字列が入ってますが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AC = Active Check enabled&lt;/li&gt;
&lt;li&gt;ac = active check disabled&lt;/li&gt;
&lt;li&gt;NT = NoTification disabled&lt;/li&gt;
&lt;li&gt;nt = notification disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という意味になってます。&lt;/p&gt;

&lt;h3 id=&#34;制約など:4851fcac078bc34566a042e6490f78d8&#34;&gt;制約など&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;nagiosサーバにはSSHでパスフレーズ無しでログインできる前提です&lt;/li&gt;
&lt;li&gt;SSHログイン後nagios.cmdに書き込める権限があるユーザか、もしくはSSHログイン後にsudoできるユーザ必要があります&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他:4851fcac078bc34566a042e6490f78d8&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/niku4i/naginata/tree/master/integration-test&#34;&gt;naginata/tree/master/integration-test&lt;/a&gt;にVagrantファイルとサンプルの設定ファイルを置いてるのでVagrantがインストールされたMacがあれば動作をお手軽に試せます。vagrant upすると仮想マシンにnagiosをインストールした状態で上がってきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install naginata
$ git clone https://github.com/niku4i/naginata.git
$ cd naginata/integration-test
$ vagrant up 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つづいて/etc/hostsに以下2行を追記する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1       nagios0
127.0.0.1       nagios1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで動作確認できるとおもいます!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ naginata services -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また &lt;a href=&#34;http://localhost:8880&#34;&gt;http://localhost:8880&lt;/a&gt; , &lt;a href=&#34;http://localhost:8881&#34;&gt;http://localhost:8881&lt;/a&gt; で仮想マシン側のnagios画面見れます。&lt;/p&gt;

&lt;h3 id=&#34;todo:4851fcac078bc34566a042e6490f78d8&#34;&gt;ToDo&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;現状notificationのon/offのみ対応。その他のコマンドへの対応。&lt;/li&gt;
&lt;li&gt;ステータスに色を付ける&lt;/li&gt;
&lt;li&gt;高速化。現状サービス数、nagiosサーバ数が多くなるとそれなりに遅い。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;updates:4851fcac078bc34566a042e6490f78d8&#34;&gt;Updates&lt;/h3&gt;

&lt;h4 id=&#34;2015-08-05-v0-1-6:4851fcac078bc34566a042e6490f78d8&#34;&gt;2015/08/05 v0.1.6&lt;/h4&gt;

&lt;p&gt;任意のディレクトリにNaginatafileを置けるようになりました(以前のバージョンではカレントディレクトリにNaginatafile置く必要がありました)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;./Naginatafile, ~/.naginata/Naginatafile, /etc/naginata/Naginatafileの順にファイルを探すよう修正&lt;/li&gt;
&lt;li&gt;&amp;ndash;naginatafileオプション、もしくはNAGINATAFILE環境変数にて任意のパスを指定可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;まとめ:4851fcac078bc34566a042e6490f78d8&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/niku4i/naginata&#34;&gt;Naginata&lt;/a&gt;という複数NagiosをSSH経由で操作するCLIツールを作った。&lt;/p&gt;

&lt;p&gt;ぜひ使ってみてください!!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>vimとTerminal.appのカラースキーマをsolarizedにする</title>
          <link>http://orihubon.com/blog/2014/12/21/solarized-colorscheme/</link>
          <pubDate>Sun, 21 Dec 2014 21:03:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/12/21/solarized-colorscheme/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://ethanschoonover.com/solarized&#34;&gt;solarized&lt;/a&gt;というカラースキームが良いらしいのでvimとターミナルの配色を変えた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/altercation/vim-colors-solarized&#34;&gt;vim用のカラースキーマ&lt;/a&gt;と、&lt;a href=&#34;https://github.com/tomislav/osx-terminal.app-colors-solarized&#34;&gt;Terminal.app用のsolarized profile&lt;/a&gt;をインストールにして有効にしたら出来た。&lt;/p&gt;

&lt;p&gt;なお、Terminal.appのフォントは以前から使っている&lt;a href=&#34;https://store1.adobe.com/cfusion/store/html/index.cfm?store=OLS-JP&amp;amp;event=displayFontPackage&amp;amp;code=1960&#34;&gt;Source Code Pro&lt;/a&gt;を引き続き使うことにした。&lt;/p&gt;

&lt;h3 id=&#34;before:e14e191f59c22a52b401f2a0f2b9d267&#34;&gt;Before&lt;/h3&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-12-21-solarized-before.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;after:e14e191f59c22a52b401f2a0f2b9d267&#34;&gt;After&lt;/h3&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-12-21-solarized-after.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;良し悪しは分からないが以前よりコントラストが下って目にやさしいような気がするのでしばらく使ってみてみる。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>センス入門 を読んだ</title>
          <link>http://orihubon.com/blog/2014/12/07/sensu-nyumon/</link>
          <pubDate>Sun, 07 Dec 2014 22:10:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/12/07/sensu-nyumon/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%82%BB%E3%83%B3%E3%82%B9%E5%85%A5%E9%96%80-%E6%9D%BE%E6%B5%A6-%E5%BC%A5%E5%A4%AA%E9%83%8E/dp/4480816720&#34;&gt;センス入門 松浦 弥太郎  (著)&lt;/a&gt; という本を読んだ。&lt;/p&gt;

&lt;h2 id=&#34;読んだきっかけ:16d67dd1f80e0bbb1272a6f79267f923&#34;&gt;読んだきっかけ&lt;/h2&gt;

&lt;p&gt;奥さんが休日出勤で家にいなくて、僕も予定がなかった先週末、ふらっと出かけた&lt;a href=&#34;http://www.nact.jp/&#34;&gt;国立新美術館&lt;/a&gt;のショップでこの本を見つけて購入した。最近、視野とか考えが狭まってると感じることがあって、柔らかくなればいいな、というくらいの気持ちで手に取ったんじゃないかなきっと。&lt;/p&gt;

&lt;h2 id=&#34;どんな本だったか:16d67dd1f80e0bbb1272a6f79267f923&#34;&gt;どんな本だったか&lt;/h2&gt;

&lt;p&gt;よいなとおもった目次をメモしておく&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;心を開く事がセンスのよさへの最初の一歩&lt;/li&gt;
&lt;li&gt;すすめられたことは試してみる&lt;/li&gt;
&lt;li&gt;なんでも知っている人よりも、なんでも考える人になった方がいい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クールにするだけだと心に何も残らないかもしれない。感動した体験は忘れないし、心を開いて人と話すとその人の記憶にもあなたの印象がとどまる。&lt;/p&gt;

&lt;p&gt;すすめられたことは試してみる。これも心を開くこと近い。人がこれは良いよと言ってすすめてくれたものを素直に試してみるとよいとある。例えば、この本良いと言われたらとりあえず読んでみるとか、このレストラン美味しかったと言われたら行ってみるとか。時には自分には良くない合わなかったこともあるだろうが、経験が糧となってセンスになる、とのことらしい。自分はインターネットのレビューとか口コミサイトの点数とか定量的な尺度の情報を信頼する傾向にあったのだけど、今度何かすすめられた素直な気持ちで試してみたい。&lt;/p&gt;

&lt;p&gt;考えるということは案外大変。筆者は考えるトレーニングを毎日1時間x2回やっている。とくに朝の1時間は集中力があるのでおすすめとのことだった。&lt;/p&gt;

&lt;h2 id=&#34;センスを磨く:16d67dd1f80e0bbb1272a6f79267f923&#34;&gt;センスを磨く&lt;/h2&gt;

&lt;p&gt;本物を見る、聴くなど体験すべしと書いてある。例えば美術館とか重要文化財とか。また歴史上の偉人から学ぶことも良いらしい。他にもセンスがいいなこの人という人がいたらその人のやっていることを真似てみるといいとある。&lt;/p&gt;

&lt;p&gt;こういうことは洋服や美術、音楽だけに限らず自分の周りの環境にも当てはまるとおもった。エンジニアであれば優秀なエンジニアのコードを読むとか、ライブコーディングを見たり生で見たりするだけでも勉強になる。コードの写経とかも。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:16d67dd1f80e0bbb1272a6f79267f923&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;センス入門を読んだ。&lt;/p&gt;

&lt;p&gt;週末に美術館というのは頭の体操になって良いと自分はおもった。この日はチューリッヒ美術館展という企画があり印象派からシェルレアリズムまで幅広い年代のコレクションが凝縮されたお得な展示で、普段そんなに美術館に行かない自分としてはとても満足度高かった。ただ、人は多すぎだったので東京で人気の美術館巡る時は平日だなという教訓も得た。今度はこの本でもおすすめされているとおり私設の美術館を巡ってみたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>git pushのトピックブランチ名を省略する方法</title>
          <link>http://orihubon.com/blog/2014/11/11/shortcut-to-push-origin-topicbranch/</link>
          <pubDate>Tue, 11 Nov 2014 11:22:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/11/11/shortcut-to-push-origin-topicbranch/</guid>
          <description>&lt;p&gt;トピックブランチを完成させたあと &lt;code&gt;git push origin myfix&lt;/code&gt; と毎度タイプしてたけどタイプがしんどいので省略する方法を調べた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/tkengo/items/5bae50fb7531d5a6bbcf&#34;&gt;gitでカレントブランチをpushする&lt;/a&gt; を参考に自分は以下のように &lt;code&gt;~/.gitconfig&lt;/code&gt; を書いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#~/.gitconfig
[alias]
  cb             = rev-parse --abbrev-ref HEAD
  current-branch = rev-parse --abbrev-ref HEAD
  pcb            = !git push origin `git rev-parse --abbrev-ref HEAD`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分は &lt;code&gt;git&lt;/code&gt; を &lt;code&gt;g&lt;/code&gt; にaliasしているので、&lt;code&gt;g pcb&lt;/code&gt; で カレントブランチを origin に push できるようになった。また&lt;code&gt;git cb&lt;/code&gt; or &lt;code&gt;git current-branch&lt;/code&gt; はカレントブランチの名前を表示するショートカット。&lt;/p&gt;

&lt;p&gt;これでまた少しタイプ数を減らせた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>pushd and popd</title>
          <link>http://orihubon.com/blog/2014/11/10/pushd-and-popd/</link>
          <pubDate>Mon, 10 Nov 2014 22:42:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/11/10/pushd-and-popd/</guid>
          <description>&lt;p&gt;pushd と popd を使い始めた。&lt;/p&gt;

&lt;p&gt;ほんとうに今更感があるが。学生の時に知っていつの間にか使わなくなり、社会人数年目で再度使うようにして使わなくなってしまった歴史が個人的にある。&lt;/p&gt;

&lt;p&gt;使わなくなってしまった理由はタイプ数だと考えているので、タイプ数を少なくすべく以下のようにした。Dan Kogai氏の&lt;a href=&#34;http://blog.livedoor.jp/dankogai/archives/51527066.html&#34;&gt;tips - 君はpushd|popdを知っているか?&lt;/a&gt;を参考にさせていただいた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#~/.bashrc
function mycd {
  if [ -n &amp;quot;$1&amp;quot; ]; then
    pushd $1
  else
    pushd ~/
  fi
}
alias cd=mycd
alias po=&#39;popd&#39;
alias  p=&#39;popd&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; で別ディレクトリに移動すると同時にカレントディレクトリが保存され &lt;code&gt;p&lt;/code&gt; で元のディレクトリに戻る。&lt;code&gt;mycd&lt;/code&gt; 経由なのは &lt;code&gt;pushd&lt;/code&gt; 引数無しでも &lt;code&gt;~/&lt;/code&gt; に帰れるようにするため。&lt;/p&gt;

&lt;p&gt;今のところいい感じ。しかしこういう小さい改善系はすぐ忘れてしまって残念な感じになるので、小さなネタでもブログに書いておこう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ISUCON4本戦に出場しました!! 悔しい!!</title>
          <link>http://orihubon.com/blog/2014/11/09/isucon4-final/</link>
          <pubDate>Sun, 09 Nov 2014 17:58:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/11/09/isucon4-final/</guid>
          <description>&lt;p&gt;週末、&lt;a href=&#34;http://isucon.net/archives/cat_1024989.html&#34;&gt;ISUCON4本戦&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;去年に引き続き2度目となる本戦出場です。メンバは前回同様@sonots, @Spring_MT, GoMiamiというチーム名で参加しました。予選はGoでしたが本戦は慣れてるRubyで戦いました。&lt;/p&gt;

&lt;p&gt;お題は動画広告システムのパフォーマンス・チューニング。最初は動画広告とかやったことないしな..とおもいましたが、実質的には数MのファイルのPOST(入稿)とそのファイルのGET(impression, conversion)を中心としたサイト構成でした。&lt;/p&gt;

&lt;p&gt;結果は30チーム中17位&amp;hellip;..! 8017点でした。チームの目標が失格にならないことだった点はクリアしたものの、上位に食い込む&amp;hellip;という目標は達成できませんでした。 &lt;a href=&#34;http://isucon.net/archives/41187491.html&#34;&gt;本戦結果&lt;/a&gt;のとおりほとんどのチームが7千から8千点台の中で僅差で並んでて、抜きん出ることは出来きず悔しい感じでした。&lt;/p&gt;

&lt;p&gt;今回の問題の本質はベンチが賢い点に気づけるかどうかで、&lt;strong&gt;レスポンスヘッダで適切にキャッシュコントロールさせればベンチサイドでキャッシュが効いて0バイトでレスポンス返すことが出来た&lt;/strong&gt;、ということでした、、、、。本戦後の結果発表まで気づけてなくて本当に悔しかったです。ベンチ(!=ブラウザ)という先入観。&lt;/p&gt;

&lt;p&gt;事前準備しことはChefレシピを仕込んでおいたくらいです。sshの鍵、/etc/hostsにエイリアス書く、vimrc、各種秘伝のたれ設定(nginx.conf, redis.conf, my.cnf)、nginxアクセスログ等の集計スクリプト等を開始直後にがっとまくやつ。一応各ホスト間もsshとおしたけどこれは大して意味なかった。あとはtd-agentでメトリクスシステム(事前に用意)に飛ばした。chefのお陰で開始20分くらいで環境整えれました。&lt;/p&gt;

&lt;p&gt;@Spring_MTと@sonotsで方針ぎめやって、自分は設計に適宜つっこみ入れつつも基本的に2人にお任せしました。自分はnginxをメインに担当しつつ、その他もろもろ。&lt;/p&gt;

&lt;p&gt;後半、local benchでは20000以上出る一方でremote benchだと8000程度でこれは何で&amp;hellip;という状況になってその後も策出せず時間切れという感じでした。&lt;strong&gt;なんでremote bench遅いの〜〜&lt;/strong&gt; と悩む、というかremote benchでスコア出ないの他チームもqueueして遅くなってるんじゃない!?くらいしか考えが及びませんでした。実は仕様(レギュレーションには無かったものの)というところに気づいてどう帯域を使わないでレスポンス返せるか、という点に考えが及ばなかった。remote bench実行時にネットワーク帯域が頭打ってることは早くから気づいてので悔しい限りです!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;次回に向けた反省。レギュレーションとコードを腰を据えてじっくり読む余裕。ベンチの挙動とアクセスログに向き合う余裕!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;なお超便利だったのは@mikedaさんの&lt;a href=&#34;http://tech.naviplus.co.jp/2014/01/09/tmux%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E5%90%8C%E6%99%82%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/&#34;&gt;tmuxで複数サーバの同時オペレーション&lt;/a&gt;でした。chefなくてもかなり捗ったかも。&lt;/p&gt;

&lt;p&gt;悔しさ山盛りですが毎度楽しいイベントです。みんな同じコンテキストでお酒飲みながら盛り上がれる懇親会はいいものです!!&lt;/p&gt;

&lt;p&gt;最後にこのような素晴らしいコンテストを開催していただきありがとうございます!! 出題者、関係者のみなさま本当にお疲れ様でした!!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>binfiles</title>
          <link>http://orihubon.com/blog/2014/11/06/binfiles/</link>
          <pubDate>Thu, 06 Nov 2014 10:43:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/11/06/binfiles/</guid>
          <description>&lt;p&gt;&lt;code&gt;~/bin/&lt;/code&gt;にあったオレオレスクリプトを&lt;a href=&#34;https://github.com/niku4i/binfiles&#34;&gt;github.com/niku4i/binfiles&lt;/a&gt;で管理するようにした。&lt;/p&gt;

&lt;p&gt;オレオレスクリプトというのはシェルスクリプトやPerlで書いた自分用の小さなスクリプトだ。githubに置くのは主にバックアップ目的だ。なお、中身は大して充実していないことを最初に言い訳しておく。&lt;/p&gt;

&lt;p&gt;私の環境では&lt;code&gt;~/bin/&lt;/code&gt;に&lt;code&gt;jq&lt;/code&gt;とか&lt;code&gt;ghq&lt;/code&gt;とかサードパティのバイナリ実行ファイルも同居している状態だったので、&lt;code&gt;~/bin/&lt;/code&gt;のオレオレスクリプトは削除して&lt;code&gt;~/src/github.com/niku4i/binfiles/bin&lt;/code&gt; を&lt;code&gt;$PATH&lt;/code&gt;に追加することにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#~/.bash_profile
if [ -d &amp;quot;$HOME/src/github.com/niku4i/binfiles/bin&amp;quot; ]; then
  export PATH=&amp;quot;$HOME/src/github.com/niku4i/binfiles/bin:$PATH&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、新しいPCでセットアップする場合は、まず&lt;a href=&#34;http://orihubon.com/blog/2013/01/06/improve-management-of-your-dot-files-by-homesick-and-github/&#34;&gt;ドットファイルをhomesickで復元&lt;/a&gt;し、さらに&lt;code&gt;ghq&lt;/code&gt;をセットアップした後、&lt;code&gt;ghq get github.com/niku4i/binfiles&lt;/code&gt;すればよい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ISUCON 2014 予選の記録 GoMiami</title>
          <link>http://orihubon.com/blog/2014/10/05/isucon-qualify/</link>
          <pubDate>Sun, 05 Oct 2014 19:30:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/10/05/isucon-qualify/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://isucon.net/archives/39780986.html&#34;&gt;ISUCON4 予選&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;去年に引き続き2年目、&lt;a href=&#34;http://orihubon.com/blog/2013/10/07/isucon3-yosen/&#34;&gt;前年&lt;/a&gt;同様 @sonots, @Spring_MT と。チーム名はGoMiamiで。今回もマイアミがすこし関係します!!&lt;/p&gt;

&lt;p&gt;Go言語を選択すれば成長しないわけがない!!という意気込みのもとGoでいくことが決定。僕は少し前に&lt;a href=&#34;http://go-tour-jp.appspot.com/&#34;&gt;A Tour of Go&lt;/a&gt; をひと通りやった程度。今回はインフラメインで2人はアプリコードメインに戦略立てるって感じで。&lt;/p&gt;

&lt;h3 id=&#34;予選:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;予選&lt;/h3&gt;

&lt;h4 id=&#34;事前準備:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;事前準備&lt;/h4&gt;

&lt;p&gt;社内で1回前回大会の復習会をやったのと、チームで休日にあつまって前回予選課題を使って予行練習。当日どういう役割でどう動くかみたいなことを練習しました。この予行練習のお陰て今回予選はかなり余裕でました!! @sonots is our brain!&lt;/p&gt;

&lt;h4 id=&#34;am:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;AM&lt;/h4&gt;

&lt;p&gt;午前中はボトルネック探しと、ベンチ特性、方針決めを中心にやった。ので午前中はチューニング作業は無し。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開始と同時にメンバ分のインスタンス立ち上げ、本番用インスタンス立ち上げ&lt;/li&gt;
&lt;li&gt;本番環境整備(github pull&amp;amp;push環境)&lt;/li&gt;
&lt;li&gt;ベンチ1回走らせて、プロファイリング。具体的にはnginxのアクセスログ、slowqueryログ、からベンチの特性分析&lt;/li&gt;
&lt;li&gt;コード読んだり、画面見たり、ざっと。&lt;/li&gt;
&lt;li&gt;my.cnf, nginx.confを予め用意しておいた内容で置き換え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQLのCPUが高いのはindexいれるとして、それ以外データベースであまりやることないことが分かって、事前に決めてた通りアプリにオンメモリで乗せる戦略にした。&lt;/p&gt;

&lt;p&gt;MySQLは5.5が動いてて、一応5.6に上げる方針にした(けどこれは最終的にはオンメモリ戦略とるのでこの時点で上げる必要性はなかったかなと)&lt;/p&gt;

&lt;h4 id=&#34;pm:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;PM&lt;/h4&gt;

&lt;p&gt;飯食べながらさくっとMySQL5.6に上げたところで、じつはアプリのオンメモリ戦略の実装待ちで実はやることが無かった(笑)&lt;/p&gt;

&lt;p&gt;アプリがfixしないうちに外を闇雲にチューンしてもはまるだけなので、焦っても仕方ないからこの時間帯はコード眺めたりしつつお茶を濁しておりました。やることないと色々手を動かしたくなるのですが、ここはぐっと押さえて。&lt;/p&gt;

&lt;p&gt;アプリの改修が無事に終わって、MySQLのindexチューニングもいれて ここでスコアががくっと上がった。 詳細は&lt;a href=&#34;http://blog.livedoor.jp/sonots/archives/40449500.html&#34;&gt;sonotsブログ&lt;/a&gt;が充実している。&lt;/p&gt;

&lt;p&gt;アプリのオンメモリ戦略にてスコア上がった。さらにベンチ負荷上げて試したけどスコア頭打ち。CPU大して使ってないのにスコア上がらなくて。ネットワーク周りかなということで&lt;code&gt;netstat -an | grep TIME_WAIT | wc -l&lt;/code&gt; ってやると50kくらいポート使ってたので、以下のチューニングしたらport足りなくなる問題は改善しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net.ipv4.ip_local_port_range = 10000 64000 
net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_fin_timeout = 5
net.ipv4.tcp_max_syn_backlog = 1024
net.core.somaxconn = 65535
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx-アプリ間はtcpで通信させててunix socketに変えれば良かったのだけど、martiniでunix socketに変えるやり方が分からなくて、上のチューニングでtcpで回ったのでよしとした。&lt;/p&gt;

&lt;p&gt;結果としては最終的に40kあたりのレンジで他チームと横並びで、本戦出場は厳しそう&amp;hellip;な感じですが、結果発表が楽しみです。&lt;/p&gt;

&lt;h3 id=&#34;反省:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;反省&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Chef&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;予選はミドルウェアとか毎回同じなのでChefレシピ用意しといてインフラ担当が3人分開発環境まで揃えてあげればよかった。今回開発環境は各自お任せだったのでコード読み書きに専念させてあげればよかったなと。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go力足りてなくて速読できなかった(笑) Spring_MT氏はrubyでコードを把握した後Goをfixしたよと言っていた。なるほど。&lt;/p&gt;

&lt;h3 id=&#34;所感:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;所感&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;前回大会に比べ今回は余裕をもって想定した力は発揮できたことは進歩&lt;/li&gt;
&lt;li&gt;個人的に次週に海外出張控えてて準備等々でISUCON準備できてなかったんですが2人が引っ張ってくれて助かったという感じです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;10-5-update:59edaf8006d8fe4a71a679c14fe1a50c&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; UPDATE&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;本戦出場決まりました!!!&lt;/strong&gt;. 出張終えたら復習&amp;amp;&amp;amp;素振りやります。&lt;/p&gt;

&lt;p&gt;というわけでリアルにマイアミ出張いってきます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>週末雨だったのでSerfをさわってみた</title>
          <link>http://orihubon.com/blog/2014/06/29/serf/</link>
          <pubDate>Sun, 29 Jun 2014 21:10:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/06/29/serf/</guid>
          <description>

&lt;p&gt;最近まで&lt;a href=&#34;http://www.serfdom.io/&#34;&gt;Serf&lt;/a&gt;の意味を波乗りくらいにおもってました。&amp;rsquo;農奴&amp;rsquo;らしいです。梅雨で週末雨だったのでSerfを触ってみました。&lt;/p&gt;

&lt;p&gt;Vagrantで仮想マシン2台建てて&lt;a href=&#34;http://www.serfdom.io/intro/getting-started/install.html&#34;&gt;Get Started&lt;/a&gt;をもくもくやってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Membership&lt;/strong&gt;: ノード一覧を管理する。管理するといっても中央サーバはいなくて各ノードが自律分散的に他ノードと会話して全ノードを知っている状態になる。ノードのクラスタへの参加、離脱はeventという形でクラスタ内のノードに即時伝搬する。イベントハンドラの機能により各ノードは任意のスクリプトを実行できる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Failure detection and recovery&lt;/strong&gt;: nodeは他のノードの(コネクティビティ的意味の)failを検知でき、他のノードにも伝える。また自動で再接続を試みる。これもイベントとして伝搬されイベントハンドラによりスクリプト実行可能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Custom event propagation&lt;/strong&gt;: ノードの参加、離脱、接続失敗以外にもカスタムなイベントをクラスタ内に伝搬できる。例えば、deploy実行を伝搬させたり、設定を伝搬させたり。またQueryを使えばevent handler経由で各ノードの実行結果を受け取ることもできる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さわってみた感想としては、インストール楽。&lt;code&gt;serf&lt;/code&gt;コマンドをダウンロードして置くだけ。Goの良いとろこ。また学習コストが低くてGet Started読んで試してみれば1, 2時間あればだいたい理解できるとおもいます。&lt;/p&gt;

&lt;h4 id=&#34;ユースケース-参考:398f7a302dfaf20102098d456877d0eb&#34;&gt;ユースケース || 参考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.kentarok.org/entry/2013/10/30/020120&#34;&gt;Automatic /etc/hosts management with Serf&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/kentaro&#34;&gt;@kentaro&lt;/a&gt; さん&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.glidenote.com/blog/2013/10/30/serf-haproxy/&#34;&gt;Serf+HAProxyで作るAutomatic Load Balancer&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/glidenote&#34;&gt;@glidenote&lt;/a&gt; さん&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/sonots/archives/35397486.html&#34;&gt;正月休みだし Serf 触ってみた&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sonots&#34;&gt;@sonots&lt;/a&gt; さん&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/zembutsu/is-the-order-an-automation-of-operation-and-monitoring?qid=493a7731-e373-426d-9cb9-d61821aced17&amp;amp;v=qf1&amp;amp;b=&amp;amp;from_search=4&#34;&gt;ご注文は監視自動化ですか?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/zembutsu&#34;&gt;@zembatsu&lt;/a&gt; さん&lt;/li&gt;
&lt;li&gt;memcached や redis ノードのクラスタを管理する&lt;/li&gt;
&lt;li&gt;deploy(git pullとか)してアプリケーションのrestart&lt;/li&gt;
&lt;li&gt;設定の伝搬&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;まとめ:398f7a302dfaf20102098d456877d0eb&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;やんごとなき事情により&lt;code&gt;/etc/hosts&lt;/code&gt;を使っているシステムを知ってて内部DNSサーバなあと考えてたけどSerf + &lt;code&gt;/etc/hosts&lt;/code&gt;の組み合わせいいですね!&lt;/p&gt;

&lt;p&gt;あと、個人的にはネットワーク機器みたいな箱物のサービスディスカバリに対する最適解が無いので、良いツールが出て来ないものかとおもっている次第なんだけど、ネットワーク機器がLinuxの箱で置き換わればいいのにとおもってます。&lt;/p&gt;

&lt;p&gt;簡単に自立分散システム作れて良い時代になったものですね。&lt;/p&gt;

&lt;p&gt;以上!!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google Apps Script カスタムLoggerでログをspreadsheetに書き出す</title>
          <link>http://orihubon.com/blog/2014/06/18/log-to-sheet-by-custom-logger-google-apps-script/</link>
          <pubDate>Wed, 18 Jun 2014 20:05:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/06/18/log-to-sheet-by-custom-logger-google-apps-script/</guid>
          <description>&lt;p&gt;Google Apps Scriptの中でLoggerで吐くログをシートに書き出すカスタムLoggerを作ってみた。&lt;/p&gt;

&lt;p&gt;こういうシートができあがる。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/20140618-mylogger.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Logger.log()&lt;/code&gt;ではなくて恒久的に保存するためのロガーを作る。例えばTriggerで時限式実行するスクリプトのログを保存しておきたいとかの用途。&lt;/p&gt;

&lt;p&gt;いつものとおりライブラリ化する。&lt;code&gt;MyLogger&lt;/code&gt;という名前で。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function log_sheet_() {
  var sheet_name = &#39;log&#39;;
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sh = ss.getSheetByName(sheet_name);
  if (sh == null) {
    var active_sh = ss.getActiveSheet(); // memorize current active sheet;
    sheet_num = ss.getSheets().length;
    sh = ss.insertSheet(sheet_name, sheet_num);
    sh.getRange(&#39;A1:C1&#39;).setValues([[&#39;timestamp&#39;, &#39;level&#39;, &#39;message&#39;]]).setBackground(&#39;#cfe2f3&#39;).setFontWeight(&#39;bold&#39;);
    sh.getRange(&#39;A2:C2&#39;).setValues([[new Date(), &#39;info&#39;, sheet_name + &#39; has been created.&#39;]]).clearFormat();
    
    // .insertSheet()を呼ぶと&amp;quot;log&amp;quot;シートがアクティブになるので、元々アクティブだったシートにフォーカスを戻す
    ss.setActiveSheet(active_sh);
  } 
  return sh;
}

function log_(level, message) {
  var sh = log_sheet_();
  var now = new Date();
  var last_row = sh.getLastRow();
  sh.insertRowAfter(last_row).getRange(last_row+1, 1, 1, 3).setValues([[now, level, message]]);
  return sh;
}

function debug(message) {
  log_(&#39;debug&#39;, message);
}

function info(message) {
  log_(&#39;info&#39;, message);
}

function warn(message) {
  log_(&#39;warn&#39;, message);
}

function error(message) {
  log_(&#39;error&#39;, message);
}

function fatal(message) {
  log_(&#39;fatal&#39;, message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呼び出す側のプロジェクトでは、先ほど作った&lt;code&gt;MyLogger&lt;/code&gt;のプロジェクトキーを登録して、こうやって呼び出す。初回呼び出し時に&amp;rdquo;log&amp;rdquo;という名前でシートを作成し以降は末尾の行にログが追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;MyLogger.info(&#39;works!&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google Apps Scriptで行データを連想配列として扱う</title>
          <link>http://orihubon.com/blog/2014/06/17/convert-row-array-to-hash-in-google-apps-script/</link>
          <pubDate>Tue, 17 Jun 2014 18:12:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/06/17/convert-row-array-to-hash-in-google-apps-script/</guid>
          <description>&lt;p&gt;Goolge Apps Scriptでspreadsheetの各列にアクセスするときに、列番号を指定してアクセスするコードを書いてると列追加するとスクリプトが壊れる。そこで1行目(ヘッダ行)をキーにアクセスするコードをライブラリにまとめてみた。普通なんだけどぐぐっても出てこなかったので。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;以下をUtilsというプロジェクト名で保存。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* returns keys located at top of spreadsheet 
*
* @param {sheet} sh Sheet class
* @return {array} array of keys
*/
function headerKeys(sh) {
  return sh.getRange(1,1,1, sh.getLastColumn()).getValues()[0];
}

/**
* Convert a row to key-value hash according to keys input parameter
*
* @param {array} array
* @param {array} keys
* @return {array} key-value mapped
*/
function rowToHash(array, keys) {
  var hash = {};
  array.forEach(function(value, i) {
    hash[keys[i]] = value;
  })
  return hash;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参照側のプロジェクトにて、ライブラリ機能を使ってincludeすると以下のようにキーで行配列を扱える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 住所録 名前から住所を取得
function getAddressByFullName(fullName) {
  var sh = SpreadsheetApp.getActive().getSheetByName(&#39;addresses&#39;);
  keys = Utils.headerKeys(sh);                                                       // ヘッダ行を取得
  var values = sh.getRange(2, 1, sh.getLastRow()-1, sh.getLastColumn()).getValues(); // データ部分(2行目以降)取得
  for (var i = 0; i &amp;lt; values.length; i++) {
    var row = values[i];
    row = Utils.rowToHash(row, keys); 
    if (row[&#39;full_name&#39;] == fullName) {
      return row[&#39;address&#39;];
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さあこれで列が追加されても大丈夫。RDBMSだと普通なことGAS何でこんなに大変なの!とか考えたら負けです。&lt;/p&gt;

&lt;p&gt;早く卒業したいGASおじさん。つっこみありましたらお手柔らかによろしくお願いします!!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>opensslコマンドでSNIな証明書をチェックする</title>
          <link>http://orihubon.com/blog/2014/06/02/openssl-sni/</link>
          <pubDate>Mon, 02 Jun 2014 20:46:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/06/02/openssl-sni/</guid>
          <description>&lt;p&gt;あるサーバの証明書のCNをチェックしようとして、opensslコマンドで確認すると想定と違うCNが返ってくる何で! ということが起きて軽くはまってしまった。ブラウザで証明書確認すると問題ない。&lt;/p&gt;

&lt;p&gt;結論としてはサーバ証明書がSNIなやつであれば、&lt;code&gt;-servername&lt;/code&gt;を付けるべし。だった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl s_client -connect test.example.com:443 -servername test.example.com 2&amp;gt;&amp;amp;1 &amp;lt; /dev/null 
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google Apps Scriptを速くするためのベストプラクティス</title>
          <link>http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script/</link>
          <pubDate>Fri, 30 May 2014 18:23:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/05/30/best-practices-of-google-apps-script/</guid>
          <description>

&lt;p&gt;Google Developersサイトの&lt;a href=&#34;https://developers.google.com/apps-script/best_practices?hl=ja&#34;&gt;Best Practices&lt;/a&gt;を要約してみた。&lt;/p&gt;

&lt;h3 id=&#34;サービスのcallを最小限に:32920c41f194b120f14c41775c4f25a5&#34;&gt;サービスのcallを最小限に&lt;/h3&gt;

&lt;p&gt;javascript内で閉じた処理の方がサービスをcallするよりも早い。サービスのcallとはspreadsheetのデータを読み出したり書き出したり、Docsを参照したり、SiteやTranslateやUrlFetchとか使ったり。&lt;/p&gt;

&lt;h3 id=&#34;バッチオペレーション:32920c41f194b120f14c41775c4f25a5&#34;&gt;バッチオペレーション&lt;/h3&gt;

&lt;p&gt;spreadsheetのreadとwriteの回数を最小化する。readとwriteは重い処理。1オペレーションでデータを配列にreadし、1オペレーションで配列にwriteすること。forreachの中で毎回callするのは遅いので、配列に溜めて最後に1回で書きだす。たとえば&lt;code&gt;setBackgroundColor(value)&lt;/code&gt;をたくさん呼ぶのではなく&lt;code&gt;setBackgroundColors(values);&lt;/code&gt;1回にする。&lt;/p&gt;

&lt;h3 id=&#34;cache-class:32920c41f194b120f14c41775c4f25a5&#34;&gt;Cache Class&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/apps-script/reference/cache/cache?hl=ja&#34;&gt;Cache&lt;/a&gt;というキャッシュクラスがあるので、頻繁に使うけど遅いデータはキャッシュしとく。key valueでキャッシュできる。&lt;/p&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getRssFeed() {
   var cache = CacheService.getPublicCache();
   var cached = cache.get(&amp;quot;rss-feed-contents&amp;quot;);
   if (cached != null) {
     return cached;
   }
   var result = UrlFetchApp.fetch(&amp;quot;http://example.com/my-slow-rss-feed.xml&amp;quot;); // takes 20 seconds
   var contents = result.getContentText();
   cache.put(&amp;quot;rss-feed-contents&amp;quot;, contents, 1500); // cache for 25 minutes
   return contents;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-client-handlers-for-more-responsive-uis:32920c41f194b120f14c41775c4f25a5&#34;&gt;Using Client Handlers for More Responsive UIs&lt;/h3&gt;

&lt;p&gt;UI applicationを使う場合でイベントコールバック(たとえばボタンをクリックするとか)を使う場合、&lt;a href=&#34;https://developers.google.com/apps-script/reference/ui/client-handler?hl=ja&#34;&gt;ClientHandler&lt;/a&gt;を使うと高速化できる。サーバサイドでイベントキャッチするのではなく、クライアントサイド(ブラウザ)でhandleすることができるので。使う機会がいまのところ無いので詳しくはない。&lt;/p&gt;

&lt;p&gt;以上!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google Apps Scriptの共通関数をライブラリでまとめる</title>
          <link>http://orihubon.com/blog/2014/05/30/google-apps-script-library/</link>
          <pubDate>Fri, 30 May 2014 14:53:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/05/30/google-apps-script-library/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://orihubon.com/blog/2014/05/30/tried-google-apps-script/&#34;&gt;前回&lt;/a&gt;に引き続きGoogle Apps Script。共通関数をライブラリにする方法。&lt;/p&gt;

&lt;p&gt;共通の処理をライブラリとして独立して管理できるのか調査した。Libraryの機能を使うとできることがわかったのでメモ。&lt;a href=&#34;https://developers.google.com/apps-script/guide_libraries&#34;&gt;公式のドキュメント&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;spreadsheet -&amp;gt; スクリプトエディタ -&amp;gt; スクリプト作成 の順番でたどるとspreadsheetのバインドされたscriptができあがるが、このスクリプトはライブラリにはできない。ライブラリとして作るにはGoogle Apps Home -&amp;gt; スクリプト作成する必要がある点が最初分かりにくかった。&lt;/p&gt;

&lt;p&gt;ライブラリ作成後、spreadsheetのスクリプトエディタ側でライブラリを指定してあげればOK。実際はライブラリにユニークに割り当てられるproject keyを使う側で指定する。&lt;/p&gt;

&lt;h4 id=&#34;イメージ:b901e512bd25f6341f48f605e9fc4b39&#34;&gt;イメージ&lt;/h4&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/20140530-script-lib.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;最低限必要なこと:b901e512bd25f6341f48f605e9fc4b39&#34;&gt;最低限必要なこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;利用ユーザへライブラリへのアクセス権限が必要&lt;/li&gt;
&lt;li&gt;project keyの伝達が必要&lt;/li&gt;
&lt;li&gt;ライブラリスクリプトは1個以上のバージョニングをつけて保存すること(インクルード側でバージョン指定ができる)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;その他:b901e512bd25f6341f48f605e9fc4b39&#34;&gt;その他&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;インクルードライブラリの識別子(クラス名みたいなもの)は任意の文字列を指定できる。たとえば&lt;code&gt;MyPicasaApi&lt;/code&gt;とか。プロジェクト内では&lt;code&gt;MyPicasaApi.doSomething()&lt;/code&gt;で呼べる。もし既存のクラス(たとえば&lt;code&gt;UiApp&lt;/code&gt;)と被ると既存クラスがオーバライドされる。&lt;/li&gt;
&lt;li&gt;privateなメソッドを作るには _ で終わる名前をつけるとautocompleteで出てこなくなる。 e.g. &lt;code&gt;myPrivateMethod_()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;autocompleteで表示されるドキュメントを与えたいなら、関数の上に&lt;a href=&#34;https://developers.google.com/closure/compiler/docs/js-for-compiler&#34;&gt;JSDoc style documentation&lt;/a&gt;でコメントを書く。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;/**
* Raises a number to the given power, and returns the result.
*
* @param {number} base the number we&#39;re raising to a power
* @param {number} exp the exponent we&#39;re raising the base to
* @return {number} the result of the exponential calculation
*/
function power(base, exp) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GAS力がさらに上がりました!以上!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google Apps Scriptをつかってみた</title>
          <link>http://orihubon.com/blog/2014/05/30/tried-google-apps-script/</link>
          <pubDate>Fri, 30 May 2014 00:39:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/05/30/tried-google-apps-script/</guid>
          <description>

&lt;p&gt;某案件でGoogle Spreadsheetを使う機会があって少しかじってみた。浅くメモ。&lt;/p&gt;

&lt;h3 id=&#34;about-google-apps-script:9581264ce525480460496679b15ec44d&#34;&gt;About Google Apps Script&lt;/h3&gt;

&lt;p&gt;Google Apps ScriptはGoogleプラットフォーム上で動くサーバサイドjavascript。spreadsheetに限らずGoogle Apps上のデータと連携してアイデア次第で何でもできる言語。例えばGmailでqueryをかけてbodyをパースしてspreadsheetにデータ貯めて、解析してPDF変換してGmailに送る、みたいなこともできる。&lt;/p&gt;

&lt;p&gt;Google Apps内に限らず、外部のAPIサーバからデータを取ってきたり、逆に外のサーバにデータを送ることもできる。ただし、Google Platformで実行されるのでファイアウォールを超えてイントラネットに接続するという要件はセキュリティ的に難しい制約はある。&lt;/p&gt;

&lt;p&gt;triggerを使うとイベント起因で関数を実行できる。ボタンクリックとかドキュメントを開いたときとか。&lt;/p&gt;

&lt;h4 id=&#34;triggerの例:9581264ce525480460496679b15ec44d&#34;&gt;triggerの例&lt;/h4&gt;

&lt;p&gt;ドキュメントオープン時にメニューボタンを追加する例。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() { // automatically run this on open a spreadsheet.
  var menuEntries = [ {name: &amp;quot;say hello&amp;quot;, functionName: &amp;quot;sayHello&amp;quot;} ];
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.addMenu(&amp;quot;my menu&amp;quot;, menuEntries);
}

function sayHello() {
  Logger.log(&#39;Hello World!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時限式のtriggerでcron的なことも可能で、もちろんMac Bookを閉じた後もGoogleプラットフォーム上で実行される。triggerを使えば定期的にGmailをチェックして何かやるみたいなこともできる。&lt;/p&gt;

&lt;p&gt;書いたスクリプトをWebアプリとして公開する設定をするとURLのエンドポイントがもらえる。triggerには&lt;code&gt;doGet()&lt;/code&gt;というのもあってURLをGETしたトリガで何かできたりする。例えばGETトリガでスクリプトへcallbackされるのでURLのqueryのkey, valueをspreadsheetにためるといったこともできる(簡易WebAPI!)&lt;/p&gt;

&lt;h3 id=&#34;制約:9581264ce525480460496679b15ec44d&#34;&gt;制約&lt;/h3&gt;

&lt;h4 id=&#34;実行遅い:9581264ce525480460496679b15ec44d&#34;&gt;実行遅い&lt;/h4&gt;

&lt;p&gt;結構実行遅い。APIのcallを少なくを心がける。ノウハウは &lt;a href=&#34;https://developers.google.com/apps-script/best_practices?hl=ja&#34;&gt;Best Practices&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ss = SpreadsheetApp.getActiveSpreadsheet();
var sh = ss.getSheetByName(&#39;シート1&#39;);

//bad
for (n = 0; n &amp;lt; 2; n++) {
    sh.getRange(n,1).setValue(&#39;Value&#39;);
    sh.getRange(n,2).setValue(&#39;Value&#39;);
}

//good
sh.getRange(1,1,2,2).setValues([[&#39;Value&#39;, &#39;Value&#39;], [&#39;Value&#39;, &#39;Value&#39;]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1回の実行-5分まで:9581264ce525480460496679b15ec44d&#34;&gt;1回の実行 5分まで&lt;/h4&gt;

&lt;p&gt;実行が5分過ぎるとスクリプトは終了する。&lt;/p&gt;

&lt;h3 id=&#34;リファレンス:9581264ce525480460496679b15ec44d&#34;&gt;リファレンス&lt;/h3&gt;

&lt;p&gt;自分はこの辺みてます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/apps-script/?hl=ja&#34;&gt;何はともあれ公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/google-apps-script&#34;&gt;stackoverflowのtagged/google-apps-script&lt;/a&gt; あまり見てないけど&lt;/li&gt;
&lt;li&gt;本 僕はいま&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00IM5UW1W/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;amp;psc=1&#34;&gt;Google Apps Script for Biginner&lt;/a&gt;を読んでる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日本語でヒットするサイトはExcelっぽい雰囲気が漂っててあまり見ていない(笑) もちろん参考にさせていただいているけど。&lt;/p&gt;

&lt;h3 id=&#34;おもったところ:9581264ce525480460496679b15ec44d&#34;&gt;おもったところ&lt;/h3&gt;

&lt;p&gt;開発環境はブラウザ上のスクリプトエディタを使わざるおえないので、脳がブラウジング脳になるのが難点。viモードほしい。&lt;/p&gt;

&lt;p&gt;他のOSSと組み合わせるとアイデア次第で面白いことできそう。&lt;a href=&#34;http://qiita.com/kazunori279/items/6329df57635799405547&#34;&gt;Fluentd Dashboard&lt;/a&gt; のデモはすごかった!&lt;/p&gt;

&lt;p&gt;Viewを作らなくていいので楽!&lt;/p&gt;

&lt;p&gt;カジュアルに初めてカジュアルに終えるのが良いかと。それなりの規模であればRailsとかで真面目に作ろう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Vienna, Salzburg, Zurich, Parisを列車で巡ってみた - 前編</title>
          <link>http://orihubon.com/blog/2014/05/17/vienna-salzburg/</link>
          <pubDate>Sat, 17 May 2014 16:41:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/05/17/vienna-salzburg/</guid>
          <description>

&lt;p&gt;5月の前半、ウィーンからパリまで列車の旅をしたので簡単にまとめてみます。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;今回は嫁と二人旅、世間的にはいわゆる新婚旅行というやつです。旅行先の選定は、まず嫁希望でオーストリアのウィーンとザルツブルクが決まって、僕がパリ行ってみたかったのでパリが決まって、列車の旅にしようということが決まって、ウィーンからパリの間でちょうどチューリッヒがあったのでチューリッヒに寄りました。&lt;/p&gt;

&lt;h4 id=&#34;ウィーン:d1380683a81c7f389d716cdbb970a4b1&#34;&gt;ウィーン&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;音楽の都&lt;/li&gt;
&lt;li&gt;オペラ座ツアーオススメ&lt;/li&gt;
&lt;li&gt;観光スタートダッシュ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕が大学時代オーケストラやっていて嫁が現在チェロ習い中ということもあって &lt;a href=&#34;http://www.musikverein.at/&#34;&gt;楽友協会&lt;/a&gt; (Wiener Musikverein)へクラシックコンサートききにいきました。黄金ホールが新年のウィーンフィルのニューイヤーコンサートで有名です。日本でクラシックコンサート聞く場合だと結構ジーパン、Tシャツってのもありではありなんですが、さすがヨーロッパ、みなさまお洒落紳士淑女なんですね。僕らは昼間観光した後にいったんホテル戻って綺麗な服に着替えて出かけました。普段クラシック聞かない人でも雰囲気満点で楽しめるとおもいます!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5300.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5306.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5319.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;ちなみにチケットは公式ページからクレジットカードで買えます。レシートをA4に印刷して当日会場のチケット預かりで提示すればチケット引き換えできます。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5303.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;また、昼間にやってるオペラ座ツアーは5ユーロでみれるので安くてお得でオススメです。オペラ座内部をガイドさんが40分くらいかけて案内してくれます。開始時刻は&lt;a href=&#34;http://www.wiener-staatsoper.at/Content.Node/home/Startseite-Content.jp.php&#34;&gt;公式ページ&lt;/a&gt;を参照。予約無しで開始15分くらい前に行って5ユーロ支払えばOKです。&lt;/p&gt;

&lt;p&gt;その他、ハプスブルク家関連。ホーフブルク宮殿、シシィ博物館、美術史美術館、シェーンブルン宮殿、と弾丸で巡りました。2日で巡ったのですが時間足りなかった(笑) シェーンブルク宮殿は街から少し離れたところにあって宮殿の裏手に丘があってそウィーンの街の眺めオススメです。&lt;/p&gt;

&lt;p&gt;あとグルメ的にはウィーンにいったらウィーナーシュニッチェル、ザッハトルテは食べとけとのことでした。ザッハトルテってHotel Sacher Viennaというところのカフェのチョコケーキだからザッハトルテ(sacher torte)というのは今回知りました。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8694.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8705.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8704.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8617.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8688.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;ザルツブルク:d1380683a81c7f389d716cdbb970a4b1&#34;&gt;ザルツブルク&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;サウンドオブミュージック&lt;/li&gt;
&lt;li&gt;ザルツ = 塩、ブルク = 城。モーツァルトが生まれた街&lt;/li&gt;
&lt;li&gt;郊外にはRedBullの本社があるらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ザルツブルクはけっこう田舎で、市より小さくて村より大きい感じの規模でした。市内観光と併せて郊外まで連れて行ってくれるツアーにjoinするのもオススメです。&lt;/p&gt;

&lt;p&gt;嫁が映画サウンドオブミュージックのファンでロケ地を巡る半日ツアーに参加しました。利用したのは現地のツアー会社PANORAMA Toursの&lt;a href=&#34;http://www.panoramatours.com/de/salzburg/tour/tour-1a-original-sound-of-music-tour-R-27/&#34;&gt;Original Sound of Music Tour&lt;/a&gt;、Webサイトから予約できます。英語ガイドさんつきのバスツアーなんですがなかなか陽気なおばちゃんで英語分からないところもありましたが楽しめました。なお、英語ツアーに日本人が参加するのは珍しいらしく参加するともれなくガイドさんイジってくれます(汗) ちなみに、日本語ツアーもあります。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5361.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8790.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8815.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;列車での移動:d1380683a81c7f389d716cdbb970a4b1&#34;&gt;列車での移動&lt;/h4&gt;

&lt;p&gt;今回はオーストリア国鉄 OBB 運行のRajetというのと、フランス国鉄運行のTGVにのりました。TGVは結構狭い。Rajetは列車内Wifiついてて快適でした!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8762.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5460.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5398.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;次回へ続く:d1380683a81c7f389d716cdbb970a4b1&#34;&gt;次回へ続く&lt;/h4&gt;

&lt;p&gt;オーストリア編はここで終わり。1ポストで収まらなかったので続きは&lt;a href=&#34;http://orihubon.com/blog/2014/05/17/zurich-paris/&#34;&gt;次回へ&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Vienna, Salzburg, Zurich, Parisを列車で巡ってみた - 後編</title>
          <link>http://orihubon.com/blog/2014/05/17/zurich-paris/</link>
          <pubDate>Sat, 17 May 2014 16:41:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/05/17/zurich-paris/</guid>
          <description>

&lt;p&gt;ウィーンからパリまで列車の旅の後半編。&lt;a href=&#34;http://orihubon.com/blog/2014/05/17/vienna-salzburg/&#34;&gt;前半はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h4 id=&#34;チューリッヒ:c2865a63b30e81fb4d903a12ab579d34&#34;&gt;チューリッヒ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;物価高い!!!&lt;/li&gt;
&lt;li&gt;チェックインでトラブった&lt;/li&gt;
&lt;li&gt;チーズフォンデュは濃厚&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;物価高い!!evian 500mlペットボトルが400円強、昼飯2人でパスタとコーラ飲んで5000円弱とかで財布寒い。ホテルもベースが高かったのでチューリッヒではGuest Houseにしました。泊まったGH &lt;a href=&#34;http://www.expedia.co.jp/Zurich-Hotels-Guesthouse-Brauerstrasse.h4623034.Hotel-Information&#34;&gt;Guesthouse Brauerstrasse&lt;/a&gt;。期待していなかったのですが意外、アパートメントタイプでちゃんと専用個室で風呂もトイレも専用。部屋広くてソファもあったりしていい部屋でした。ただしチェックインは難易度高い。フロントは無くてキーボックスからキーを入手する必要があるので事前にキーコードがメールされてきます。僕はキーコードの存在を忘れてて鍵ゲットするまでちょっと手間取りました。&lt;/p&gt;

&lt;p&gt;スイスは1泊だけの滞在なのでスイスといえば&amp;hellip;チーズフォンデュでしょってことで食べました。本場はチーズ風味が臭いです。味はおいしかったけど濃厚すぎて自分はダメでした。ちなみに本当は冬の食べ物らしいです。日本の鍋的感覚か。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5429.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/IMG_5448.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;パリ:c2865a63b30e81fb4d903a12ab579d34&#34;&gt;パリ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;お洒落な街、でも地下鉄とっても汚い&lt;/li&gt;
&lt;li&gt;エッフェル塔、凱旋門&lt;/li&gt;
&lt;li&gt;ショッピング&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パリは2泊だけの滞在で駆け足。観光はエッフェル塔、凱旋門、ノートルダム寺院の3カ所。親戚の子供の洋服土産を探したりで町歩きしながらセーヌ川を眺めるそんな感じでした。パリは多人種な街ですね。セーヌ川沿いのBrasserieでワイン飲みながらってのはなかなか良いものでした。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8903.JPG&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://orihubon.com/images/2014-05-17-honey-moon-log/DSC_8936.JPG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 id=&#34;お金-手配の方法など:c2865a63b30e81fb4d903a12ab579d34&#34;&gt;お金, 手配の方法など&lt;/h4&gt;

&lt;p&gt;誰かの参考になるかもしれないので書いてみる。ツアーは使ってなくてすべて個人手配です。&lt;/p&gt;

&lt;p&gt;2人で飛行機24万円、列車代が9万円、ホテルが10万くらい、その他食費等で合計55万くらい。飛行機は安かったけどユーロ高め(1ユーロ142円くらい)だったので結構財布寒い感じですね。結構食費は節約系でした。&lt;/p&gt;

&lt;p&gt;飛行機はエールフランスのサイトで直接調べたら安く行けることが分かって、さらに安くならないかなとトラベルコちゃんで調べたらHISが同じ便で1万円くらい安かったので申し込み。行きはシャルルドゴール空港経由パリ行き、帰りはパリから成田への直行便です。&lt;/p&gt;

&lt;p&gt;ホテルはExpediaで。選定方法はまず値段みて、あとGoogle Mapみながら交通の便が良い立地かどうかで選ぶ感じ。(このあたりネット系でコンシェルジュ的(楽々幹事さん的のり)なサービスあってやってくれるサービスとかないですかねえ。)&lt;/p&gt;

&lt;p&gt;列車&lt;a href=&#34;http://www.raileurope.com/index.html&#34;&gt;RAILEUROPE&lt;/a&gt;で列車時刻調べてチケットを事前に購入しました。ユーロレイルパスは使ってません(個別購入の方が安かったので)&lt;/p&gt;

&lt;h4 id=&#34;まとめ:c2865a63b30e81fb4d903a12ab579d34&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;ウィーン、ザルツブルク、チューリッヒ、パリと列車で巡ってきた。弾丸な日程だったけど充実した旅でした。次は1都市滞在でゆっくりした旅がしたい!(けどかなり先だろう)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>/etc/sysctl.confを管理するChef cookbook</title>
          <link>http://orihubon.com/blog/2014/03/26/sysctl-chef-cookbook/</link>
          <pubDate>Wed, 26 Mar 2014 22:49:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/03/26/sysctl-chef-cookbook/</guid>
          <description>&lt;p&gt;Chefでsysctl.confを管理するやつ作ってみた。&lt;a href=&#34;https://github.com/niku4i/sysctl-cookbook&#34;&gt;niku4i/sysctl-cookbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なかのコードはonehealth-cookbooksさんの&lt;a href=&#34;https://github.com/onehealth-cookbooks/sysctl&#34;&gt;onehealth-cookbooks/sysctl&lt;/a&gt;から必要最小限必要な部分だけかいつまみました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>test-kitchen使ったメモ</title>
          <link>http://orihubon.com/blog/2014/03/25/test-kitchenshi-tutamemo/</link>
          <pubDate>Tue, 25 Mar 2014 11:46:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/03/25/test-kitchenshi-tutamemo/</guid>
          <description>

&lt;p&gt;最近はImmutable Infrastracture盛り上がりでChefやPuppetが語られる機会が少なくなって気がしますが、それはChef/Puppetが成熟してきた証拠? test-kitchenを使ってみたメモです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kitchen.ci/docs/getting-started&#34;&gt;GETTING STARTED GUIDE&lt;/a&gt; を写経。詳細はリンク先の原文を参照してください。&lt;/p&gt;

&lt;p&gt;拙作の&lt;a href=&#34;https://github.com/niku4i/rbenv-cookbook&#34;&gt;rbenv-cookbook&lt;/a&gt;をtest-kitchenをつかってVagrant上の仮想マシンでテストするところまで進めました。なお、Vagrantのバージョンは1.5.1を使いました。&lt;/p&gt;

&lt;h3 id=&#34;インストール:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ gem install test-kitchen
$ kitchen -v
Test Kitchen version 1.2.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、あらかじめcookbookをgit cloneしておきます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:niku4i/rbenv-cookbook.git
$ cd rbenv-cookbook
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kitchen-init:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;kitchen init&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen init --driver=kitchen-vagrant
      create  .kitchen.yml
      create  test/integration/default
      create  .gitignore
      append  .gitignore
      append  .gitignore
         run  gem install kitchen-vagrant from &amp;quot;.&amp;quot;
Fetching: kitchen-vagrant-0.14.0.gem (100%)
Successfully installed kitchen-vagrant-0.14.0
Parsing documentation for kitchen-vagrant-0.14.0
Installing ri documentation for kitchen-vagrant-0.14.0
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.kitchen.ymlが作られた。中身は以下のとおり。ubuntuはひとまず不要なのでplatformから削除。またinitで作成されたyamlに登録されているcentos-6.4ではkitchen createしたときにvagrant upできなくてエラーになってしまったので、boxイメージが悪いのかなと判断して6.5を使うように変更した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
driver:
  name: vagrant

provisioner:
  name: chef_solo

platforms:
#  - name: ubuntu-12.04
#  - name: centos-6.4
  - name: centos-65

suites:
  - name: default
    run_list:
      - recipe[rbenv-cookbook::default]
    attributes:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kitchen listコマンドで確認できた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen list
Instance           Driver   Provisioner  Last Action
default-centos-64  Vagrant  ChefSolo     &amp;lt;Not Created&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kitchen-create:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;kitchen create&lt;/h3&gt;

&lt;p&gt;kitchen createでインスタンスをアップ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ kitchen create default-centos-65
-----&amp;gt; Starting Kitchen (v1.2.1)
-----&amp;gt; Creating &amp;lt;default-centos-65&amp;gt;...
       Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
       ==&amp;gt; default: Box &#39;opscode-centos-6.5&#39; could not be found. Attempting to find and install...
           default: Box Provider: virtualbox
           default: Box Version: &amp;gt;= 0
       ==&amp;gt; default: Adding box &#39;opscode-centos-6.5&#39; (v0) for provider: virtualbox
           default: Downloading: https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.5_chef-provisionerless.box
       ==&amp;gt; default: Successfully added box &#39;opscode-centos-6.5&#39; (v0) for &#39;virtualbox&#39;!
       ==&amp;gt; default: Importing base box &#39;opscode-centos-6.5&#39;...
       ==&amp;gt; default: Matching MAC address for NAT networking...
       ==&amp;gt; default: Setting the name of the VM: default-centos-65_default_1395719095721_73691
       ==&amp;gt; default: Fixed port collision for 22 =&amp;gt; 2222. Now on port 2201.
       ==&amp;gt; default: Clearing any previously set network interfaces...
       ==&amp;gt; default: Preparing network interfaces based on configuration...
           default: Adapter 1: nat
       ==&amp;gt; default: Forwarding ports...
           default: 22 =&amp;gt; 2201 (adapter 1)
       ==&amp;gt; default: Running &#39;pre-boot&#39; VM customizations...
       ==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...           default: SSH address: 127.0.0.1:2201
           default: SSH username: vagrant
           default: SSH auth method: private key
           default: Error: Connection timeout. Retrying...
       ==&amp;gt; default: Machine booted and ready!
       ==&amp;gt; default: Checking for guest additions in VM...
           default: The guest additions on this VM do not match the installed version of
           default: VirtualBox! In most cases this is fine, but in rare cases it can
           default: prevent things such as shared folders from working properly. If you see
           default: shared folder errors, please make sure the guest additions within the
           default: virtual machine match the version of VirtualBox you have installed on
           default: your host and reload your VM.
           default:
           default: Guest Additions Version: 4.3.8
           default: VirtualBox Version: 4.2
       ==&amp;gt; default: Setting hostname...
       Vagrant instance &amp;lt;default-centos-65&amp;gt; created.
       Finished creating &amp;lt;default-centos-65&amp;gt; (11m27.39s).
-----&amp;gt; Kitchen is finished. (11m27.70s)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;vagrantでインスタンスを起動する&lt;/li&gt;
&lt;li&gt;boxが登録されてなければネットワークから探してくる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen list
Instance           Driver   Provisioner  Last Action
default-centos-65  Vagrant  ChefSolo     Created
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kitchen-converge:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;kitchen converge&lt;/h3&gt;

&lt;p&gt;レシピをインスタンスに適用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen converge default-centos-65
-----&amp;gt; Starting Kitchen (v1.2.1)
-----&amp;gt; Converging &amp;lt;default-centos-65&amp;gt;...
       Preparing files for transfer
       Preparing current project directory as a cookbook
       Removing non-cookbook files before transfer
-----&amp;gt; Installing Chef Omnibus (true)
       downloading https://www.getchef.com/chef/install.sh
         to file /tmp/install.sh
       trying wget...
       Downloading Chef  for el...
       downloading https://www.getchef.com/chef/metadata?v=&amp;amp;prerelease=false&amp;amp;p=el&amp;amp;pv=6&amp;amp;m=x86_64
         to file /tmp/install.sh.1851/metadata.txt
       trying wget...
       url      https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm
       md5      3fe6dd8e19301b6c66032496a89097db
       sha256   edd5d2bcc174f67e5e5136fd7e5fffd9414c5f4949c68b28055b124185904d9f
       downloaded metadata file looks valid...
       downloading https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm
         to file /tmp/install.sh.1851/chef-11.10.4-1.el6.x86_64.rpm
       trying wget...
       Comparing checksum with sha256sum...
       Installing Chef
       installing with rpm...
       warning: /tmp/install.sh.1851/chef-11.10.4-1.el6.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 83ef826a: NOKEY
Preparing...                #####  ########################################### [100%]
   1:chef                          ########################################### [100%]
       Thank you for installing Chef!
       Transfering files to &amp;lt;default-centos-65&amp;gt;
       [2014-03-25T03:51:33+00:00] INFO: Forking chef instance to converge...
       Starting Chef Client, version 11.10.4
       [2014-03-25T03:51:33+00:00] INFO: *** Chef 11.10.4 ***
       [2014-03-25T03:51:33+00:00] INFO: Chef-client pid: 1948
       [2014-03-25T03:51:34+00:00] INFO: Setting the run_list to [&amp;quot;recipe[rbenv-cookbook::default]&amp;quot;] from JSON
       [2014-03-25T03:51:34+00:00] INFO: Run List is [recipe[rbenv-cookbook::default]]
       [2014-03-25T03:51:34+00:00] INFO: Run List expands to [rbenv-cookbook::default]
       [2014-03-25T03:51:34+00:00] INFO: Starting Chef Run for default-centos-65
       [2014-03-25T03:51:34+00:00] INFO: Running start handlers
       [2014-03-25T03:51:34+00:00] INFO: Start handlers complete.
       Compiling Cookbooks...

       Running handlers:
       [2014-03-25T03:51:34+00:00] ERROR: Running exception handlers
       Running handlers complete

       [2014-03-25T03:51:34+00:00] ERROR: Exception handlers complete
       [2014-03-25T03:51:34+00:00] FATAL: Stacktrace dumped to /tmp/kitchen/cache/chef-stacktrace.out
       Chef Client failed. 0 resources updated in 0.458583313 seconds
       [2014-03-25T03:51:34+00:00] ERROR: Cookbook yum-epel not found. If you&#39;re loading yum-epel from another cookbook, make sure you configure the dependency in your metadata
       [2014-03-25T03:51:34+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Converge failed on instance &amp;lt;default-centos-65&amp;gt;.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Please see .kitchen/logs/default-centos-65.log for more details
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; ------Exception-------
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Class: Kitchen::ActionFailed
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Message: SSH exited (1) for command: [sudo -E chef-solo --config /tmp/kitchen/solo.rb --json-attributes /tmp/kitchen/dna.json  --log_level info]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーでこけた&amp;hellip; 。rbenv-cookbookはyum-epelに依存してるせい? metadata.rbは既に作ってるのでBerkshelfファイルを作成しmetadataを読み込むようにしたらエラーをパスできた!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#Berksfile
source &amp;quot;https://api.berkshelf.com&amp;quot;

metadata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再実行。gitが無いので止まった。これはレシピが悪い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#recipes/default.rb
...snip...
+ package &amp;quot;git&amp;quot;
...snip...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再実行!無事終了!&lt;/p&gt;

&lt;p&gt;kitchen convergeでやること&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インスタンスにChefをインストール&lt;/li&gt;
&lt;li&gt;依存関係のレシピをインストール&lt;/li&gt;
&lt;li&gt;.kitchen.ymlのrun_listを実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;手動で確認する:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;手動で確認する&lt;/h3&gt;

&lt;p&gt;ここまででレシピをエラー無くインスタンスに適用できることを確認した。手動でログインし確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen login default-centos-65
Last login: Tue Mar 25 03:59:38 2014 from 10.0.2.2
[vagrant@default-centos-65 ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログインできた。rbenvインストールされている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv
rbenv 0.4.0-95-gf71e227
Usage: rbenv &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テストを書く:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;テストを書く&lt;/h3&gt;

&lt;p&gt;ServerSpecを使いたいところではあるが、ここではチュートリアルに従ってBusserというテストフレームワークでテストを書く。&lt;/p&gt;

&lt;p&gt;テスト用のディレクトリを作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p test/integration/default/bats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は実行ファイルが存在するかどうかだけチェックした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#test/integration/default/bats/rbenv_installed.bats
#!/usr/bin/env bats

@test &amp;quot;executable rbenv command is found&amp;quot; {
  run test -x /usr/local/rbenv/bin/rbenv
  [ &amp;quot;$status&amp;quot; -eq 0 ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストを流す&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen veryfy default-centos-65  

-----&amp;gt; Starting Kitchen (v1.2.1)
-----&amp;gt; Verifying &amp;lt;default-centos-65&amp;gt;...
       Removing /tmp/busser/suites/bats
       Uploading /tmp/busser/suites/bats/rbenv_installed.bats (mode=0644)
-----&amp;gt; Running bats test suite
 ✓ executable rbenv command is found

       1 test, 0 failures
       Finished verifying &amp;lt;default-centos-65&amp;gt; (0m1.30s).
-----&amp;gt; Kitchen is finished. (0m2.12s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kitchen-test:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;kitchen test&lt;/h3&gt;

&lt;p&gt;いままでやってきたことを全工程流す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kitchen veryfy default-centos-65  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;既存のインスタンスがあれば廃棄する&lt;/li&gt;
&lt;li&gt;インスタンス作成&lt;/li&gt;
&lt;li&gt;Chefのインストール&lt;/li&gt;
&lt;li&gt;レシピのインストール&lt;/li&gt;
&lt;li&gt;テストの実行&lt;/li&gt;
&lt;li&gt;インスタンスの廃棄&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;感想:1b920a0fae2ca6968ff584ce0b1982e9&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;test kitchenよい。でも初回遅い。boxが最初ないと更に遅い。この辺はVagrantをDockerに変えるというアプローチがあるとおもうが気軽ではない感じかも。しばらく使ってみる!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Yohoushi Chef Cookbook作った</title>
          <link>http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook/</link>
          <pubDate>Wed, 15 Jan 2014 20:35:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/01/15/yohoushi-chef-cookbook/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/yohoushi/chef-yohoushi&#34;&gt;chef-yohoushi&lt;/a&gt; を作った。YohoushiをChefでインストールするクックブック。&lt;/p&gt;

&lt;p&gt;ユーザ作成、データベースマイグレーション、Yohoushiリポジトリをgit cloneしてというところまでやってくれます。RubyのbuildとかMySQLサーバのインストールとかはクックブックの範囲外にしてて別クックブックと組み合わせて使ってください。&lt;/p&gt;

&lt;p&gt;またサービスの再起動とかchkconfig的なところはレシピに書いてない。その辺やろうとすると諸々yack shavingになるので今時点ではインストールだけ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Chefでtd-agentをインストールしたメモ &#43; knife solo cook実行時エラーにはまったメモ</title>
          <link>http://orihubon.com/blog/2014/01/08/install-td-agent-by-chef-and-install-error/</link>
          <pubDate>Wed, 08 Jan 2014 21:37:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2014/01/08/install-td-agent-by-chef-and-install-error/</guid>
          <description>

&lt;p&gt;td-agentを&lt;a href=&#34;https://github.com/treasure-data/chef-td-agent/&#34;&gt;treasure-data/chef-td-agent&lt;/a&gt;のChefレシピを使ってVagrantの仮想マシンに適用したメモです。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;準備:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;準備&lt;/h3&gt;

&lt;p&gt;chefとknife-soloをインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install chef
$ gem install knife-solo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;chefレポジトリ作成:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;Chefレポジトリ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ knife solo init chef-test-repo
$ cd chef-test-repo/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;chef-td-agentをberkshelfでインストール:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;chef-td-agentをBerkshelfでインストール&lt;/h3&gt;

&lt;p&gt;Berkshelf = gemでいうところのbundler(とrubygems)みたいなもの。&lt;/p&gt;

&lt;p&gt;berkshelfコマンドのインストール。bundler経由でインストールした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#Gemfile
source &#39;https://rubygems.org&#39;
gem &#39;berkshelf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Berksfileにインストールするクックブックを定義&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;site :opscode
cookbook &#39;td-agent&#39;, git: &#39;https://github.com/treasure-data/chef-td-agent.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;berks installでクックブックをインストール。&lt;code&gt;--path&lt;/code&gt;で&lt;code&gt;cookbooks&lt;/code&gt;以下に。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle exec berks --path cookbooks
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;knifeコマンドで対象マシンの定義を作る:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;knifeコマンドで対象マシンの定義を作る&lt;/h3&gt;

&lt;p&gt;knifeコマンドで対象マシンへchef soloをインストールしつつ、定義ファイル(json)を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife solo prepare chef-test.local
  =&amp;gt; chef-test.local に chef solo がインストールされる
  =&amp;gt; nodes/chef-test.local.json が作られる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodes/chef-test.local.jsonのrun_listにtd-agentを加える&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#nodes/chef-test.local.json
{&amp;quot;run_list&amp;quot;:[&amp;quot;td-agent&amp;quot;]}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;レシピ適用:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;レシピ適用!!!&lt;/h3&gt;

&lt;p&gt;以下を実行することで、td-agent実行ユーザ、グループの作成、td-agentのインストール、設定ファイル配置、起動登録、起動といったことをやってくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife solo coook chef-test.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;とここで楽勝終わる予定だったのですが、途中でエラーが出て止まってしまいました。&lt;/p&gt;

&lt;h3 id=&#34;package-td-agent-が途中で止まる:4271a5f32224c57ff6b9ad98c482e127&#34;&gt;package td-agent が途中で止まる&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;knife solo cook cheftest.local
Running Chef on cheftest.local...
Checking Chef version...
Installing Berkshelf cookbooks to &#39;cookbooks&#39;...
Installing td-agent (0.0.1) from git: &#39;https://github.com/treasure-data/chef-td-agent.git&#39; with branch: &#39;master&#39; at ref: &#39;d29d3f78bc2ffe991c63d56cbf8521eda6fdeb35&#39;

(..snip..)

Recipe: td-agent::default
  * template[/etc/td-agent/td-agent.conf] action create (up to date)
  * package[td-agent] action upgrade

================================================================================
Error executing action `upgrade` on resource &#39;package[td-agent]&#39;
================================================================================


Chef::Exceptions::Exec
----------------------
 returned 1, expected 0


Resource Declaration:
---------------------
# In /home/vagrant/chef-solo/cookbooks-2/td-agent/recipes/default.rb

 60: package &amp;quot;td-agent&amp;quot; do
 61:   options value_for_platform(
 62:     [&amp;quot;ubuntu&amp;quot;, &amp;quot;debian&amp;quot;] =&amp;gt; {&amp;quot;default&amp;quot; =&amp;gt; &amp;quot;-f --force-yes&amp;quot;},
 63:     &amp;quot;default&amp;quot; =&amp;gt; nil
 64:   )
 65:   action :upgrade
 66: end
 67:



Compiled Resource:
------------------
# Declared in /home/vagrant/chef-solo/cookbooks-2/td-agent/recipes/default.rb:60:in `from_file&#39;

package(&amp;quot;td-agent&amp;quot;) do
  action [:upgrade]
  retries 0
  retry_delay 2
  package_name &amp;quot;td-agent&amp;quot;
  version &amp;quot;1.1.18-0&amp;quot;
  cookbook_name :&amp;quot;td-agent&amp;quot;
  recipe_name &amp;quot;default&amp;quot;
end



[2014-01-08T12:23:00+00:00] ERROR: Running exception handlers
[2014-01-08T12:23:00+00:00] ERROR: Exception handlers complete
[2014-01-08T12:23:00+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
Chef Client failed. 4 resources updated
[2014-01-08T12:23:00+00:00] ERROR: package[td-agent] (td-agent::default line 60) had an error: Chef::Exceptions::Exec:  returned 1, expected 0
[2014-01-08T12:23:00+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
ERROR: RuntimeError: chef-solo failed. See output above.gg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;調べたところ、&lt;code&gt;yum install td-agent&lt;/code&gt;がgpgcheckで失敗していた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum -d0 -e0 -y install td-agent-1.1.18-0
Package td-libyaml-0.1.4-1.x86_64.rpm is not signed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;お、バグかな?とおもったらKnown Issueでした。&lt;a href=&#34;https://github.com/treasure-data/td-agent/issues/43&#34;&gt;Apply signature to rpm /deb&lt;/a&gt;。&lt;strong&gt;(2013/01/15 追記) rpmが更新されて問題は解消しました&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>fluent-plugin-deriveで単位時間あたりの差分値を計算する</title>
          <link>http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released/</link>
          <pubDate>Mon, 23 Dec 2013 14:57:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/12/23/fluent-plugin-derive-has-been-released/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/niku4i/fluent-plugin-derive&#34;&gt;fluent-plugin-derive&lt;/a&gt; というFluentd outputプラグインをリリースしました。&lt;/p&gt;

&lt;p&gt;gemコマンドからインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install fluent-plugin-derive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何をするplug-inかというと、端的にいうと受け取ったrecordの前回分の値(timestamp, key, value)をキャッシュし2回目受信したrecordとの差(per second rate)をre-emitします。&lt;/p&gt;

&lt;p&gt;例えばSNMPで取得するInterfaceのカウンタ値(バイトカウンタ)をFluentd内でbpsに変換するといったことで使えます。計算値を任意の値で掛け算したり割り算したりできるので、毎秒以外にも毎時や毎分にすることもできます。&lt;/p&gt;

&lt;h3 id=&#34;設定:d522f76809d62287c1df42618b399133&#34;&gt;設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match foo.bar.**&amp;gt;
  type derive
  add_tag_prefix derive
  key1 foo_count *1000
  key2 bar_count *1000
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;例:d522f76809d62287c1df42618b399133&#34;&gt;例&lt;/h3&gt;

&lt;p&gt;こういう入力があったとして&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2013-12-19 20:01:00 +0900 foo.bar: {&amp;quot;foo_count&amp;quot;:  100, &amp;quot;bar_count&amp;quot;:  200}
2013-12-19 20:02:00 +0900 foo.bar: {&amp;quot;foo_count&amp;quot;:  700, &amp;quot;bar_count&amp;quot;: 1400}
2013-12-19 20:03:10 +0900 foo.bar: {&amp;quot;foo_count&amp;quot;:  700, &amp;quot;bar_count&amp;quot;: 1470}
2013-12-19 20:04:10 +0900 foo.bar: {&amp;quot;foo_count&amp;quot;: 1300, &amp;quot;bar_count&amp;quot;:  870}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2013-12-19 20:01:00 +0900 derive.foo.bar: {&amp;quot;foo_count&amp;quot;:   nil, &amp;quot;bar_count&amp;quot;:    nil}
2013-12-19 20:02:00 +0900 derive.foo.bar: {&amp;quot;foo_count&amp;quot;: 10000, &amp;quot;bar_count&amp;quot;:  20000}
2013-12-19 20:03:10 +0900 derive.foo.bar: {&amp;quot;foo_count&amp;quot;:     0, &amp;quot;bar_count&amp;quot;:   1000}
2013-12-19 20:04:10 +0900 derive.foo.bar: {&amp;quot;foo_count&amp;quot;: 10000, &amp;quot;bar_count&amp;quot;: -10000}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*1000&lt;/code&gt;の部分はオプションで指定しないこともできます。上の例では差分値を1000倍しました。例えば&lt;code&gt;*8&lt;/code&gt;にするとバイトバイトカウンタをbpsに変換できます。演算子は&lt;code&gt;*&lt;/code&gt;と&lt;code&gt;/&lt;/code&gt;をサポートしています。また、他にも&lt;code&gt;min&lt;/code&gt;,&lt;code&gt;max&lt;/code&gt;オプションで最小値、最大値を指定できます。カウンタ値がリセットされると値がマイナスになるので&lt;code&gt;min 0&lt;/code&gt;にして使っています。&lt;/p&gt;

&lt;h3 id=&#34;作った理由:d522f76809d62287c1df42618b399133&#34;&gt;作った理由&lt;/h3&gt;

&lt;p&gt;ちなみにRRDToolやGrowthForecastを使っている場合はプラグインでやらずともRRDTool側でderiveをサポートしているのでカウンタ値をそのままつっこめばよいです。わざわざ途中で計算する必要はありません。GrowthForecastの場合はsubtractモードだけでもよいかもしれません。&lt;/p&gt;

&lt;p&gt;ではなぜFluentd側で計算しているのかというと、1つはカウンタ値よりもbpsの方が扱いやすかったかで、Fluentdで閾値設定したり解析したりと二次用途に使いやすくなります。&lt;/p&gt;

&lt;p&gt;もう1つはFluentdで生のカウンタ値を流してRRDへ格納する場合、取得して格納するまでに若干時差が発生するので、カウンタ値のようなderiveな値だとRRDへの値格納が少し遅れたり早かったりすると差分値が実際より大きくなったり小さくなったり揺れてしまいました。そのためderiveプラグインを作ってカウンタ値を取得した瞬間に計算するようにしました。&lt;/p&gt;

&lt;p&gt;なお注意点としては、Fluentdではメッセージの到着順が保証されている訳ではないので、秒単位でメッセージがinされるようなタグに対しては正しく計算でき無い場合があるのでそのようなケースでは使えません。分毎に1メッセージがinされるとかそういうったタグ向けです。&lt;/p&gt;

&lt;p&gt;作る前に既存プラグインを探してみましたが、前回値との差分を計算してくれるプラグインがなかったので自作に至りました。&lt;/p&gt;

&lt;p&gt;以上!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>親プロセスと子プロセスでTCPソケットを共有したらどうなるか</title>
          <link>http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal/</link>
          <pubDate>Wed, 11 Dec 2013 19:53:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/12/11/sharing-tcp-socket-with-parent-and-child-process-is-not-normal/</guid>
          <description>

&lt;p&gt;前回の&lt;a href=&#34;http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/&#34;&gt;Redisクライアントでforkするときは子プロセスでrecoonectする&lt;/a&gt;の続き。では&lt;a href=&#34;https://github.com/fluent/fluent-logger-ruby&#34;&gt;fluent-logger-ruby&lt;/a&gt;だとどうなるの? ってことで社内の同僚に質問してみました。色々なところでも書かれてますし混ざるんですよね。以下のコードは書かない方が良いってこと。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;サンプルコード:64faddde09b50738b6b6c75cf658995d&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#このコードは一見動くけどよくない
require &#39;fluent-logger&#39;
log = Fluent::Logger::FluentLogger.new(nil, :host=&amp;gt;&#39;localhost&#39;, :port=&amp;gt;24224)
log.post(&amp;quot;myapp.access&amp;quot;, {&amp;quot;agent&amp;quot;=&amp;gt;&amp;quot;foo&amp;quot;})     # socket(A) が確立される
fork do                                        # socket(A)は子プロセスにもコピーされる
  log.post(&amp;quot;myapp.access&amp;quot;, {&amp;quot;agent&amp;quot;=&amp;gt;&amp;quot;foo&amp;quot;})   # socket(A)に書き込む
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;質問してみた:64faddde09b50738b6b6c75cf658995d&#34;&gt;質問してみた&lt;/h3&gt;

&lt;p&gt;社内のIRCでちらっと聞いてみたところ同僚から助言いただきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;18:36 nikushi: forkしてTCPソケットを親、子で使いまわすの
18:38 sonots: 同じソケットを、並列で利用したら、混ざってることになるけど
18:39 nikushi: ふむふむ
..snip..
18:41 nikushi: ぼくがおもったのは、TCPのデータペイロードの中(つまりmsgpackのところ)
18:41 nikushi: が壊れるのかなーとおもったけど。
..snip..
18:47 sonots: RST 受け取ったとき、どのプロセスが close するの？
18:48 sonots: ruby 的には Errno::ECONNRESET
18:49 sonots: proc1 が close しようとする前に、proc2 がデータ送っちゃったりするでしょ？
18:49 sonots: ということを言いたい
18:50 hirose31: 親子で共用するの辞めたほうがいいんじゃないのかなｗ
18:57 hirose31: 一般的にやるべきじゃないと思いますよ
19:06 hirose31: APUEに書いてないかな。。
19:11 hirose31: If both parent and child write to the same descriptor, 
      without any form of synchronization, such as having the parent 
      wait for the child, their output will be intermixed 
      (assuming it’s a descriptor that was open before the fork). 
      Although this is possible—we saw it in Figure 8.2—it’s 
      not the normal mode of operation.
19:11 hirose31: だそうな
19:11 hirose31: p232
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;APUEによると、可能ではあるが出力が混ざる、通常のオペレーションではない。という記述がありました。@hirose31++&lt;/p&gt;

&lt;p&gt;またクライアントの実装によっては再接続処理で変になったり、意図しない挙動になりそうですね。&lt;/p&gt;

&lt;p&gt;APUEことAdvanced Programming in the UNIX Environment 3rd Editionについては、(ひ)メモの&lt;a href=&#34;http://d.hatena.ne.jp/hirose31/20130731/1375248744&#34;&gt;『詳細UNIXプログラミング』の原書『Advanced Programming in the UNIX Environment&lt;/a&gt;に紹介がありますので興味がある人か買うといいですね。私もこの機会に買いました。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:64faddde09b50738b6b6c75cf658995d&#34;&gt;まとめ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;19:08 sonots: TCPコネクション１本で並列処理する方法があれば、知りたい感はあります。
19:08 nikushi: SPDY w
19:13 sonots: まさにSPDY
19:12 hirose31: まさにSPDY
19:13 sonots: ふむふむ、それを想定したプロトコル設計にしないといけないわけか
19:13 nikushi: きょうの結論!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@hirose31先生, @sonots ありがとうございました。以上!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Redisクライアントでforkするときは子プロセスでrecoonectする</title>
          <link>http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/</link>
          <pubDate>Wed, 11 Dec 2013 16:24:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/12/11/reconnect-after-fork-redis-client-ruby/</guid>
          <description>&lt;p&gt;Redisクライアントインスタンスを親プロセスで作った後、forkし子プロセス側でGETとSETしても大丈夫だっけ? とおもったのでRubyの&lt;a href=&#34;https://github.com/redis/redis-rb&#34;&gt;redis-rb&lt;/a&gt;で実験しました。結論としてはfork後に子プロセス側でクローズして再確立すれば良いです。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;以下のケースは動かない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;redis&#39;

redis = Redis.new
redis.get &#39;a&#39;       # 親プロセスがRedisサーバとコネクション確立

fork do
  redis.get &#39;a&#39;     # 子プロセスがgetしようとすると...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例外が発生。子プロセスからコネクションを利用しようとしたので怒られる。
    =&amp;gt; ..snip.. redis/client.rb:285:in `ensure_connected&amp;rsquo;: Tried to use a connection from a child process without reconnecting. You need to reconnect to Redis after forking. (Redis::InheritedError)&lt;/p&gt;

&lt;p&gt;fork後にreconnectするように言われるのでそのとおりします。以下はOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#works!
require &#39;redis&#39;

redis = Redis.new
redis.get &#39;a&#39;

fork do
  redis.client.reconnect
  redis.get &#39;a&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上のコードではTCPを使うのでtcpdumpでパケットを確認してみたところ、子は自分用のTCPコネクションを確立することを確認しました。&lt;/p&gt;

&lt;p&gt;昔々Cでforkしてsocket read/writeするプログラムを書いたのを思い出しました。forkした後に複数プロセスで同じソケットを使ってはいけないので片方はクローズする、であってますかね。以上です!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>SNMPのindexキャッシュによる取得時間短縮の検証</title>
          <link>http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast/</link>
          <pubDate>Fri, 06 Dec 2013 14:47:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/12/06/snmpwalk-or-snmpget-which-are-fast/</guid>
          <description>

&lt;p&gt;ルータやサーバのインタフェースのbpsを測定する場合、SNMPのifDescr, ifHCInOctets, ifHCOutOctetsこの3つのMIBを取得すれば良いわけですが、ifDescrを毎回取得するの無駄だなとおもったので測定してみました。&lt;/p&gt;

&lt;p&gt;ifDescr, ifHCInOctets, ifHCOutOctetsをsnmpwalkする場合と、ifDescr(ifIndex)をキャッシュしifHCInOctets, ifHCOutOctetsをsnmpgetする場合で比較します。&lt;/p&gt;

&lt;h3 id=&#34;ベンチスクリプト:ee3d736aa0c24863cdd0230b4b19109a&#34;&gt;ベンチスクリプト&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;snmp&#39;
require &#39;benchmark&#39;

puts &amp;quot;creating cache&amp;quot;
indexes = []
SNMP::Manager.open(host: &#39;localhost&#39;, community: &#39;public&#39;) do |manager|
  manager.walk(%w(ifIndex)) { |row| indexes &amp;lt;&amp;lt; row[0].value.to_i }
end

Benchmark.bm do |x|
  puts &amp;quot;walk&amp;quot;
  x.report {
    SNMP::Manager.open(host: &#39;localhost&#39;, community: &#39;public&#39;) do |manager|
      manager.walk(%w(ifDescr ifHCInOctets ifHCOutOctets)) { |row| nil }
    end
  }

  sleep 3
  puts &amp;quot;cache with get&amp;quot;
  x.report {
    SNMP::Manager.open(host: &#39;localhost&#39;, community: &#39;public&#39;) do |manager|
      indexes.each do |i|
        manager.get_value([&amp;quot;ifHCInOctets.#{i}&amp;quot;, &amp;quot;ifHCOutOctets.#{i}&amp;quot;])
      end
    end
  }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際はlocalhostではなくNICをたくさん持った機器を指定。またベンチスクリプトでは簡略してifIndexだけキャッシュしてます。&lt;/p&gt;

&lt;h3 id=&#34;結果:ee3d736aa0c24863cdd0230b4b19109a&#34;&gt;結果&lt;/h3&gt;

&lt;p&gt;当然といえば当然ですがbind variablesの数がwalk=3個、get=2個なのでgetが早い。26%早くなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       user     system      total        real
walk
   0.850000   0.210000   1.060000 ( 11.343248)
index cached get
   0.710000   0.210000   0.920000 (  8.387955)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デメリット:ee3d736aa0c24863cdd0230b4b19109a&#34;&gt;デメリット&lt;/h3&gt;

&lt;p&gt;キャッシュのデメリットもあります。インデックス番号は主キーになりますが、主キーに対する実態が変わってしまう場合がありえます。Linuxでインタフェースを増やしたり減らしたり、リブートしたりしてみたところ、主キーに対する実態が変わることが分かりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;こういう状態で
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.4 = STRING: veth0
IF-MIB::ifDescr.5 = STRING: veth1
IF-MIB::ifDescr.6 = STRING: eth1.100

veth0,veth0を消した
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.6 = STRING: eth1.100

eth1.200を追加した(4ではなく7が選ばれた)
$ snmpwalk -c public -v 2c localhost:10161 ifDesc
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.6 = STRING: eth1.100
IF-MIB::ifDescr.7 = STRING: eth1.200

リブートした後
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: eth0
IF-MIB::ifDescr.3 = STRING: eth1
IF-MIB::ifDescr.4 = STRING: eth1.100   # 以前は 4 は veth0 だった!!!!!
IF-MIB::ifDescr.5 = STRING: eth1.200   # 以前は 5 は veth1 だった!!!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ciscoなどではindex値を固定化するオプションが有効という情報もありますので、ベンダによるみたい。&lt;/p&gt;

&lt;p&gt;ちなみに、Cactiではindexキャッシュを動的にリフレッシュする仕組みがあって&lt;a href=&#34;http://www.cacti.net/downloads/docs/html/cli_poller_reindex_hosts.html&#34;&gt;こちら&lt;/a&gt;のドキュメントによると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アップタイム(sysUptime)が小さくなった(再起動)ら強制的にindexキャッシュを更新&lt;/li&gt;
&lt;li&gt;indexの総数が変わった場合(たとえばifIndexの中の個数が変わった場合)。インタフェースなどのケース。&lt;/li&gt;
&lt;li&gt;全フィールドを検証する(?) Macアドレスなどがこのケース。エントリに変化があればキャッシュ削除ってことですかね。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インタフェースにに限ればCactiをまねてアップタイムとインデックスの個数を見て判定すれば上手くいきますね。&lt;/p&gt;

&lt;p&gt;しかしSNMP、何十年前の技術をいつまで使うんだ!!と毎度おもってしまいます。snmpwalk時間かかるし&amp;hellip;.。&lt;/p&gt;

&lt;p&gt;以上です!!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Fluentdのマルチプロセス化が簡単になったので試してみた!</title>
          <link>http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/</link>
          <pubDate>Fri, 06 Dec 2013 08:35:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/</guid>
          <description>

&lt;p&gt;ワイワイ! &lt;a href=&#34;http://qiita.com/advent-calendar/2013/fluentd&#34;&gt;Fluentd Advent Calendar 2013&lt;/a&gt; 6日目担当の &lt;a href=&#34;http://twitter.com/niku4i&#34;&gt;@niku4i&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;今日はFluentdのマルチプロセス化について。最近公式ページに &lt;a href=&#34;http://docs.fluentd.org/articles/in_multiprocess&#34;&gt;Multiprocess Input Plugin&lt;/a&gt; がドキュメント化されました。&lt;/p&gt;

&lt;p&gt;Fluentdはシングルプロセスで動作するため、マルチコアなサーバ環境下では全コアのCPUを消費できません。Fluentd1プロセスでも小〜中規模の環境であれば十分さばけますが、大規模環境ではCPUが足りなくなります。そこでCPUを効率的に使うため、一昔前までは起動スクリプトをコア数に応じて用意しマルチプロセス化するといった手法を用いていましたが手軽にはできませんでした。&lt;/p&gt;

&lt;p&gt;そこで最近登場したのが &lt;a href=&#34;https://twitter.com/frsyuki&#34;&gt;@frsyuki&lt;/a&gt; さん作の &lt;a href=&#34;http://docs.fluentd.org/articles/in_multiprocess&#34;&gt;Multiprocess Input Plugin&lt;/a&gt; です。ネット上に試した記事がなかったので試してみました。&lt;/p&gt;

&lt;p&gt;Fluentdは0.10.41を使っています。gemコマンドでインストールしました。&lt;/p&gt;

&lt;h3 id=&#34;インストール:aa46c961993492d9cda41a5b093b6010&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;Fluentdのコアプラグインではないので、fluent-gemコマンドを使ってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#install
$ fluent-gem install fluent-plugin-multiprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、td-agent版の場合はコマンドのパスが通っていないので以下のとおりインストールしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#install
$ /usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-multiprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンフィグレーション:aa46c961993492d9cda41a5b093b6010&#34;&gt;コンフィグレーション&lt;/h3&gt;

&lt;p&gt;今回は4プロセスでそれぞれ24221〜24224/TCPでListenし受信したメッセージを標準出力に書き出す設定を作りました。書き出し部分は全プロセス共通なので &lt;code&gt;include&lt;/code&gt; で1つにまとめました。非常に簡単な設定例なので面白みがないですが実際はinclude先にout系の設定を入れていくことになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;#/etc/fluent/fluentd.conf
&amp;lt;source&amp;gt;
  type multiprocess

  &amp;lt;process&amp;gt;
    cmdline -c /etc/fluent/fluentd_child1.conf
    sleep_before_start 1s
    sleep_before_shutdown 5s
  &amp;lt;/process&amp;gt;

  &amp;lt;process&amp;gt;
    cmdline -c /etc/fluent/fluentd_child2.conf
    sleep_before_start 1s
    sleep_before_shutdown 5s
  &amp;lt;/process&amp;gt;

  &amp;lt;process&amp;gt;
    cmdline -c /etc/fluent/fluentd_child3.conf
    sleep_before_start 1s
    sleep_before_shutdown 5s
  &amp;lt;/process&amp;gt;

  &amp;lt;process&amp;gt;
    cmdline -c /etc/fluent/fluentd_child4.conf
    sleep_before_start 1s
    sleep_before_shutdown 5s
  &amp;lt;/process&amp;gt;

&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cmdline&lt;/code&gt;にマルチプロセス化した時の子プロセスに読み込ませるコンフィグファイルを指定します。このコンフィグは以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;#/etc/fluent/fluentd_child1.conf
# Receive events from TCP port
&amp;lt;source&amp;gt;
  type forward
  port 24221
&amp;lt;/source&amp;gt;

# Include common configurations
include conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fluentd_child[2-4].confのコンフィグ掲載は省略しますが &lt;code&gt;port&lt;/code&gt; の番号のみ変更します。&lt;/p&gt;

&lt;p&gt;includeしたコンフィグで出力を定義しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;#/etc/fluent/conf.d/match_all.conf
# Output messages to STDOUT
&amp;lt;match **&amp;gt;
  type stdout
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;起動:aa46c961993492d9cda41a5b093b6010&#34;&gt;起動&lt;/h3&gt;

&lt;p&gt;今回はコマンドラインから起動します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ fluentd -c fluent/fluentd.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/niku4i/7802190&#34;&gt;起動ログ&lt;/a&gt;を見ると親fluentdプロセスが子fluentdを立ち上げていることが分かります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#起動ログ抜粋
2013-12-05 08:45:30 +0000 [info]: launching child fluentd -c /etc/fluent/fluentd_child4.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;netstatコマンドを使って確認しました。確かに4ポートでListenしています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo netstat -anpt | grep -e ruby -e Proto
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   
tcp        0      0 0.0.0.0:24221               0.0.0.0:*                   LISTEN      25160/ruby          
tcp        0      0 0.0.0.0:24222               0.0.0.0:*                   LISTEN      25143/ruby          
tcp        0      0 0.0.0.0:24223               0.0.0.0:*                   LISTEN      25126/ruby          
tcp        0      0 0.0.0.0:24224               0.0.0.0:*                   LISTEN      25108/ruby 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;追記-i-オプションによる動的リッスンポート切替:aa46c961993492d9cda41a5b093b6010&#34;&gt;追記: -i オプションによる動的リッスンポート切替&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;2013/12/19 追記&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;あまり知られていないですがFluentdには&lt;code&gt;-i&lt;/code&gt;という起動オプションがあり&lt;code&gt;-i&lt;/code&gt;に続いてコンフィグを記述することができます。以下のようにすればinput forwardでリッスンするポートをプロセス毎に変えることができます。ポート番号などプロセス固有の設定は&lt;code&gt;-i&lt;/code&gt;で渡すことで同じ設定ファイルで異なる挙動ということも実現できますね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
  type multiprocess
  &amp;lt;process&amp;gt;
    cmdline -i &amp;quot;&amp;lt;source&amp;gt;\ntype forward\nport 20000\n&amp;lt;/source&amp;gt;&amp;quot; -c /etc/fluentd/fluentd.conf
    sleep_before_start 1s
    sleep_before_shutdown 1s
  &amp;lt;/process&amp;gt;
  &amp;lt;process&amp;gt;
    cmdline -i &amp;quot;&amp;lt;source&amp;gt;\ntype forward\nport 20001\n&amp;lt;/source&amp;gt;&amp;quot; -c /etc/fluentd/fluentd.conf
    sleep_before_start 1s
    sleep_before_shutdown 1s
  &amp;lt;/process&amp;gt;
  &amp;lt;process&amp;gt;
    cmdline -i &amp;quot;&amp;lt;source&amp;gt;\ntype forward\nport 20002\n&amp;lt;/source&amp;gt;&amp;quot; -c /etc/fluentd/fluentd.conf
    sleep_before_start 1s
    sleep_before_shutdown 1s
  &amp;lt;/process&amp;gt;
&amp;lt;source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:aa46c961993492d9cda41a5b093b6010&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Multiprocess Input Pluginにより簡単にマルチプロセス化することができました。&lt;/p&gt;

&lt;p&gt;気になる安定性などに関して、&lt;a href=&#34;https://groups.google.com/forum/#!topic/fluentd/syXPqRAE-4w&#34;&gt;Fluentdのメーリングリスト上の議論&lt;/a&gt; によると 10+ billion records / day 環境下に投入しているユーザ事例もあるようです!&lt;/p&gt;

&lt;p&gt;話はそれますが、Fluentdを使っている人やこれから使ってみようという人は &lt;a href=&#34;http://docs.fluentd.org/ja/articles/mailing-list&#34;&gt;Fluentdのメーリングリスト&lt;/a&gt; にjoinすることをオススメします!(自分はもっぱら読むだけ専門ですが) メールは基本英語ですが流し読みするだけでも有益な情報を拾えたり、リリース状況をタイムリーに知ることができます。また、最近では海外のエンジニアの間でも知られるようになってきており、海外でのユースケースなど知れるかもしれません。個人的には英語の勉強にもなるので両得だとおもっています。コミュニティについては@tagomorisさんの&lt;a href=&#34;http://tagomoris.hatenablog.com/entry/2013/12/03/150656&#34;&gt;Fluentdとはどのようなソフトウェアなのか&lt;/a&gt;の中で詳しく書かれていますね。&lt;/p&gt;

&lt;p&gt;またFluentdの&lt;code&gt;-i&lt;/code&gt;オプションを紹介しました。&lt;/p&gt;

&lt;p&gt;簡単ではありましたが以上です。&lt;/p&gt;

&lt;p&gt;すごい知った風でしたがgemの使い方を紹介しただけでした。最近Fluentdにふれる機会がなかったので、ユースケースを開拓してFluentdを積極的に使ってアウトプットしていきたいですね。&lt;/p&gt;

&lt;p&gt;次は、&lt;a href=&#34;https://twitter.com/yteraoka&#34;&gt;@yteraoka&lt;/a&gt; さんです!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHubの組織が成長する過程で変えたことと変えなかったこと、のメモ</title>
          <link>http://orihubon.com/blog/2013/11/20/github-memo/</link>
          <pubDate>Wed, 20 Nov 2013 12:04:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/11/20/github-memo/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://wazanova.jp/items/675&#34;&gt;GitHubの組織が成長する過程で変えたことと変えなかったこと&lt;/a&gt;を読んで、良いこと書いててたのでブログに引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;情報は抱えないで、wiki / chat などを使ってとにかく共有する。社内の特定の人だけに情報が留まるとセクショナリズムにつながる。（追記: 短く意訳してますが、ビデオでは「このことは専門であるあの人に聞かなくてはいけないという意味のない権威主義がはびこるので組織が硬直する。」的な説明がされてます。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特定の人に聞かないと分からない、権威的になっている状態はあるあるですね。そこで属人的になってるから脱却しようと上司が声高々に&amp;rdquo;明文化しよう!!!&amp;ldquo;というだけじゃダメなんだろうな&amp;hellip;とおもうわけです。この記事のこのポイントだけ切り出すと単純な話なのですが、Githubの透明性といった文化がある前提なので、他社で単純に明文化だけ取り入れてもうまく行かないかもしれませんね。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;新入社員はGithubイシュー、チャットログ、pull requestとか読んで、自然と学ぶから邪魔しない。情報はアクセスできるようにするが、時間かけて教え込んだりしない。しかし、この放置する方式だけでは、Githubという組織に早く慣れ親しむのは無理があるので、最近は、最初の１週間はサンフランシスコのオフィスに呼んで、バディ（メンター）をアサインしている。バディの期間をもう少し長くすることも検討中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最初の1週間、集中的にコミュニケーションとるのは良さげ。でも新卒だったらどうするかな。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;153のチャットルームがある。実際のオフィスと違ってつくるのは安いし、全てのチャットルームに参加するわけでなく、個人単位で選択して参加することで適宜最適化できるので、一時的なものも含めて積極的にルームをつくるようにしている。チャットルームで名前が@でメンションされるとモバイル/デスクトップにpush notificationが飛んでくる。必要なときに連絡がくるが、答えられるときに反応すればよいという非同期スタイル。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;チャットツール何使ってるんだろう。IRCではないことは確かだ&amp;hellip;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;テクノロジーでなくてプロダクトが最先端のいいものであるべき。Ruby, C, git, MySQL, Memcachedというシンプルな構成に絞っている。最新のテクノロジーが会社を成功させるわけではない、どうワークフローをどのように信頼できるテクノロジーとツールでつくりあげていくかがもっと大事。システムを安定して運営できるということは素敵なこと。&lt;/p&gt;

&lt;p&gt;役割を増やしたチームを新設して組織を無駄に肥大化させるのでなく、ツールを活用して解決できることも多い。組織を無駄に肥大化させるような昔からの固定観念は疑ってかかるべき。会社は成長する過程では変わらなければいけない。しかし、バリューは変えてはいけない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そうですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>スロークエリをMySQL再起動せずオンラインで調査する</title>
          <link>http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql/</link>
          <pubDate>Tue, 05 Nov 2013 10:11:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/11/05/dump-sloq-query-log-in-mysql/</guid>
          <description>&lt;p&gt;スロークエリをログに吐く方法。設定ファイル修正する必要はなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set global slow_query_log = 1;
mysql&amp;gt; set global slow_query_log_file = &#39;/tmp/slowquery.log&#39;;
mysql&amp;gt; set global long_query_time = 0; # 0秒にセットすると全queryをロギング
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;調査が終わったら&lt;code&gt;slow_query_log = 0&lt;/code&gt;にするのを忘れないように。本番環境とかでやるとログがぶくぶく太るのでやらないほうが良いでしょう。&lt;/p&gt;

&lt;p&gt;ログの解析はmysqldumpslowコマンドで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldumpslow /tmp/slowquery.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、コネクションプーリングしている場合は新規コネクションから有効になるようです。アプリを再起動しないと反映されないです。mysqlコマンドから設定した場合も&lt;code&gt;show variables like &#39;long_query_time&#39;;&lt;/code&gt;やっても値が反映されていないように見えますが、再接続すると確認できました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ISUCON3予選の記録</title>
          <link>http://orihubon.com/blog/2013/10/07/isucon3-yosen/</link>
          <pubDate>Mon, 07 Oct 2013 10:38:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/10/07/isucon3-yosen/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://isucon.net/archives/29328289.html&#34;&gt;ISUCON3&lt;/a&gt;予選に参加しました。&lt;/p&gt;

&lt;p&gt;チームは会社の同僚の&lt;a href=&#34;https://twitter.com/sonots&#34;&gt;@sonots&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/Spring_MT&#34;&gt;@Spring_MT&lt;/a&gt;さん3名(チーム Miami)、予選は10/5(土), &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt;(日)に分かれていて僕たちは2日目に参加しました。&lt;/p&gt;

&lt;p&gt;長時間の作業になるので会社で作業しました。僕は朝から興奮してしまって1時間前に会場入りして素振りしてましたが。&lt;/p&gt;

&lt;h4 id=&#34;お題アプリ:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;お題アプリ&lt;/h4&gt;

&lt;p&gt;githubのgistの機能ライクなメモアプリでした。&lt;/p&gt;

&lt;h4 id=&#34;最終的な構成:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;最終的な構成&lt;/h4&gt;

&lt;p&gt;nginx + unicorn + MySQL + InnoDB memcached plugin&lt;/p&gt;

&lt;h4 id=&#34;午前-スタート:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;午前 - スタート&lt;/h4&gt;

&lt;h5 id=&#34;10-00:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;10:00&lt;/h5&gt;

&lt;p&gt;まず、インスタンスによってCPUのモデルに差異があるかもしれないのでメンバ3人それぞれインスタンスを作成しCPUのモデルを確認しましたが結局偏りはありませんでした。&lt;/p&gt;

&lt;h5 id=&#34;10-30:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;10:30&lt;/h5&gt;

&lt;p&gt;僕はwebappをgithub.comにgit pushしたり、予め用意しておいたカーネルチューニング(とってもネットワーク周りを少しだけ)をしてました。&lt;/p&gt;

&lt;h5 id=&#34;11-00:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;11:00&lt;/h5&gt;

&lt;p&gt;my.cnf書き換えてslow query logを出すように修正。最初にベンチ走らせてスコアが800ほど。あまり大きなslow queryはありませんでした。&lt;/p&gt;

&lt;h5 id=&#34;10-20:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;10:20&lt;/h5&gt;

&lt;p&gt;他の2名がリードしてくれてる状況なので、僕何からやろうかなという状態。とりあえずもう一度ドキュメント読んで注意点を確認しました。&lt;code&gt;--workload&lt;/code&gt;これは重要なのでチームに周知しときました:) 他のチームでこれ忘れてる人結構ありましたね。&lt;/p&gt;

&lt;p&gt;また、&lt;a href=&#34;http://miniprofiler.com/&#34;&gt;rack-mini-profiler&lt;/a&gt;を導入して遅いページを探しました。これ便利ですね。&lt;/p&gt;

&lt;p&gt;変更点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nginx導入。public_htmlをnginxで返すよう変更&lt;/li&gt;
&lt;li&gt;memo POST時にgem_markdown呼び出してmarkdownからHTMLに変換。表示時に都度HTMLコンバートするのをやめた&lt;/li&gt;
&lt;li&gt;N+1問題。&lt;code&gt;memos&lt;/code&gt;テーブルだけで完結するようにするため、&lt;code&gt;memos&lt;/code&gt;テーブルに&lt;code&gt;username&lt;/code&gt;フィールドを追加することにした。&lt;/li&gt;
&lt;li&gt;複合インデックスを入れてパフォーマンス改善&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;create index user_create_at_index on memos (user, created_at);
create index user_is_private_created_at_index on memos (user, is_private, created_at);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クエリの改善系は僕も対応しました。1つ、2つ改善できてホッとしました。&lt;/p&gt;

&lt;h5 id=&#34;13-30:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;13:30&lt;/h5&gt;

&lt;p&gt;コンビニ飯&lt;/p&gt;

&lt;h4 id=&#34;午後-伸び悩み:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;午後 - 伸び悩み&lt;/h4&gt;

&lt;p&gt;クエリを改善し、nginx + unicornの構成にしスコアは上がりましたが、午後はこの後どうしようか悩む時間でした。&lt;/p&gt;

&lt;p&gt;前回isucon2ではVarnishを入れることで劇的にスコアアップできた事例がありましたので、Varnish対応を始めましたがVarnish作戦は結局失敗でした。recentページがキャッシュしにくい(olderとnewerのリンク)構成であったという点&amp;hellip;と認識しています。あとセッションのバリデーションでベンチがコケたみたい。(このへんは僕やってないからもやっとしてる)&lt;/p&gt;

&lt;p&gt;より詳細なプロファイリングのためNewRelicも入れてプロファイリング(by Spring_MTさん)。トップページとrecentが70ms程度かかっている状況で以下のクエリがある以上この程度かかるのかな&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT id, first_sentence, username, created_at FROM memos WHERE is_private=0 ORDER BY id DESC LIMIT 100 OFFSET #{page * 100}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;indexは効かせていたのでこのSELECTやめて別のアプローチをとればスコアアップ狙える、逆にいうとこれ改善しないと上位には入れないよね、というのがチームの午後の課題でしたが最後まで答えを出せずじまいで終わってしまいました。&lt;/p&gt;

&lt;p&gt;その他改善したところは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;markdown生成のためフォークやめて&lt;a href=&#34;https://github.com/vmg/redcarpet&#34;&gt;redcarpet&lt;/a&gt;使った。でも+500くらい&lt;/li&gt;
&lt;li&gt;毎回memoのcontentを&lt;code&gt;.split(/\r?\n/)&lt;/code&gt;せず、&lt;code&gt;memos.first_sentence&lt;/code&gt;フィールドを作ってmemo POST時に入れるようにした&lt;/li&gt;
&lt;li&gt;メモ数をカウントする&lt;code&gt;SELECT count(*) FROM memos&lt;/code&gt;をmemdにキャッシュした&lt;/li&gt;
&lt;li&gt;sonotsスペシャル =&amp;gt; 詳細はsonots blogで&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後はログ吐くのをやめてプロファイリングも切って&lt;code&gt;--workload=4&lt;/code&gt;くらいにして測定して終了。&lt;/p&gt;

&lt;h3 id=&#34;反省点とか所感:5afe87bdc4e5b80266e60ea761d4ce04&#34;&gt;反省点とか所感&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;memcachedみたいなものには気づかなかった&amp;hellip;&lt;/li&gt;
&lt;li&gt;8時間かっとなってコード釘付けになりがちですが、30分くらいはコーヒー飲みながらメンバでディスカッションしてもよかったかも&lt;/li&gt;
&lt;li&gt;githubにwebappを上げてpull req方式でコード改修しようとして、実機でコード変えて即ベンチ走らせたい場合もあってmasterがconflictしてしまった。どっちもどっちで難しい。他のチームどうやってるか気になる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに、自分は普段高負荷環境のWebサービスを運用,開発してる訳ではなくて、Railsで管理系アプリ書いたり監視系ツール作ったりしてる系。始まる前は自分どれだけ対応できるか不安でした。周りのエンジニアや参加者も凄い人たちばかりですし。でも終わってみると参加してよかったです。しんどかったけど。反省会のビールがうまかったです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Yohoushi screencasts!</title>
          <link>http://orihubon.com/blog/2013/10/01/yohoushi-screencasts/</link>
          <pubDate>Tue, 01 Oct 2013 11:37:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/10/01/yohoushi-screencasts/</guid>
          <description>

&lt;p&gt;グラフツール &lt;a href=&#34;http://yohoushi.github.io/yohoushi/&#34;&gt;Yohoushi&lt;/a&gt;を紹介するスクリーンキャストを作ってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yohoushi.github.io/yohoushi/&#34;&gt;Yohoushi&lt;/a&gt;というグラフツールを&lt;a href=&#34;https://twitter.com/sonots&#34;&gt;@sonots&lt;/a&gt;さんと作っています。Yohoushiを使うと&lt;a href=&#34;http://kazeburo.github.io/GrowthForecast/&#34;&gt;GrowthForecast&lt;/a&gt;に登録したグラフと連携し検索やタギング、グラフ画像の拡大縮小、期間カスタム指定などができます。&lt;/p&gt;

&lt;p&gt;会社の同僚の方々からYohoushiがどんなツールかもっと分かりやすく解説してよというコメントをいただきまして、Yohoushiの概要〜インストール、簡単な使い方までをscreencastにしてみました。&amp;rdquo;GrowthForecast使ってるからそろそろYohoushiも&amp;hellip;でもYohoushiむずいんでしょ?&amp;rdquo; とおもわれている方にYohoushiの導入の簡単さを分かってもらえる内容になってるとおもいます。&lt;/p&gt;

&lt;p&gt;各話3分程度です。エピソード1は概要なのでわかってる方は飛ばしてください。Yohoushiの雰囲気を知るだけならエピソード3、4だけでもおすすめです!&lt;/p&gt;

&lt;h4 id=&#34;1-yohoushiとはなにか:9c11aec6d3a1f30ff0f0d5b499f4746a&#34;&gt;1 Yohoushiとはなにか?&lt;/h4&gt;

&lt;p&gt;{% youtube ZjZjtzyx6Jc %}&lt;/p&gt;

&lt;h4 id=&#34;2-yohoushiをインストールしてみよう:9c11aec6d3a1f30ff0f0d5b499f4746a&#34;&gt;2 Yohoushiをインストールしてみよう&lt;/h4&gt;

&lt;p&gt;{% youtube mqIR0RClP3o %}&lt;/p&gt;

&lt;h4 id=&#34;3-yohoushiを使ってみよう:9c11aec6d3a1f30ff0f0d5b499f4746a&#34;&gt;3 Yohoushiを使ってみよう&lt;/h4&gt;

&lt;p&gt;{% youtube q_vMqjpFRUc %}&lt;/p&gt;

&lt;h4 id=&#34;4-yohoushiを使ってグラフにタグをつけよう:9c11aec6d3a1f30ff0f0d5b499f4746a&#34;&gt;4 Yohoushiを使ってグラフにタグをつけよう&lt;/h4&gt;

&lt;p&gt;{% youtube EV51EmjC74o %}&lt;/p&gt;

&lt;h4 id=&#34;補足:9c11aec6d3a1f30ff0f0d5b499f4746a&#34;&gt;補足&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インストールする際のrakeやbundleは&lt;code&gt;bin/&lt;/code&gt;に同封のbinstubの&lt;code&gt;bin/bundle&lt;/code&gt;, &lt;code&gt;bin/rake&lt;/code&gt;を使ってください。&lt;code&gt;bin/&lt;/code&gt;配下のコマンドで実行すると&lt;code&gt;RAILS_ENV=production&lt;/code&gt;が自動的にセットされます。パスの通ったコマンドを使ってしまうと&lt;code&gt;RAILS_ENV=development&lt;/code&gt;が自動的にセットされるので意図しない動作になるので注意してください。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GrowthForecastのグラフはscreencast用のダミーで@sonotsさん作の&lt;a href=&#34;https://github.com/sonots/growthforecast-client&#34;&gt;growthforecast-client&lt;/a&gt;を使ってランダム値を定期POSTしてます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveSupportのin_groups_ofメソッドでビューが捗る!</title>
          <link>http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention/</link>
          <pubDate>Thu, 26 Sep 2013 19:21:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/09/26/in-groups-of-activesupport-extention/</guid>
          <description>&lt;p&gt;ActiveSupportの&lt;code&gt;inc_groups_of&lt;/code&gt;メソッドを使ってみたらビューが捗った。&lt;/p&gt;

&lt;p&gt;Arrayクラス拡張であるin_groups_ofメソッドとin_groupsメソッドを使うと簡単に配列をグルーピング化することができます。&lt;/p&gt;

&lt;p&gt;例えば、以下の配列データ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w(1, 2, 3, 4, 5, 6, 7, 8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in_groups_ofメソッドをつけて呼び出すと引数指定の数の要素数の小配列をメンバにした配列を返してくれます。また第2引数で空部分に埋める要素指定もできます。デフォルトはnilです。falseを与えるとnilの代わりに要素数を切り詰めます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups_of(2)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;], [&amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;], [&amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;], [&amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups_of(5)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;], [&amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, nil, nil]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups_of(5, &#39;none&#39;)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;], [&amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;none&amp;quot;, &amp;quot;none&amp;quot;]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups_of(5, false)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;], [&amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使うシーンとしては、ビュー上で指定個数毎でグルーピングして表示したいときに便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;group0&amp;quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;group1&amp;quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;4&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;5&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;6&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;group2&amp;quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;7&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;8&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;9&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;似たような名前でin_groupsというメソッドもあります。こちらは配列を指定グループ数に分割してくれるメソッドです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups(2)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;], [&amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups(3)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;], [&amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;], [&amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, nil]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups(5)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;], [&amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;], [&amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;], [&amp;quot;7&amp;quot;, nil], [&amp;quot;8&amp;quot;, nil]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups(5, &amp;quot;none&amp;quot;)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;], [&amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;], [&amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;], [&amp;quot;7&amp;quot;, &amp;quot;none&amp;quot;], [&amp;quot;8&amp;quot;, &amp;quot;none&amp;quot;]]

irb&amp;gt; %w(1 2 3 4 5 6 7 8).in_groups(5, false)
=&amp;gt; [[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;], [&amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;], [&amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;], [&amp;quot;7&amp;quot;], [&amp;quot;8&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普段Railsやってる人には当たり前かもしれない内容でした。いざ使いたかったときにメソッド名を忘れていたので、以上、自分メモでした!&lt;/p&gt;

&lt;p&gt;他にもActiveSupportの拡張は便利なものがあるので&lt;a href=&#34;http://edgeguides.rubyonrails.org/active_support_core_extensions.html&#34;&gt;Active Support Core Extensions&lt;/a&gt;の一読おすすめです!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Sinatra::Reloader</title>
          <link>http://orihubon.com/blog/2013/08/06/sinatra-reloader/</link>
          <pubDate>Tue, 06 Aug 2013 19:30:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/08/06/sinatra-reloader/</guid>
          <description>&lt;p&gt;Sinatraを久々に使っている。はて、development環境での自動リロードどうやるのだったか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sinatrarb.com/contrib/reloader.html&#34;&gt;Sinatra::Reloader&lt;/a&gt; を使うと。&lt;/p&gt;

&lt;p&gt;実際には&lt;a href=&#34;https://github.com/sinatra/sinatra-contrib&#34;&gt;sinatra-contrib&lt;/a&gt;というgemをinstallするわけだけど、このgemには他にも機能があるので困ったときはこのgemを眺めるとよさそうですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>RubyでIPアドレスの正規表現を超簡単に書く</title>
          <link>http://orihubon.com/blog/2013/08/06/regex-for-ipv-address/</link>
          <pubDate>Tue, 06 Aug 2013 09:14:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/08/06/regex-for-ipv-address/</guid>
          <description>&lt;p&gt;正規表現自前で書かずとも、&lt;code&gt;Resolv::IPv4::Regex&lt;/code&gt;を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;resolv&#39;
Resolv::IPv4::Regex.class     
=&amp;gt; Regexp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IPv6の場合は、&lt;code&gt;Resolv::IPv6::Regex&lt;/code&gt;を使いましょう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>KVMのrawフォーマットのイメージファイルをマウントする</title>
          <link>http://orihubon.com/blog/2013/07/31/mount-kvm-os-image/</link>
          <pubDate>Wed, 31 Jul 2013 15:49:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/31/mount-kvm-os-image/</guid>
          <description>&lt;p&gt;rawフォーマット限定。&lt;/p&gt;

&lt;p&gt;マウント&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# losetup /dev/loop0 /data/vm/myserver.img
# kpartx -av /dev/loop0 
# ls -alF /dev/mapper
# mount /dev/mapper/loop0p1 /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アンマウント&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# umount /mnt
# kpartx -dv /dev/loop0
# losetup -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://d.hatena.ne.jp/okinaka/20091210/1260445130&#34;&gt;KVMのイメージをマウントする その2&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>virt-installでvncサーバを立ち上げてCentOSをグラフィカルインストール</title>
          <link>http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install/</link>
          <pubDate>Mon, 29 Jul 2013 22:58:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/29/install-centos-in-graphical-mode-via-vnc-server-and-virt-install/</guid>
          <description>&lt;p&gt;やっつけ感ある手順であるが。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /data/vm
qemu-img create -f qcow2 server01.img 10G
virt-install -n server01 \
-r 1024 \
--disk path=/data/vm/server01.img,size=10,format=qcow2 \
--virt-type=kvm \
--vcpus=2 \
--os-type linux \
--os-variant=rhel6 \
--network bridge=br0 \
--graphics vnc,password=abc123,port=5910,keymap=us \ 
--cdrom=/var/tmp/CentOS-6.4-x86_64-minimal.iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに、virsh consoleでコンソールを取れるようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /et/grub.conf

#splashimage=(hd0,0)/boot/grub/splash.xpm.gz  # この行は不要
serial --unit=0 --speed=115200 # 追加
terminal --timeout=5 serial console # 追加
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# echo ttyS0 &amp;gt;&amp;gt; /etc/securetty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CentOS6の場合upstart経由で起動時にttyS0を自動起動してあげる必要がある。CentOS6.4最小インストール直後であればttyS0は自動起動してくれていた。以下のとおり確認しただけ。&lt;/p&gt;

&lt;p&gt;起動しているか確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# initctl list |grep serial
serial (ttyS0) start/running, process 5091
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/init/serial.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://lab.unicast.ne.jp/2013/02/15/%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88/&#34;&gt;仮想マシンにシリアルコンソールで接続できるよ&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveRecordのtypeフィールドについて</title>
          <link>http://orihubon.com/blog/2013/07/29/type-column-of-activerecord/</link>
          <pubDate>Mon, 29 Jul 2013 16:26:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/29/type-column-of-activerecord/</guid>
          <description>&lt;p&gt;ActiveRecordのtypeフィールドについて。&lt;/p&gt;

&lt;p&gt;ActiveRecord::Baseを継承したモデルクラスで&amp;rdquo;type&amp;rdquo;という名前のフィールドを使おうとすると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord::SubclassNotFound: The single-table inheritance mechanism failed to locate the subclass: &#39;abc123&#39;. This error is raised because the column &#39;type&#39; is reserved for storing the class in case of inheritance. Please rename this column if you didn&#39;t intend it to be used for storing the inheritance class or overwrite Graph.inheritance_column to use another column for that information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という例外に遭遇します。ActiveRecordでは&amp;rdquo;type&amp;rdquo;フィールドはSTIという機能により予約されています。 &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Base.html&#34;&gt;ActiveRecordのSTIの説明&lt;/a&gt;にtypeフィールドは継承関係にあるクラス名を保存するフィールドであることが書かれています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Active Record allows inheritance by storing the name of the class in a column
that by default is named “type” (can be changed by overwriting
Base.inheritance_column).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;このエラーを回避するには以下どちらかで対応します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;typeというフィールド名を使うのをやめて別の名前を使う。&lt;/li&gt;
&lt;li&gt;もしくは、STIで使うフィールド名を変えてしまう。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2のケースでは以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#app/models/campany.rb
class Company &amp;lt; ActiveRecord::Base; end
  self.inheritance_column = &#39;sti_type&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ケースバイケースですが、ある案件ではtypeフィールドをどうしても使いたかったので2の方法を取りました。type名以外の選択が可能であれば1のケースが良いとおもいます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>bundle_frozenとかbundle_without</title>
          <link>http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without/</link>
          <pubDate>Fri, 26 Jul 2013 16:37:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/26/bundle-frozen-and-bundle-without/</guid>
          <description>

&lt;p&gt;bundlerの&lt;code&gt;--deployment&lt;/code&gt;や&lt;code&gt;--without&lt;/code&gt;に関してはまったことのメモ。&lt;/p&gt;

&lt;h3 id=&#34;bundle-install-deployment:28e11def48886e5272dd0056d0f6083d&#34;&gt;bundle install &amp;ndash;deployment&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--deployment&lt;/code&gt;をつけ実行すると&lt;code&gt;vendor/bundle&lt;/code&gt;以下にgemがインストールされます。deploymentの名の通り本番環境でインストールする場合を想定したコマンドです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ bundle install --deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bundle-frozen:28e11def48886e5272dd0056d0f6083d&#34;&gt;BUNDLE_FROZEN&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--deployment&lt;/code&gt;の名のとおり本番環境でインストールする場合を想定したコマンドですが、うっかり開発環境で実行してしまって少々はまってしまいました。&lt;/p&gt;

&lt;p&gt;開発環境でGemfileに新しくgemを追加したので、&lt;code&gt;bundle install&lt;/code&gt;しようとします。すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install
You are trying to install in deployment mode after changing
your Gemfile. Run `bundle install` elsewhere and add the
updated Gemfile.lock to version control.

If this is a development machine, remove the Gemfile freeze
by running `bundle install --no-deployment`.

You have added to the Gemfile:
* colorize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーがでます。&lt;code&gt;bundle install --deployment&lt;/code&gt;を1度でも実行すると&lt;code&gt;.bundle/config&lt;/code&gt;が更新され&lt;code&gt;BUNDLE_FROZEN: 1&lt;/code&gt;が付加されるようです。&lt;/p&gt;

&lt;p&gt;これを解除するには、&lt;code&gt;bundle install --no-deployment&lt;/code&gt;を1度実行するか、&lt;code&gt;.bundle/config&lt;/code&gt;を直接編集して&lt;code&gt;BUNDLE_FROZEN: 1&lt;/code&gt;の行を削除してしまうかする必要があります。&lt;/p&gt;

&lt;h3 id=&#34;bundle-without:28e11def48886e5272dd0056d0f6083d&#34;&gt;BUNDLE_WITHOUT&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--without&lt;/code&gt;というオプションがあります。以下のように使います。本番環境ではdevelopmentやtestグループのgemは不要なのでwithoutでinstall対象から除外することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ bundle install --deployment --without development test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、これも&lt;code&gt;--without&lt;/code&gt;つきで実行すると&lt;code&gt;.bundle/config&lt;/code&gt;に保存されてしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
BUNDLE_WITHOUT: development test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うっかり開発環境で実行してしまうと、その後、&lt;code&gt;bundle exec rspec&lt;/code&gt;などやろうとすると以下のエラーが発生します。rspec-coreはGemに含まれませんと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle exec rpsec
/Users/name/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/rubygems_integration.rb:214:in `block in replace_gem&#39;: rspec-core is not part of the bundle. Add it to Gemfile. (Gem::LoadError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合も、&lt;code&gt;.bundle/config&lt;/code&gt;を編集してBUNDLE_WITHOUTの行を削除すれば良いです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>便利なカラーピッカー 0 to 255</title>
          <link>http://orihubon.com/blog/2013/07/09/0-to-255-color-picker/</link>
          <pubDate>Tue, 09 Jul 2013 23:59:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/09/0-to-255-color-picker/</guid>
          <description>&lt;p&gt;世の中カラーピッカーを提供するWebサイトはたくさんありますが、&lt;a href=&#34;http://0to255.com/&#34;&gt;0to255&lt;/a&gt;がとても使いやすかったのでメモ。&lt;/p&gt;

&lt;p&gt;ベースカラーを選択するとベースからの濃い色淡い色をチョイスして並べて表示してくれる。それだけ。なんですがシンプルで使いやすいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Font AwesomeをRailsで使ってみた</title>
          <link>http://orihubon.com/blog/2013/07/09/font-awesome-rails/</link>
          <pubDate>Tue, 09 Jul 2013 00:42:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/09/font-awesome-rails/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap向けのicon系Webフォントを提供するライブラリ。&lt;/p&gt;

&lt;p&gt;Railsで使うには &lt;a href=&#34;https://github.com/bokmann/font-awesome-rails&#34;&gt;font-awesome-rails&lt;/a&gt;をGemfileに書いて適切にimportすればOKです。&lt;/p&gt;

&lt;p&gt;使い方1 - iタグ使う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;icon-thumbs-up&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; icon-thumbs-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TwitterBootstrapであらかじめ用意されているアイコンの使い方と同じです。ただFont Awesomeの場合、画像ではなくフォントとして扱われるのでfont-colorで色を調整したり出来ます。&lt;/p&gt;

&lt;p&gt;使い方2 - CSSのcontentマークアップにユニコードを埋め込む&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.thumbs-up:before {
  font-size: 20px;
  font-family: &#39;FontAwesome&#39;;
  content: &#39;\F164&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;contentの値にユニコードをセットします。ユニコードの値は各アイコンの説明ページに小さく書かれてあります。たとえば&lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/icon/thumbs-up/&#34;&gt;thumbs-up&lt;/a&gt;であればF164をcontentの値にすればOK。また、font-familyにFontAwesomeを指定します。contentで埋め込めるので:beforeなどの疑似要素と組み合わせることでスタイルシートからアイコンをHTMLに埋め込むことも可能です!&lt;/p&gt;

&lt;p&gt;という感じで簡単ながらFont Awesomeの紹介でした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>jsFiddleでjavascriptお手軽動作確認</title>
          <link>http://orihubon.com/blog/2013/07/09/jsfiddle-js-test/</link>
          <pubDate>Tue, 09 Jul 2013 00:16:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/09/jsfiddle-js-test/</guid>
          <description>&lt;p&gt;Webアプリを作っていると、思いついたUIのアイデアを実装して使用感や見た目を確認したくなることがしばしばあるとおもいます。そんな時はさくっと試せる &lt;a href=&#34;http://jsfiddle.net/&#34;&gt;jsFiddle&lt;/a&gt; がお勧めです!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jsfiddle.net/niku4i/5pg4m/&#34;&gt;jQuery-UIのaccordion pluginの動作確認をしてみた例&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使ってみた感想としては、css、html、javascriptのコードをフォームに入力して Run! ボタンを押すだけでとても簡単でした。&lt;/p&gt;

&lt;p&gt;また、jsFiddleはgithub.comのgistに近い感覚でJavaScriptやCSSを試すことが出来るので、作った画面をSkypeやIRCで他人と共有できる点が優れています。StackOverflowでjs系で検索すると結構な確率で見ますね。&lt;/p&gt;

&lt;p&gt;jQueryなどのライブラリの選択やバージョンの変更も左側のメニューからポチポチやるだけで切り替えれて簡単。&lt;/p&gt;

&lt;p&gt;また、Ajax系の動作確認も可能です。サーバサイドのエンドポイントが必要ですが、jsFiddleでは &lt;code&gt;/echo/json/&lt;/code&gt;, &lt;code&gt;/echo/html/&lt;/code&gt;といったリクエストをresponseとしてechoするダミーのエンドポイントが提供されています。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>yokohama.ex #2 に参加してきたよ</title>
          <link>http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703/</link>
          <pubDate>Wed, 03 Jul 2013 23:02:00 JST</pubDate>
          <author></author>
          <guid>http://orihubon.com/blog/2013/07/03/yokohama-dot-ex-on-20130703/</guid>
          <description>&lt;p&gt;2013/07/03(水) 開催された &lt;a href=&#34;http://www.zusaar.com/event/822004&#34;&gt;yokohama.ex #2&lt;/a&gt; に参加してきました!&lt;/p&gt;

&lt;p&gt;場所はDeNA@渋谷ヒカリエ。&lt;/p&gt;

&lt;p&gt;会の趣旨は &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;elixir-lang.org&lt;/a&gt;のGETTING STARTEDをみんなで読んで勉強しましょう、といったところ。&lt;/p&gt;

&lt;p&gt;前回(第1回)はyokohama.rbの中でElixir紹介がてらGETTING STARTEDの1章から2.6.4までを読んだ、そうです。僕は参加してませんでしたので今回にあたって密かに一人独習したわけですが、@sonots さんが&lt;a href=&#34;https://docs.google.com/presentation/d/1Tl-NTgGiW6V6QCCi2Hy0V81XZTjkAWEC22yTWE8ChP4/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.p&#34;&gt;復習資料&lt;/a&gt; を作成してくれていて今日の会はこの復習資料からスタート! 英文で読んだ後でまとまった日本語で再度インプットするとすーっと浸みいります。とても助かりました。&lt;/p&gt;

&lt;p&gt;今回はSection2.6.5 TryからSection3の最後まで。プロジェクタにホームページの英文を映して代表の人が読みながらサンプルコードをiexで実行、あれこれ言い合う感じで進められていました。&lt;/p&gt;

&lt;p&gt;Elixirにもの申すレベルではないのでElixirには言及しませんが、会の進め方については1つ1つ順番に読み進めるスタイルなのでElixir初心者であっても取っ付きやすかったとおもいます!!!&lt;/p&gt;

&lt;p&gt;普段Ruby、Perlなどを使ってるので関数型言語の考え方は頭の体操になりました! 英語の速読にも良い会でした:)&lt;/p&gt;

&lt;p&gt;次回#3も予定されています。まだ追いつけるとおもますので興味がありましたら次回参加してみたらいかがでしょうか。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
